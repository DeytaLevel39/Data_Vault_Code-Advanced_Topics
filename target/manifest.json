{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.2", "generated_at": "2022-11-08T09:16:21.468584Z", "invocation_id": "f9ecc229-02a3-4fd2-854a-09cd49318e83", "env": {}, "project_id": "037de5dd7522edb511e15921051afcbb", "user_id": "74d1794a-a3d2-4ac2-b475-274c9d70bd3f", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.dbtvault_bigquery_demo.v_comp_customers_as_is": {"raw_sql": "with\r\n    h as\r\n        (select customer_hk, customer_number, record_source\r\n        from {{ ref('hub_customer') }}),\r\n    s_uk as\r\n        (select customer_hk, customer_id, title, first_name, last_name, wealth_bracket, lastmodifieddate, createddate,\r\n         applieddate, effective_from, crud_flag, load_date from {{ ref('sat_UK_customer') }}),\r\n    s_us as\r\n        (select customer_hk, customer_id, first_name, last_name, lastmodifieddate, createddate,\r\n         applieddate, effective_from, crud_flag, load_date from {{ ref('sat_US_customer') }}),\r\n    joined as\r\n        (select h.customer_hk, h.customer_number, s_uk.crud_flag, s_uk.customer_id,\r\n                s_uk.title, s_uk.first_name, s_uk.last_name, s_uk.wealth_bracket, s_uk.lastmodifieddate, s_uk.createddate, s_uk.applieddate,\r\n                s_uk.effective_from, s_uk.load_date, h.record_source,\r\n                row_number() over(partition by s_uk.customer_hk order by s_uk.applieddate desc) as rn\r\n         from h, s_uk\r\n         where s_uk.customer_hk = h.customer_hk\r\n         union all\r\n         select h.customer_hk, h.customer_number, s_us.crud_flag, s_us.customer_id,\r\n                '' as title, s_us.first_name, s_us.last_name, null as wealth_bracket, s_us.lastmodifieddate, s_us.createddate, s_us.applieddate,\r\n                s_us.effective_from, s_us.load_date, h.record_source,\r\n                row_number() over(partition by s_us.customer_hk order by s_us.applieddate desc) as rn\r\n         from h, s_us\r\n         )\r\nselect customer_hk, customer_id, customer_number, title, first_name, last_name, wealth_bracket, lastmodifieddate, createddate, applieddate, effective_from, load_date, record_source from joined\r\nwhere rn = 1 and crud_flag <> 'D'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.hub_customer", "model.dbtvault_bigquery_demo.sat_UK_customer", "model.dbtvault_bigquery_demo.sat_US_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["consumption_layer"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "consumption_layer", "v_comp_customers_as_is"], "unique_id": "model.dbtvault_bigquery_demo.v_comp_customers_as_is", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "consumption_layer\\v_comp_customers_as_is.sql", "original_file_path": "models\\consumption_layer\\v_comp_customers_as_is.sql", "name": "v_comp_customers_as_is", "alias": "v_comp_customers_as_is", "checksum": {"name": "sha256", "checksum": "e1ced00012a69d45c71998e5dc6922155025edfcc43a275dfd707d413d0dc95e"}, "tags": ["consumption_layer"], "refs": [["hub_customer"], ["sat_UK_customer"], ["sat_US_customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\consumption_layer\\v_comp_customers_as_is.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\consumption_layer\\v_comp_customers_as_is.sql", "deferred": false, "unrendered_config": {"tags": ["consumption_layer"], "enabled": true, "materialized": "view"}, "created_at": 1667898984.9383771, "compiled_sql": "with\n    h as\n        (select customer_hk, customer_number, record_source\n        from `steadfast-task-363413`.`data_vault`.`hub_customer`),\n    s_uk as\n        (select customer_hk, customer_id, title, first_name, last_name, wealth_bracket, lastmodifieddate, createddate,\n         applieddate, effective_from, crud_flag, load_date from `steadfast-task-363413`.`data_vault`.`sat_UK_customer`),\n    s_us as\n        (select customer_hk, customer_id, first_name, last_name, lastmodifieddate, createddate,\n         applieddate, effective_from, crud_flag, load_date from `steadfast-task-363413`.`data_vault`.`sat_US_customer`),\n    joined as\n        (select h.customer_hk, h.customer_number, s_uk.crud_flag, s_uk.customer_id,\n                s_uk.title, s_uk.first_name, s_uk.last_name, s_uk.wealth_bracket, s_uk.lastmodifieddate, s_uk.createddate, s_uk.applieddate,\n                s_uk.effective_from, s_uk.load_date, h.record_source,\n                row_number() over(partition by s_uk.customer_hk order by s_uk.applieddate desc) as rn\n         from h, s_uk\n         where s_uk.customer_hk = h.customer_hk\n         union all\n         select h.customer_hk, h.customer_number, s_us.crud_flag, s_us.customer_id,\n                '' as title, s_us.first_name, s_us.last_name, null as wealth_bracket, s_us.lastmodifieddate, s_us.createddate, s_us.applieddate,\n                s_us.effective_from, s_us.load_date, h.record_source,\n                row_number() over(partition by s_us.customer_hk order by s_us.applieddate desc) as rn\n         from h, s_us\n         )\nselect customer_hk, customer_id, customer_number, title, first_name, last_name, wealth_bracket, lastmodifieddate, createddate, applieddate, effective_from, load_date, record_source from joined\nwhere rn = 1 and crud_flag <> 'D'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_comp_customers_as_is`"}, "model.dbtvault_bigquery_demo.v_comp_customer_history": {"raw_sql": "with\r\n    h as\r\n        (select customer_hk, customer_number from {{ ref('hub_customer')}}),\r\n    s_uk as\r\n        (select customer_hk, customer_id, first_name, last_name, lastmodifieddate, createddate,\r\n         applieddate, effective_from, crud_flag, load_date from {{ ref('sat_UK_customer')}}),\r\n    s_us as\r\n        (select customer_hk, customer_id, first_name, last_name, lastmodifieddate, createddate,\r\n         applieddate, effective_from, crud_flag, load_date from {{ ref('sat_US_customer')}}),\r\n    joined as\r\n        (select h.customer_hk, h.customer_number, s_uk.customer_id, s_uk.first_name,\r\n        s_uk.last_name, s_uk.lastmodifieddate, s_uk.createddate, s_uk.applieddate,\r\n        s_uk.effective_from, s_uk.crud_flag, s_uk.load_date\r\n        from h, s_uk\r\n        where s_uk.customer_hk = h.customer_hk\r\n        union all\r\n        select h.customer_hk, h.customer_number, s_us.customer_id, s_us.first_name,\r\n        s_us.last_name, s_us.lastmodifieddate, s_us.createddate, s_us.applieddate,\r\n        s_us.effective_from, s_us.crud_flag, s_us.load_date\r\n        from h, s_us\r\n        where s_us.customer_hk = h.customer_hk)\r\nselect * from joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.hub_customer", "model.dbtvault_bigquery_demo.sat_UK_customer", "model.dbtvault_bigquery_demo.sat_US_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["consumption_layer"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "consumption_layer", "v_comp_customer_history"], "unique_id": "model.dbtvault_bigquery_demo.v_comp_customer_history", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "consumption_layer\\v_comp_customer_history.sql", "original_file_path": "models\\consumption_layer\\v_comp_customer_history.sql", "name": "v_comp_customer_history", "alias": "v_comp_customer_history", "checksum": {"name": "sha256", "checksum": "23081e5cd800067debf3a5b58a8513ef09c5ef24a3c9ded1a224920580ba4a02"}, "tags": ["consumption_layer"], "refs": [["hub_customer"], ["sat_UK_customer"], ["sat_US_customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\consumption_layer\\v_comp_customer_history.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\consumption_layer\\v_comp_customer_history.sql", "deferred": false, "unrendered_config": {"tags": ["consumption_layer"], "enabled": true, "materialized": "view"}, "created_at": 1667898984.9540057, "compiled_sql": "with\n    h as\n        (select customer_hk, customer_number from `steadfast-task-363413`.`data_vault`.`hub_customer`),\n    s_uk as\n        (select customer_hk, customer_id, first_name, last_name, lastmodifieddate, createddate,\n         applieddate, effective_from, crud_flag, load_date from `steadfast-task-363413`.`data_vault`.`sat_UK_customer`),\n    s_us as\n        (select customer_hk, customer_id, first_name, last_name, lastmodifieddate, createddate,\n         applieddate, effective_from, crud_flag, load_date from `steadfast-task-363413`.`data_vault`.`sat_US_customer`),\n    joined as\n        (select h.customer_hk, h.customer_number, s_uk.customer_id, s_uk.first_name,\n        s_uk.last_name, s_uk.lastmodifieddate, s_uk.createddate, s_uk.applieddate,\n        s_uk.effective_from, s_uk.crud_flag, s_uk.load_date\n        from h, s_uk\n        where s_uk.customer_hk = h.customer_hk\n        union all\n        select h.customer_hk, h.customer_number, s_us.customer_id, s_us.first_name,\n        s_us.last_name, s_us.lastmodifieddate, s_us.createddate, s_us.applieddate,\n        s_us.effective_from, s_us.crud_flag, s_us.load_date\n        from h, s_us\n        where s_us.customer_hk = h.customer_hk)\nselect * from joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_comp_customer_history`"}, "model.dbtvault_bigquery_demo.v_comp_customer_orders_as_is": {"raw_sql": "with\r\n    c as\r\n        (select customer_hk, customer_number, first_name, last_name\r\n         from {{ ref('v_comp_customers_as_is')}}),\r\n    o as\r\n        (select customer_hk, order_number, order_price, createddate, lastmodifieddate\r\n         from {{ref('v_comp_orders_as_is')}}),\r\n    joined as\r\n        (select c.customer_number, c.first_name, c.last_name, o.order_number, o.order_price,\r\n         o.createddate, o.lastmodifieddate\r\n         from c, o\r\n         where o.customer_hk = c.customer_hk)\r\nselect * from joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_comp_customers_as_is", "model.dbtvault_bigquery_demo.v_comp_orders_as_is"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["consumption_layer"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "consumption_layer", "v_comp_customer_orders_as_is"], "unique_id": "model.dbtvault_bigquery_demo.v_comp_customer_orders_as_is", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "consumption_layer\\v_comp_customer_orders_as_is.sql", "original_file_path": "models\\consumption_layer\\v_comp_customer_orders_as_is.sql", "name": "v_comp_customer_orders_as_is", "alias": "v_comp_customer_orders_as_is", "checksum": {"name": "sha256", "checksum": "c4eb8e749f5518693cfade0806ced81c9bbbe26b206d8f780d084ee79e48e96a"}, "tags": ["consumption_layer"], "refs": [["v_comp_customers_as_is"], ["v_comp_orders_as_is"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\consumption_layer\\v_comp_customer_orders_as_is.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\consumption_layer\\v_comp_customer_orders_as_is.sql", "deferred": false, "unrendered_config": {"tags": ["consumption_layer"], "enabled": true, "materialized": "view"}, "created_at": 1667898984.9696405, "compiled_sql": "with\n    c as\n        (select customer_hk, customer_number, first_name, last_name\n         from `steadfast-task-363413`.`data_vault`.`v_comp_customers_as_is`),\n    o as\n        (select customer_hk, order_number, order_price, createddate, lastmodifieddate\n         from `steadfast-task-363413`.`data_vault`.`v_comp_orders_as_is`),\n    joined as\n        (select c.customer_number, c.first_name, c.last_name, o.order_number, o.order_price,\n         o.createddate, o.lastmodifieddate\n         from c, o\n         where o.customer_hk = c.customer_hk)\nselect * from joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_comp_customer_orders_as_is`"}, "model.dbtvault_bigquery_demo.v_comp_orders_as_is": {"raw_sql": "with\r\n    h as\r\n        (select order_hk, order_number, record_source from {{ ref('hub_order')}}),\r\n    s as\r\n        (select order_hk, order_id, order_price, lastmodifieddate, createddate, effective_from, load_date,\r\n         crud_flag, row_number() over(partition by order_hk order by lastmodifieddate desc) as rn\r\n         from {{ ref('sat_UK_order')}}),\r\n    co as\r\n        (select order_hk, customer_hk from {{ref ('link_customer_order')}} ),\r\n    joined as\r\n        (select h.order_hk, h.order_number,\r\n            co.customer_hk,\r\n            s.order_id, s.order_price, s.lastmodifieddate, s.createddate, h.record_source, s.effective_from,\r\n            s.load_date, s.crud_flag, s.rn\r\n         from h, s, co\r\n        where s.order_hk = h.order_hk\r\n        and co.order_hk = h.order_hk)\r\nselect order_hk, customer_hk, order_id, order_number, order_price, lastmodifieddate, createddate,\r\neffective_from, load_date\r\nfrom joined\r\nwhere rn = 1 and crud_flag <> 'D'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.hub_order", "model.dbtvault_bigquery_demo.sat_UK_order", "model.dbtvault_bigquery_demo.link_customer_order"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["consumption_layer"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "consumption_layer", "v_comp_orders_as_is"], "unique_id": "model.dbtvault_bigquery_demo.v_comp_orders_as_is", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "consumption_layer\\v_comp_orders_as_is.sql", "original_file_path": "models\\consumption_layer\\v_comp_orders_as_is.sql", "name": "v_comp_orders_as_is", "alias": "v_comp_orders_as_is", "checksum": {"name": "sha256", "checksum": "f7e9c236a16570159954a540c1cfe4fcef2113387672d036c19a353d56b14c16"}, "tags": ["consumption_layer"], "refs": [["hub_order"], ["sat_UK_order"], ["link_customer_order"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\consumption_layer\\v_comp_orders_as_is.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\consumption_layer\\v_comp_orders_as_is.sql", "deferred": false, "unrendered_config": {"tags": ["consumption_layer"], "enabled": true, "materialized": "view"}, "created_at": 1667898984.9696405, "compiled_sql": "with\n    h as\n        (select order_hk, order_number, record_source from `steadfast-task-363413`.`data_vault`.`hub_order`),\n    s as\n        (select order_hk, order_id, order_price, lastmodifieddate, createddate, effective_from, load_date,\n         crud_flag, row_number() over(partition by order_hk order by lastmodifieddate desc) as rn\n         from `steadfast-task-363413`.`data_vault`.`sat_UK_order`),\n    co as\n        (select order_hk, customer_hk from `steadfast-task-363413`.`data_vault`.`link_customer_order` ),\n    joined as\n        (select h.order_hk, h.order_number,\n            co.customer_hk,\n            s.order_id, s.order_price, s.lastmodifieddate, s.createddate, h.record_source, s.effective_from,\n            s.load_date, s.crud_flag, s.rn\n         from h, s, co\n        where s.order_hk = h.order_hk\n        and co.order_hk = h.order_hk)\nselect order_hk, customer_hk, order_id, order_number, order_price, lastmodifieddate, createddate,\neffective_from, load_date\nfrom joined\nwhere rn = 1 and crud_flag <> 'D'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_comp_orders_as_is`"}, "model.dbtvault_bigquery_demo.v_raw_customer_wealth_bracket": {"raw_sql": "select distinct\r\nc.ID,\r\nc.NAME,\r\nc.DESCRIPTION,\r\nc.LASTMODIFIEDDATE,\r\nc.CREATEDDATE\r\nfrom\r\n    {{ source('dbtvault_bigquery_demo', 'repl_customer_wealth_brackets') }} as c", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_customer_wealth_brackets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_stage", "v_raw_customer_wealth_bracket"], "unique_id": "model.dbtvault_bigquery_demo.v_raw_customer_wealth_bracket", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_stage\\v_raw_customer_wealth_bracket.sql", "original_file_path": "models\\raw_stage\\v_raw_customer_wealth_bracket.sql", "name": "v_raw_customer_wealth_bracket", "alias": "v_raw_customer_wealth_bracket", "checksum": {"name": "sha256", "checksum": "b3da4ba65b1b15e4fd3d6c7876763b7e60d216ac67fb7808657f63c280ff5bc2"}, "tags": ["raw"], "refs": [], "sources": [["dbtvault_bigquery_demo", "repl_customer_wealth_brackets"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_stage\\v_raw_customer_wealth_bracket.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_stage\\v_raw_customer_wealth_bracket.sql", "deferred": false, "unrendered_config": {"tags": ["raw"], "enabled": true, "materialized": "view"}, "created_at": 1667898984.9852824, "compiled_sql": "select distinct\nc.ID,\nc.NAME,\nc.DESCRIPTION,\nc.LASTMODIFIEDDATE,\nc.CREATEDDATE\nfrom\n    `steadfast-task-363413`.`staging`.`repl_customer_wealth_brackets` as c", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_raw_customer_wealth_bracket`"}, "model.dbtvault_bigquery_demo.v_raw_UK_customer": {"raw_sql": "select distinct\r\nc.CUSTOMER_ID,\r\nc.CUSTOMER_NUMBER,\r\nc.FIRST_NAME,\r\nc.LAST_NAME,\r\nc.LASTMODIFIEDDATE,\r\nc.CREATEDDATE,\r\nc.APPLIEDDATE,\r\nc.CRUD_FLAG,\r\nc.TITLE,\r\nc.WEALTH_BRACKET,\r\np.ID\r\nfrom\r\n    {{ source('dbtvault_bigquery_demo', 'repl_UK_customers') }} as c\r\nleft join\r\n    {{ source('dbtvault_bigquery_demo', 'repl_customer_wealth_brackets') }} as p\r\non p.id = c.wealth_bracket", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_customer_wealth_brackets", "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_stage", "v_raw_UK_customer"], "unique_id": "model.dbtvault_bigquery_demo.v_raw_UK_customer", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_stage\\v_raw_UK_customer.sql", "original_file_path": "models\\raw_stage\\v_raw_UK_customer.sql", "name": "v_raw_UK_customer", "alias": "v_raw_UK_customer", "checksum": {"name": "sha256", "checksum": "57c9565dc980856f1d77ae79d573d17569fb7e1dacc93e7515e5f6e7d993b17a"}, "tags": ["raw"], "refs": [], "sources": [["dbtvault_bigquery_demo", "repl_customer_wealth_brackets"], ["dbtvault_bigquery_demo", "repl_UK_customers"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_stage\\v_raw_UK_customer.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_stage\\v_raw_UK_customer.sql", "deferred": false, "unrendered_config": {"tags": ["raw"], "enabled": true, "materialized": "view"}, "created_at": 1667898984.9852824, "compiled_sql": "select distinct\nc.CUSTOMER_ID,\nc.CUSTOMER_NUMBER,\nc.FIRST_NAME,\nc.LAST_NAME,\nc.LASTMODIFIEDDATE,\nc.CREATEDDATE,\nc.APPLIEDDATE,\nc.CRUD_FLAG,\nc.TITLE,\nc.WEALTH_BRACKET,\np.ID\nfrom\n    `steadfast-task-363413`.`staging`.`repl_UK_customers` as c\nleft join\n    `steadfast-task-363413`.`staging`.`repl_customer_wealth_brackets` as p\non p.id = c.wealth_bracket", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_raw_UK_customer`"}, "model.dbtvault_bigquery_demo.v_raw_UK_order": {"raw_sql": "select distinct\r\nc.ORDER_ID,\r\nc.ORDER_NUMBER,\r\nc.ORDER_PRICE,\r\nc.CUSTOMER_ID,\r\nc.LASTMODIFIEDDATE,\r\nc.CREATEDDATE,\r\nc.CRUD_FLAG,\r\np.CUSTOMER_NUMBER\r\nfrom\r\n    {{ source('dbtvault_bigquery_demo', 'repl_UK_orders') }} as c\r\nleft join\r\n    {{ source('dbtvault_bigquery_demo', 'repl_UK_customers') }} as p\r\non p.customer_id = c.customer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_customers", "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_stage", "v_raw_UK_order"], "unique_id": "model.dbtvault_bigquery_demo.v_raw_UK_order", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_stage\\v_raw_UK_order.sql", "original_file_path": "models\\raw_stage\\v_raw_UK_order.sql", "name": "v_raw_UK_order", "alias": "v_raw_UK_order", "checksum": {"name": "sha256", "checksum": "24ef8f244685ca40217c3813d4881719332b070d68f9fdb09c35764eaf07b4f8"}, "tags": ["raw"], "refs": [], "sources": [["dbtvault_bigquery_demo", "repl_UK_customers"], ["dbtvault_bigquery_demo", "repl_UK_orders"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_stage\\v_raw_UK_order.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_stage\\v_raw_UK_order.sql", "deferred": false, "unrendered_config": {"tags": ["raw"], "enabled": true, "materialized": "view"}, "created_at": 1667898984.9852824, "compiled_sql": "select distinct\nc.ORDER_ID,\nc.ORDER_NUMBER,\nc.ORDER_PRICE,\nc.CUSTOMER_ID,\nc.LASTMODIFIEDDATE,\nc.CREATEDDATE,\nc.CRUD_FLAG,\np.CUSTOMER_NUMBER\nfrom\n    `steadfast-task-363413`.`staging`.`repl_UK_orders` as c\nleft join\n    `steadfast-task-363413`.`staging`.`repl_UK_customers` as p\non p.customer_id = c.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_raw_UK_order`"}, "model.dbtvault_bigquery_demo.v_raw_US_customer": {"raw_sql": "select distinct\r\nc.CUSTOMER_ID,\r\nc.CUSTOMER_NUMBER,\r\nc.FIRST_NAME,\r\nc.LAST_NAME,\r\nc.LASTMODIFIEDDATE,\r\nc.CREATEDDATE,\r\nc.APPLIEDDATE,\r\nc.CRUD_FLAG\r\nfrom\r\n    {{ source('dbtvault_bigquery_demo', 'repl_US_customers') }} as c", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_US_customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_stage", "v_raw_US_customer"], "unique_id": "model.dbtvault_bigquery_demo.v_raw_US_customer", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_stage\\v_raw_US_customer.sql", "original_file_path": "models\\raw_stage\\v_raw_US_customer.sql", "name": "v_raw_US_customer", "alias": "v_raw_US_customer", "checksum": {"name": "sha256", "checksum": "e5669b2878b29c9373948d589ec4d3feeeb4035e20a3aaab0d6070b3fef6f1a9"}, "tags": ["raw"], "refs": [], "sources": [["dbtvault_bigquery_demo", "repl_US_customers"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_stage\\v_raw_US_customer.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_stage\\v_raw_US_customer.sql", "deferred": false, "unrendered_config": {"tags": ["raw"], "enabled": true, "materialized": "view"}, "created_at": 1667898985.0009158, "compiled_sql": "select distinct\nc.CUSTOMER_ID,\nc.CUSTOMER_NUMBER,\nc.FIRST_NAME,\nc.LAST_NAME,\nc.LASTMODIFIEDDATE,\nc.CREATEDDATE,\nc.APPLIEDDATE,\nc.CRUD_FLAG\nfrom\n    `steadfast-task-363413`.`staging`.`repl_US_customers` as c", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_raw_US_customer`"}, "model.dbtvault_bigquery_demo.hub_customer": {"raw_sql": "{%- set source_model = ['v_stg_UK_customer', 'v_stg_US_customer']   -%}\r\n    {%- set src_pk = \"CUSTOMER_HK\" -%}\r\n    {%- set src_nk = \"CUSTOMER_NUMBER\" -%}\r\n    {%- set src_ldts = \"LOAD_DATE\" -%}\r\n    {%- set src_source = \"RECORD_SOURCE\" -%}\r\n    \r\n    {{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\r\n                    src_source=src_source, source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.hub", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_UK_customer", "model.dbtvault_bigquery_demo.v_stg_US_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "hub"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "hubs", "hub_customer"], "unique_id": "model.dbtvault_bigquery_demo.hub_customer", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\hubs\\hub_customer.sql", "original_file_path": "models\\raw_vault\\hubs\\hub_customer.sql", "name": "hub_customer", "alias": "hub_customer", "checksum": {"name": "sha256", "checksum": "88505065ba487a7e2827eda86296e5d7a9f440fe9dc6db3f0058115ff66b5072"}, "tags": ["raw_vault", "hub"], "refs": [["v_stg_UK_customer"], ["v_stg_US_customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\hubs\\hub_customer.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\hubs\\hub_customer.sql", "deferred": false, "unrendered_config": {"tags": ["hub"], "materialized": "incremental"}, "created_at": 1667898985.0009158, "compiled_sql": "-- Generated by dbtvault.\n\nWITH row_rank_1 AS (\n    SELECT rr.`CUSTOMER_HK`, rr.`CUSTOMER_NUMBER`, rr.`LOAD_DATE`, rr.`RECORD_SOURCE`,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.`CUSTOMER_HK`\n               ORDER BY rr.`LOAD_DATE`\n           ) AS row_number\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_UK_customer` AS rr\n    WHERE rr.`CUSTOMER_HK` IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrow_rank_2 AS (\n    SELECT rr.`CUSTOMER_HK`, rr.`CUSTOMER_NUMBER`, rr.`LOAD_DATE`, rr.`RECORD_SOURCE`,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.`CUSTOMER_HK`\n               ORDER BY rr.`LOAD_DATE`\n           ) AS row_number\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_US_customer` AS rr\n    WHERE rr.`CUSTOMER_HK` IS NOT NULL\n    QUALIFY row_number = 1\n),\n\n\nstage_union AS (\n    SELECT * FROM row_rank_1\n    UNION ALL\n    SELECT * FROM row_rank_2\n),\n\n    row_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY ru.`CUSTOMER_HK`\n               ORDER BY ru.`LOAD_DATE`, ru.`RECORD_SOURCE` ASC\n           ) AS row_rank_number\n    FROM stage_union AS ru\n    WHERE ru.`CUSTOMER_HK` IS NOT NULL\n    QUALIFY row_rank_number = 1\n),\n\n\nrecords_to_insert AS (\n    SELECT a.`CUSTOMER_HK`, a.`CUSTOMER_NUMBER`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM row_rank_union AS a\n    LEFT JOIN `steadfast-task-363413`.`data_vault`.`hub_customer` AS d\n    ON a.`CUSTOMER_HK` = d.`CUSTOMER_HK`\n    WHERE d.`CUSTOMER_HK` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`hub_customer`"}, "model.dbtvault_bigquery_demo.hub_customer_wealth_bracket": {"raw_sql": "{%- set source_model = ['v_stg_customer_wealth_bracket']   -%}\r\n    {%- set src_pk = \"CUSTOMER_WEALTH_BRACKET_HK\" -%}\r\n    {%- set src_nk = \"ID\" -%}\r\n    {%- set src_ldts = \"LOAD_DATE\" -%}\r\n    {%- set src_source = \"RECORD_SOURCE\" -%}\r\n    \r\n    {{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\r\n                    src_source=src_source, source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.hub", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "hub"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "hubs", "hub_customer_wealth_bracket"], "unique_id": "model.dbtvault_bigquery_demo.hub_customer_wealth_bracket", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\hubs\\hub_customer_wealth_bracket.sql", "original_file_path": "models\\raw_vault\\hubs\\hub_customer_wealth_bracket.sql", "name": "hub_customer_wealth_bracket", "alias": "hub_customer_wealth_bracket", "checksum": {"name": "sha256", "checksum": "11d23e97186a0dffea4d79249e0985d7750c989664cb0da7361a101bab700089"}, "tags": ["raw_vault", "hub"], "refs": [["v_stg_customer_wealth_bracket"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\hubs\\hub_customer_wealth_bracket.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\hubs\\hub_customer_wealth_bracket.sql", "deferred": false, "unrendered_config": {"tags": ["hub"], "materialized": "incremental"}, "created_at": 1667898985.20411, "compiled_sql": "-- Generated by dbtvault.\n\nWITH row_rank_1 AS (\n    SELECT rr.`CUSTOMER_WEALTH_BRACKET_HK`, rr.`ID`, rr.`LOAD_DATE`, rr.`RECORD_SOURCE`,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.`CUSTOMER_WEALTH_BRACKET_HK`\n               ORDER BY rr.`LOAD_DATE`\n           ) AS row_number\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_customer_wealth_bracket` AS rr\n    WHERE rr.`CUSTOMER_WEALTH_BRACKET_HK` IS NOT NULL\n    QUALIFY row_number = 1\n),\n\n\nrecords_to_insert AS (\n    SELECT a.`CUSTOMER_WEALTH_BRACKET_HK`, a.`ID`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM row_rank_1 AS a\n    LEFT JOIN `steadfast-task-363413`.`data_vault`.`hub_customer_wealth_bracket` AS d\n    ON a.`CUSTOMER_WEALTH_BRACKET_HK` = d.`CUSTOMER_WEALTH_BRACKET_HK`\n    WHERE d.`CUSTOMER_WEALTH_BRACKET_HK` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`hub_customer_wealth_bracket`"}, "model.dbtvault_bigquery_demo.hub_order": {"raw_sql": "{%- set source_model = ['v_stg_UK_order']   -%}\r\n    {%- set src_pk = \"ORDER_HK\" -%}\r\n    {%- set src_nk = \"ORDER_NUMBER\" -%}\r\n    {%- set src_ldts = \"LOAD_DATE\" -%}\r\n    {%- set src_source = \"RECORD_SOURCE\" -%}\r\n    \r\n    {{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\r\n                    src_source=src_source, source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.hub", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_UK_order"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "hub"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "hubs", "hub_order"], "unique_id": "model.dbtvault_bigquery_demo.hub_order", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\hubs\\hub_order.sql", "original_file_path": "models\\raw_vault\\hubs\\hub_order.sql", "name": "hub_order", "alias": "hub_order", "checksum": {"name": "sha256", "checksum": "9ad4cf732861694558f18f2ea8b94324f142df33e6efd4fa15b6ea1573ed5585"}, "tags": ["raw_vault", "hub"], "refs": [["v_stg_UK_order"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\hubs\\hub_order.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\hubs\\hub_order.sql", "deferred": false, "unrendered_config": {"tags": ["hub"], "materialized": "incremental"}, "created_at": 1667898985.2353737, "compiled_sql": "-- Generated by dbtvault.\n\nWITH row_rank_1 AS (\n    SELECT rr.`ORDER_HK`, rr.`ORDER_NUMBER`, rr.`LOAD_DATE`, rr.`RECORD_SOURCE`,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.`ORDER_HK`\n               ORDER BY rr.`LOAD_DATE`\n           ) AS row_number\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_UK_order` AS rr\n    WHERE rr.`ORDER_HK` IS NOT NULL\n    QUALIFY row_number = 1\n),\n\n\nrecords_to_insert AS (\n    SELECT a.`ORDER_HK`, a.`ORDER_NUMBER`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM row_rank_1 AS a\n    LEFT JOIN `steadfast-task-363413`.`data_vault`.`hub_order` AS d\n    ON a.`ORDER_HK` = d.`ORDER_HK`\n    WHERE d.`ORDER_HK` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`hub_order`"}, "model.dbtvault_bigquery_demo.link_customer_order": {"raw_sql": "{%- set source_model = ['v_stg_UK_order'] -%}\r\n        {%- set src_pk = 'CUSTOMER_ORDER_HK' -%}\r\n        {%- set src_fk = ['CUSTOMER_HK', 'ORDER_HK'] -%}\r\n        {%- set src_ldts = \"LOAD_DATE\" -%}\r\n        {%- set src_source = \"RECORD_SOURCE\" -%}\r\n        \r\n        {{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\r\n                         src_source=src_source, source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.link", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_UK_order"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "link"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "links", "link_customer_order"], "unique_id": "model.dbtvault_bigquery_demo.link_customer_order", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\links\\link_customer_order.sql", "original_file_path": "models\\raw_vault\\links\\link_customer_order.sql", "name": "link_customer_order", "alias": "link_customer_order", "checksum": {"name": "sha256", "checksum": "0817e38c67c9cf889547384d41f561507897fa5e50da4ffce09def464f7dff0b"}, "tags": ["raw_vault", "link"], "refs": [["v_stg_UK_order"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\links\\link_customer_order.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\links\\link_customer_order.sql", "deferred": false, "unrendered_config": {"tags": ["link"], "materialized": "incremental"}, "created_at": 1667898985.266636, "compiled_sql": "\n\n    -- Generated by dbtvault.\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.`CUSTOMER_ORDER_HK`, rr.`CUSTOMER_HK`, rr.`ORDER_HK`, rr.`LOAD_DATE`, rr.`RECORD_SOURCE`,\n        ROW_NUMBER() OVER(\n               PARTITION BY rr.`CUSTOMER_ORDER_HK`\n               ORDER BY rr.`LOAD_DATE`\n        ) AS row_number\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_UK_order` AS rr\n    WHERE rr.`CUSTOMER_ORDER_HK` IS NOT NULL\n    AND rr.`CUSTOMER_HK` IS NOT NULL\n    AND rr.`ORDER_HK` IS NOT NULL\n    QUALIFY row_number = 1\n    ),\n\n\nrecords_to_insert AS (\n    SELECT a.`CUSTOMER_ORDER_HK`, a.`CUSTOMER_HK`, a.`ORDER_HK`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM row_rank_1 AS a\n    LEFT JOIN `steadfast-task-363413`.`data_vault`.`link_customer_order` AS d\n    ON a.`CUSTOMER_ORDER_HK` = d.`CUSTOMER_ORDER_HK`\n    WHERE d.`CUSTOMER_ORDER_HK` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`link_customer_order`"}, "model.dbtvault_bigquery_demo.link_customer_wealth_bracket_customer": {"raw_sql": "{%- set source_model = ['v_stg_UK_customer'] -%}\r\n        {%- set src_pk = 'CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK' -%}\r\n        {%- set src_fk = ['CUSTOMER_WEALTH_BRACKET_HK', 'CUSTOMER_HK'] -%}\r\n        {%- set src_ldts = \"LOAD_DATE\" -%}\r\n        {%- set src_source = \"RECORD_SOURCE\" -%}\r\n        \r\n        {{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\r\n                         src_source=src_source, source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.link", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_UK_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "link"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "links", "link_customer_wealth_bracket_customer"], "unique_id": "model.dbtvault_bigquery_demo.link_customer_wealth_bracket_customer", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\links\\link_customer_wealth_bracket_customer.sql", "original_file_path": "models\\raw_vault\\links\\link_customer_wealth_bracket_customer.sql", "name": "link_customer_wealth_bracket_customer", "alias": "link_customer_wealth_bracket_customer", "checksum": {"name": "sha256", "checksum": "8139b594468062ff2480fcf8518a9ff789a034a01bb0102e34d7390e77368392"}, "tags": ["raw_vault", "link"], "refs": [["v_stg_UK_customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\links\\link_customer_wealth_bracket_customer.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\links\\link_customer_wealth_bracket_customer.sql", "deferred": false, "unrendered_config": {"tags": ["link"], "materialized": "incremental"}, "created_at": 1667898985.3603945, "compiled_sql": "\n\n    -- Generated by dbtvault.\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.`CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK`, rr.`CUSTOMER_WEALTH_BRACKET_HK`, rr.`CUSTOMER_HK`, rr.`LOAD_DATE`, rr.`RECORD_SOURCE`,\n        ROW_NUMBER() OVER(\n               PARTITION BY rr.`CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK`\n               ORDER BY rr.`LOAD_DATE`\n        ) AS row_number\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_UK_customer` AS rr\n    WHERE rr.`CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK` IS NOT NULL\n    AND rr.`CUSTOMER_WEALTH_BRACKET_HK` IS NOT NULL\n    AND rr.`CUSTOMER_HK` IS NOT NULL\n    QUALIFY row_number = 1\n    ),\n\n\nrecords_to_insert AS (\n    SELECT a.`CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK`, a.`CUSTOMER_WEALTH_BRACKET_HK`, a.`CUSTOMER_HK`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM row_rank_1 AS a\n    LEFT JOIN `steadfast-task-363413`.`data_vault`.`link_customer_wealth_bracket_customer` AS d\n    ON a.`CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK` = d.`CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK`\n    WHERE d.`CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`link_customer_wealth_bracket_customer`"}, "model.dbtvault_bigquery_demo.sat_customer_wealth_bracket": {"raw_sql": "{%- set source_model = \"v_stg_customer_wealth_bracket\" -%}\r\n{%- set src_pk = \"CUSTOMER_WEALTH_BRACKET_HK\" -%}\r\n{%- set src_hashdiff = \"CUSTOMER_WEALTH_BRACKET_HASHDIFF\" -%}\r\n{%- set src_payload = [\"NAME\",\"DESCRIPTION\",\"LASTMODIFIEDDATE\",\"CREATEDDATE\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LOAD_DATE\" -%}\r\n{%- set src_source = \"RECORD_SOURCE\" -%}\r\n\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.sat", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "satellite"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "sats", "sat_customer_wealth_bracket"], "unique_id": "model.dbtvault_bigquery_demo.sat_customer_wealth_bracket", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\sats\\sat_customer_wealth_bracket.sql", "original_file_path": "models\\raw_vault\\sats\\sat_customer_wealth_bracket.sql", "name": "sat_customer_wealth_bracket", "alias": "sat_customer_wealth_bracket", "checksum": {"name": "sha256", "checksum": "9f5341a90b1b456452d320f9fa7ab2bea01ab1be0bc0702fee56568bfc67ed6e"}, "tags": ["raw_vault", "satellite"], "refs": [["v_stg_customer_wealth_bracket"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\sats\\sat_customer_wealth_bracket.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\sats\\sat_customer_wealth_bracket.sql", "deferred": false, "unrendered_config": {"tags": ["satellite"], "materialized": "incremental"}, "created_at": 1667898985.3916452, "compiled_sql": "-- Generated by dbtvault.\n\n    \n\nWITH source_data AS (\n    SELECT a.`CUSTOMER_WEALTH_BRACKET_HK`, a.`CUSTOMER_WEALTH_BRACKET_HASHDIFF`, a.`NAME`, a.`DESCRIPTION`, a.`LASTMODIFIEDDATE`, a.`CREATEDDATE`, a.`EFFECTIVE_FROM`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_customer_wealth_bracket` AS a\n    WHERE a.`CUSTOMER_WEALTH_BRACKET_HK` IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.`CUSTOMER_WEALTH_BRACKET_HK`, a.`CUSTOMER_WEALTH_BRACKET_HASHDIFF`, a.`LOAD_DATE`\n    FROM (\n        SELECT current_records.`CUSTOMER_WEALTH_BRACKET_HK`, current_records.`CUSTOMER_WEALTH_BRACKET_HASHDIFF`, current_records.`LOAD_DATE`,\n            RANK() OVER (\n               PARTITION BY current_records.`CUSTOMER_WEALTH_BRACKET_HK`\n               ORDER BY current_records.`LOAD_DATE` DESC\n            ) AS rank\n        FROM `steadfast-task-363413`.`data_vault`.`sat_customer_wealth_bracket` AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.`CUSTOMER_WEALTH_BRACKET_HK`\n                FROM source_data\n            ) AS source_records\n                ON current_records.`CUSTOMER_WEALTH_BRACKET_HK` = source_records.`CUSTOMER_WEALTH_BRACKET_HK`\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.`CUSTOMER_WEALTH_BRACKET_HK`, stage.`CUSTOMER_WEALTH_BRACKET_HASHDIFF`, stage.`NAME`, stage.`DESCRIPTION`, stage.`LASTMODIFIEDDATE`, stage.`CREATEDDATE`, stage.`EFFECTIVE_FROM`, stage.`LOAD_DATE`, stage.`RECORD_SOURCE`\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.`CUSTOMER_WEALTH_BRACKET_HK` = stage.`CUSTOMER_WEALTH_BRACKET_HK`\n        AND latest_records.`CUSTOMER_WEALTH_BRACKET_HASHDIFF` = stage.`CUSTOMER_WEALTH_BRACKET_HASHDIFF`\n    WHERE latest_records.`CUSTOMER_WEALTH_BRACKET_HASHDIFF` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`sat_customer_wealth_bracket`"}, "model.dbtvault_bigquery_demo.sat_UK_customer": {"raw_sql": "{%- set source_model = \"v_stg_UK_customer\" -%}\r\n{%- set src_pk = \"CUSTOMER_HK\" -%}\r\n{%- set src_hashdiff = \"CUSTOMER_HASHDIFF\" -%}\r\n{%- set src_payload = [\"CUSTOMER_ID\",\"FIRST_NAME\",\"LAST_NAME\",\"LASTMODIFIEDDATE\",\"CREATEDDATE\",\"APPLIEDDATE\",\"CRUD_FLAG\",\"TITLE\",\"WEALTH_BRACKET\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LOAD_DATE\" -%}\r\n{%- set src_source = \"RECORD_SOURCE\" -%}\r\n\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.sat", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_UK_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "satellite"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "sats", "sat_UK_customer"], "unique_id": "model.dbtvault_bigquery_demo.sat_UK_customer", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\sats\\sat_UK_customer.sql", "original_file_path": "models\\raw_vault\\sats\\sat_UK_customer.sql", "name": "sat_UK_customer", "alias": "sat_UK_customer", "checksum": {"name": "sha256", "checksum": "ae8c6fcc897b5df4919eaaa1b0abc9a89f9ea20106d54b04b0593cd3f54a851f"}, "tags": ["raw_vault", "satellite"], "refs": [["v_stg_UK_customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\sats\\sat_UK_customer.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\sats\\sat_UK_customer.sql", "deferred": false, "unrendered_config": {"tags": ["satellite"], "materialized": "incremental"}, "created_at": 1667898985.50106, "compiled_sql": "-- Generated by dbtvault.\n\n    \n\nWITH source_data AS (\n    SELECT a.`CUSTOMER_HK`, a.`CUSTOMER_HASHDIFF`, a.`CUSTOMER_ID`, a.`FIRST_NAME`, a.`LAST_NAME`, a.`LASTMODIFIEDDATE`, a.`CREATEDDATE`, a.`APPLIEDDATE`, a.`CRUD_FLAG`, a.`TITLE`, a.`WEALTH_BRACKET`, a.`EFFECTIVE_FROM`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_UK_customer` AS a\n    WHERE a.`CUSTOMER_HK` IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.`CUSTOMER_HK`, a.`CUSTOMER_HASHDIFF`, a.`LOAD_DATE`\n    FROM (\n        SELECT current_records.`CUSTOMER_HK`, current_records.`CUSTOMER_HASHDIFF`, current_records.`LOAD_DATE`,\n            RANK() OVER (\n               PARTITION BY current_records.`CUSTOMER_HK`\n               ORDER BY current_records.`LOAD_DATE` DESC\n            ) AS rank\n        FROM `steadfast-task-363413`.`data_vault`.`sat_UK_customer` AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.`CUSTOMER_HK`\n                FROM source_data\n            ) AS source_records\n                ON current_records.`CUSTOMER_HK` = source_records.`CUSTOMER_HK`\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.`CUSTOMER_HK`, stage.`CUSTOMER_HASHDIFF`, stage.`CUSTOMER_ID`, stage.`FIRST_NAME`, stage.`LAST_NAME`, stage.`LASTMODIFIEDDATE`, stage.`CREATEDDATE`, stage.`APPLIEDDATE`, stage.`CRUD_FLAG`, stage.`TITLE`, stage.`WEALTH_BRACKET`, stage.`EFFECTIVE_FROM`, stage.`LOAD_DATE`, stage.`RECORD_SOURCE`\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.`CUSTOMER_HK` = stage.`CUSTOMER_HK`\n        AND latest_records.`CUSTOMER_HASHDIFF` = stage.`CUSTOMER_HASHDIFF`\n    WHERE latest_records.`CUSTOMER_HASHDIFF` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`sat_UK_customer`"}, "model.dbtvault_bigquery_demo.sat_UK_order": {"raw_sql": "{%- set source_model = \"v_stg_UK_order\" -%}\r\n{%- set src_pk = \"ORDER_HK\" -%}\r\n{%- set src_hashdiff = \"ORDER_HASHDIFF\" -%}\r\n{%- set src_payload = [\"ORDER_ID\",\"ORDER_PRICE\",\"CUSTOMER_ID\",\"LASTMODIFIEDDATE\",\"CREATEDDATE\",\"CRUD_FLAG\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LOAD_DATE\" -%}\r\n{%- set src_source = \"RECORD_SOURCE\" -%}\r\n\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.sat", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_UK_order"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "satellite"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "sats", "sat_UK_order"], "unique_id": "model.dbtvault_bigquery_demo.sat_UK_order", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\sats\\sat_UK_order.sql", "original_file_path": "models\\raw_vault\\sats\\sat_UK_order.sql", "name": "sat_UK_order", "alias": "sat_UK_order", "checksum": {"name": "sha256", "checksum": "ca4aff940480c7c4b7fc739be7662456dd725c7ab466d34ec92c3d0623ee84c2"}, "tags": ["raw_vault", "satellite"], "refs": [["v_stg_UK_order"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\sats\\sat_UK_order.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\sats\\sat_UK_order.sql", "deferred": false, "unrendered_config": {"tags": ["satellite"], "materialized": "incremental"}, "created_at": 1667898985.5635777, "compiled_sql": "-- Generated by dbtvault.\n\n    \n\nWITH source_data AS (\n    SELECT a.`ORDER_HK`, a.`ORDER_HASHDIFF`, a.`ORDER_ID`, a.`ORDER_PRICE`, a.`CUSTOMER_ID`, a.`LASTMODIFIEDDATE`, a.`CREATEDDATE`, a.`CRUD_FLAG`, a.`EFFECTIVE_FROM`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_UK_order` AS a\n    WHERE a.`ORDER_HK` IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.`ORDER_HK`, a.`ORDER_HASHDIFF`, a.`LOAD_DATE`\n    FROM (\n        SELECT current_records.`ORDER_HK`, current_records.`ORDER_HASHDIFF`, current_records.`LOAD_DATE`,\n            RANK() OVER (\n               PARTITION BY current_records.`ORDER_HK`\n               ORDER BY current_records.`LOAD_DATE` DESC\n            ) AS rank\n        FROM `steadfast-task-363413`.`data_vault`.`sat_UK_order` AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.`ORDER_HK`\n                FROM source_data\n            ) AS source_records\n                ON current_records.`ORDER_HK` = source_records.`ORDER_HK`\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.`ORDER_HK`, stage.`ORDER_HASHDIFF`, stage.`ORDER_ID`, stage.`ORDER_PRICE`, stage.`CUSTOMER_ID`, stage.`LASTMODIFIEDDATE`, stage.`CREATEDDATE`, stage.`CRUD_FLAG`, stage.`EFFECTIVE_FROM`, stage.`LOAD_DATE`, stage.`RECORD_SOURCE`\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.`ORDER_HK` = stage.`ORDER_HK`\n        AND latest_records.`ORDER_HASHDIFF` = stage.`ORDER_HASHDIFF`\n    WHERE latest_records.`ORDER_HASHDIFF` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`sat_UK_order`"}, "model.dbtvault_bigquery_demo.sat_US_customer": {"raw_sql": "{%- set source_model = \"v_stg_US_customer\" -%}\r\n{%- set src_pk = \"CUSTOMER_HK\" -%}\r\n{%- set src_hashdiff = \"CUSTOMER_HASHDIFF\" -%}\r\n{%- set src_payload = [\"CUSTOMER_ID\",\"FIRST_NAME\",\"LAST_NAME\",\"LASTMODIFIEDDATE\",\"CREATEDDATE\",\"APPLIEDDATE\",\"CRUD_FLAG\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LOAD_DATE\" -%}\r\n{%- set src_source = \"RECORD_SOURCE\" -%}\r\n\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.sat", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_stg_US_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "satellite"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "raw_vault", "sats", "sat_US_customer"], "unique_id": "model.dbtvault_bigquery_demo.sat_US_customer", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "raw_vault\\sats\\sat_US_customer.sql", "original_file_path": "models\\raw_vault\\sats\\sat_US_customer.sql", "name": "sat_US_customer", "alias": "sat_US_customer", "checksum": {"name": "sha256", "checksum": "7aeaaa255e2c6a0a026a2585a44f12d21fd30a11f5fa8edcf3b091a8c3926d96"}, "tags": ["raw_vault", "satellite"], "refs": [["v_stg_US_customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\raw_vault\\sats\\sat_US_customer.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\raw_vault\\sats\\sat_US_customer.sql", "deferred": false, "unrendered_config": {"tags": ["satellite"], "materialized": "incremental"}, "created_at": 1667898985.6104631, "compiled_sql": "-- Generated by dbtvault.\n\n    \n\nWITH source_data AS (\n    SELECT a.`CUSTOMER_HK`, a.`CUSTOMER_HASHDIFF`, a.`CUSTOMER_ID`, a.`FIRST_NAME`, a.`LAST_NAME`, a.`LASTMODIFIEDDATE`, a.`CREATEDDATE`, a.`APPLIEDDATE`, a.`CRUD_FLAG`, a.`EFFECTIVE_FROM`, a.`LOAD_DATE`, a.`RECORD_SOURCE`\n    FROM `steadfast-task-363413`.`data_vault`.`v_stg_US_customer` AS a\n    WHERE a.`CUSTOMER_HK` IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.`CUSTOMER_HK`, a.`CUSTOMER_HASHDIFF`, a.`LOAD_DATE`\n    FROM (\n        SELECT current_records.`CUSTOMER_HK`, current_records.`CUSTOMER_HASHDIFF`, current_records.`LOAD_DATE`,\n            RANK() OVER (\n               PARTITION BY current_records.`CUSTOMER_HK`\n               ORDER BY current_records.`LOAD_DATE` DESC\n            ) AS rank\n        FROM `steadfast-task-363413`.`data_vault`.`sat_US_customer` AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.`CUSTOMER_HK`\n                FROM source_data\n            ) AS source_records\n                ON current_records.`CUSTOMER_HK` = source_records.`CUSTOMER_HK`\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.`CUSTOMER_HK`, stage.`CUSTOMER_HASHDIFF`, stage.`CUSTOMER_ID`, stage.`FIRST_NAME`, stage.`LAST_NAME`, stage.`LASTMODIFIEDDATE`, stage.`CREATEDDATE`, stage.`APPLIEDDATE`, stage.`CRUD_FLAG`, stage.`EFFECTIVE_FROM`, stage.`LOAD_DATE`, stage.`RECORD_SOURCE`\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.`CUSTOMER_HK` = stage.`CUSTOMER_HK`\n        AND latest_records.`CUSTOMER_HASHDIFF` = stage.`CUSTOMER_HASHDIFF`\n    WHERE latest_records.`CUSTOMER_HASHDIFF` IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`sat_US_customer`"}, "model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket": {"raw_sql": "{%- set yaml_metadata -%}\r\nsource_model: 'v_raw_customer_wealth_bracket'\r\nderived_columns:\r\n  CUSTOMER_WEALTH_BRACKET_KEY: 'ID'\r\n  RECORD_SOURCE: '!3'\r\n  EFFECTIVE_FROM: 'LASTMODIFIEDDATE'\r\nhashed_columns:\r\n  CUSTOMER_WEALTH_BRACKET_HK: 'CUSTOMER_WEALTH_BRACKET_KEY'\r\n  CUSTOMER_WEALTH_BRACKET_HASHDIFF:\r\n    is_hashdiff: true\r\n    columns: \r\n    - ID\r\n    - NAME\r\n    - DESCRIPTION\r\n    - LASTMODIFIEDDATE\r\n    - CREATEDDATE\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{% set source_model = metadata_dict['source_model'] %}\r\n\r\n{% set derived_columns = metadata_dict['derived_columns'] %}\r\n\r\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\r\n\r\nWITH staging AS (\r\n{{ dbtvault.stage(include_source_columns=true,\r\n                  source_model=source_model,\r\n                  derived_columns=derived_columns,\r\n                  hashed_columns=hashed_columns,\r\n                  ranked_columns=none) }}\r\n)\r\n\r\nSELECT *,\r\n       '{{ var('load_date') }}' AS LOAD_DATE\r\nFROM staging", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_raw_customer_wealth_bracket"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["stage"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "stage", "v_stg_customer_wealth_bracket"], "unique_id": "model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "stage\\v_stg_customer_wealth_bracket.sql", "original_file_path": "models\\stage\\v_stg_customer_wealth_bracket.sql", "name": "v_stg_customer_wealth_bracket", "alias": "v_stg_customer_wealth_bracket", "checksum": {"name": "sha256", "checksum": "f70bcb7a362314104122dee14171b215f9824b0449991970c696c5a034123743"}, "tags": ["stage"], "refs": [["v_raw_customer_wealth_bracket"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\stage\\v_stg_customer_wealth_bracket.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\stage\\v_stg_customer_wealth_bracket.sql", "deferred": false, "unrendered_config": {"tags": ["stage"], "enabled": true, "materialized": "view"}, "created_at": 1667898985.6573498, "compiled_sql": "\n\n\n\n\n\n\n\nWITH staging AS (\n-- Generated by dbtvault.\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    `ID`,\n    `NAME`,\n    `DESCRIPTION`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`\n\n    FROM `steadfast-task-363413`.`data_vault`.`v_raw_customer_wealth_bracket`\n),\n\nderived_columns AS (\n\n    SELECT\n\n    `ID`,\n    `NAME`,\n    `DESCRIPTION`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    ID AS `CUSTOMER_WEALTH_BRACKET_KEY`,\n    '3' AS `RECORD_SOURCE`,\n    LASTMODIFIEDDATE AS `EFFECTIVE_FROM`\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    `ID`,\n    `NAME`,\n    `DESCRIPTION`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `CUSTOMER_WEALTH_BRACKET_KEY`,\n    `RECORD_SOURCE`,\n    `EFFECTIVE_FROM`,\n\n    CAST(UPPER(TO_HEX(SHA256(NULLIF(UPPER(TRIM(CAST(`CUSTOMER_WEALTH_BRACKET_KEY` AS STRING))), '')))) AS STRING) AS `CUSTOMER_WEALTH_BRACKET_HK`,\n    UPPER(TO_HEX(SHA256(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CREATEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`DESCRIPTION` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`ID` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`LASTMODIFIEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`NAME` AS STRING))), ''), '^^')\n    )))) AS `CUSTOMER_WEALTH_BRACKET_HASHDIFF`\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    `ID`,\n    `NAME`,\n    `DESCRIPTION`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `CUSTOMER_WEALTH_BRACKET_KEY`,\n    `RECORD_SOURCE`,\n    `EFFECTIVE_FROM`,\n    `CUSTOMER_WEALTH_BRACKET_HK`,\n    `CUSTOMER_WEALTH_BRACKET_HASHDIFF`\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select\n)\n\nSELECT *,\n       '2009-11-05 08.36.0000000' AS LOAD_DATE\nFROM staging", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_stg_customer_wealth_bracket`"}, "model.dbtvault_bigquery_demo.v_stg_UK_customer": {"raw_sql": "{%- set yaml_metadata -%}\r\nsource_model: 'v_raw_UK_customer'\r\nderived_columns:\r\n  UK_CUSTOMER_KEY: 'CUSTOMER_NUMBER'\r\n  CUSTOMER_WEALTH_BRACKET_KEY: 'ID'\r\n  RECORD_SOURCE: '!1'\r\n  EFFECTIVE_FROM: 'LASTMODIFIEDDATE'\r\nhashed_columns:\r\n  CUSTOMER_HK: 'UK_CUSTOMER_KEY'\r\n  CUSTOMER_WEALTH_BRACKET_HK: 'CUSTOMER_WEALTH_BRACKET_KEY'\r\n  CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK:\r\n    - 'UK_CUSTOMER_KEY'\r\n    - 'CUSTOMER_WEALTH_BRACKET_KEY'\r\n  CUSTOMER_HASHDIFF:\r\n    is_hashdiff: true\r\n    columns: \r\n    - CUSTOMER_ID\r\n    - CUSTOMER_NUMBER\r\n    - FIRST_NAME\r\n    - LAST_NAME\r\n    - LASTMODIFIEDDATE\r\n    - CREATEDDATE\r\n    - APPLIEDDATE\r\n    - CRUD_FLAG\r\n    - TITLE\r\n    - WEALTH_BRACKET\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{% set source_model = metadata_dict['source_model'] %}\r\n\r\n{% set derived_columns = metadata_dict['derived_columns'] %}\r\n\r\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\r\n\r\nWITH staging AS (\r\n{{ dbtvault.stage(include_source_columns=true,\r\n                  source_model=source_model,\r\n                  derived_columns=derived_columns,\r\n                  hashed_columns=hashed_columns,\r\n                  ranked_columns=none) }}\r\n)\r\n\r\nSELECT *,\r\n       '{{ var('load_date') }}' AS LOAD_DATE\r\nFROM staging", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_raw_UK_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["stage"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "stage", "v_stg_UK_customer"], "unique_id": "model.dbtvault_bigquery_demo.v_stg_UK_customer", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "stage\\v_stg_UK_customer.sql", "original_file_path": "models\\stage\\v_stg_UK_customer.sql", "name": "v_stg_UK_customer", "alias": "v_stg_UK_customer", "checksum": {"name": "sha256", "checksum": "25c0d9950464f89acea30d4f65401092197c61cf7513dac31ca26b6c977430ad"}, "tags": ["stage"], "refs": [["v_raw_UK_customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\stage\\v_stg_UK_customer.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\stage\\v_stg_UK_customer.sql", "deferred": false, "unrendered_config": {"tags": ["stage"], "enabled": true, "materialized": "view"}, "created_at": 1667898985.8917975, "compiled_sql": "\n\n\n\n\n\n\n\nWITH staging AS (\n-- Generated by dbtvault.\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    `CUSTOMER_ID`,\n    `CUSTOMER_NUMBER`,\n    `FIRST_NAME`,\n    `LAST_NAME`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `APPLIEDDATE`,\n    `CRUD_FLAG`,\n    `TITLE`,\n    `WEALTH_BRACKET`,\n    `ID`\n\n    FROM `steadfast-task-363413`.`data_vault`.`v_raw_UK_customer`\n),\n\nderived_columns AS (\n\n    SELECT\n\n    `CUSTOMER_ID`,\n    `CUSTOMER_NUMBER`,\n    `FIRST_NAME`,\n    `LAST_NAME`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `APPLIEDDATE`,\n    `CRUD_FLAG`,\n    `TITLE`,\n    `WEALTH_BRACKET`,\n    `ID`,\n    CUSTOMER_NUMBER AS `UK_CUSTOMER_KEY`,\n    ID AS `CUSTOMER_WEALTH_BRACKET_KEY`,\n    '1' AS `RECORD_SOURCE`,\n    LASTMODIFIEDDATE AS `EFFECTIVE_FROM`\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    `CUSTOMER_ID`,\n    `CUSTOMER_NUMBER`,\n    `FIRST_NAME`,\n    `LAST_NAME`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `APPLIEDDATE`,\n    `CRUD_FLAG`,\n    `TITLE`,\n    `WEALTH_BRACKET`,\n    `ID`,\n    `UK_CUSTOMER_KEY`,\n    `CUSTOMER_WEALTH_BRACKET_KEY`,\n    `RECORD_SOURCE`,\n    `EFFECTIVE_FROM`,\n\n    CAST(UPPER(TO_HEX(SHA256(NULLIF(UPPER(TRIM(CAST(`UK_CUSTOMER_KEY` AS STRING))), '')))) AS STRING) AS `CUSTOMER_HK`,\n    CAST(UPPER(TO_HEX(SHA256(NULLIF(UPPER(TRIM(CAST(`CUSTOMER_WEALTH_BRACKET_KEY` AS STRING))), '')))) AS STRING) AS `CUSTOMER_WEALTH_BRACKET_HK`,\n    UPPER(TO_HEX(SHA256(NULLIF(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`UK_CUSTOMER_KEY` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CUSTOMER_WEALTH_BRACKET_KEY` AS STRING))), ''), '^^')\n    ), '^^||^^')))) AS `CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK`,\n    UPPER(TO_HEX(SHA256(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`APPLIEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CREATEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CRUD_FLAG` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CUSTOMER_ID` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CUSTOMER_NUMBER` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`FIRST_NAME` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`LAST_NAME` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`LASTMODIFIEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`TITLE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`WEALTH_BRACKET` AS STRING))), ''), '^^')\n    )))) AS `CUSTOMER_HASHDIFF`\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    `CUSTOMER_ID`,\n    `CUSTOMER_NUMBER`,\n    `FIRST_NAME`,\n    `LAST_NAME`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `APPLIEDDATE`,\n    `CRUD_FLAG`,\n    `TITLE`,\n    `WEALTH_BRACKET`,\n    `ID`,\n    `UK_CUSTOMER_KEY`,\n    `CUSTOMER_WEALTH_BRACKET_KEY`,\n    `RECORD_SOURCE`,\n    `EFFECTIVE_FROM`,\n    `CUSTOMER_HK`,\n    `CUSTOMER_WEALTH_BRACKET_HK`,\n    `CUSTOMER_WEALTH_BRACKET_CUSTOMER_HK`,\n    `CUSTOMER_HASHDIFF`\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select\n)\n\nSELECT *,\n       '2009-11-05 08.36.0000000' AS LOAD_DATE\nFROM staging", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_stg_UK_customer`"}, "model.dbtvault_bigquery_demo.v_stg_UK_order": {"raw_sql": "{%- set yaml_metadata -%}\r\nsource_model: 'v_raw_UK_order'\r\nderived_columns:\r\n  ORDER_KEY: 'ORDER_NUMBER'\r\n  UK_CUSTOMER_KEY: 'CUSTOMER_NUMBER'\r\n  RECORD_SOURCE: '!2'\r\n  EFFECTIVE_FROM: 'LASTMODIFIEDDATE'\r\nhashed_columns:\r\n  ORDER_HK: 'ORDER_KEY'\r\n  CUSTOMER_HK: 'UK_CUSTOMER_KEY'\r\n  CUSTOMER_ORDER_HK:\r\n    - 'ORDER_KEY'\r\n    - 'UK_CUSTOMER_KEY'\r\n  ORDER_HASHDIFF:\r\n    is_hashdiff: true\r\n    columns: \r\n    - ORDER_ID\r\n    - ORDER_NUMBER\r\n    - ORDER_PRICE\r\n    - CUSTOMER_ID\r\n    - LASTMODIFIEDDATE\r\n    - CREATEDDATE\r\n    - CRUD_FLAG\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{% set source_model = metadata_dict['source_model'] %}\r\n\r\n{% set derived_columns = metadata_dict['derived_columns'] %}\r\n\r\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\r\n\r\nWITH staging AS (\r\n{{ dbtvault.stage(include_source_columns=true,\r\n                  source_model=source_model,\r\n                  derived_columns=derived_columns,\r\n                  hashed_columns=hashed_columns,\r\n                  ranked_columns=none) }}\r\n)\r\n\r\nSELECT *,\r\n       '{{ var('load_date') }}' AS LOAD_DATE\r\nFROM staging", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_raw_UK_order"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["stage"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "stage", "v_stg_UK_order"], "unique_id": "model.dbtvault_bigquery_demo.v_stg_UK_order", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "stage\\v_stg_UK_order.sql", "original_file_path": "models\\stage\\v_stg_UK_order.sql", "name": "v_stg_UK_order", "alias": "v_stg_UK_order", "checksum": {"name": "sha256", "checksum": "89f15182fae0f5f3d12c2aeb7476c7c75ba558ddcebe1a9c00579d7e9db36d52"}, "tags": ["stage"], "refs": [["v_raw_UK_order"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\stage\\v_stg_UK_order.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\stage\\v_stg_UK_order.sql", "deferred": false, "unrendered_config": {"tags": ["stage"], "enabled": true, "materialized": "view"}, "created_at": 1667898986.0012126, "compiled_sql": "\n\n\n\n\n\n\n\nWITH staging AS (\n-- Generated by dbtvault.\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    `ORDER_ID`,\n    `ORDER_NUMBER`,\n    `ORDER_PRICE`,\n    `CUSTOMER_ID`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `CRUD_FLAG`,\n    `CUSTOMER_NUMBER`\n\n    FROM `steadfast-task-363413`.`data_vault`.`v_raw_UK_order`\n),\n\nderived_columns AS (\n\n    SELECT\n\n    `ORDER_ID`,\n    `ORDER_NUMBER`,\n    `ORDER_PRICE`,\n    `CUSTOMER_ID`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `CRUD_FLAG`,\n    `CUSTOMER_NUMBER`,\n    ORDER_NUMBER AS `ORDER_KEY`,\n    CUSTOMER_NUMBER AS `UK_CUSTOMER_KEY`,\n    '2' AS `RECORD_SOURCE`,\n    LASTMODIFIEDDATE AS `EFFECTIVE_FROM`\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    `ORDER_ID`,\n    `ORDER_NUMBER`,\n    `ORDER_PRICE`,\n    `CUSTOMER_ID`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `CRUD_FLAG`,\n    `CUSTOMER_NUMBER`,\n    `ORDER_KEY`,\n    `UK_CUSTOMER_KEY`,\n    `RECORD_SOURCE`,\n    `EFFECTIVE_FROM`,\n\n    CAST(UPPER(TO_HEX(SHA256(NULLIF(UPPER(TRIM(CAST(`ORDER_KEY` AS STRING))), '')))) AS STRING) AS `ORDER_HK`,\n    CAST(UPPER(TO_HEX(SHA256(NULLIF(UPPER(TRIM(CAST(`UK_CUSTOMER_KEY` AS STRING))), '')))) AS STRING) AS `CUSTOMER_HK`,\n    UPPER(TO_HEX(SHA256(NULLIF(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`ORDER_KEY` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`UK_CUSTOMER_KEY` AS STRING))), ''), '^^')\n    ), '^^||^^')))) AS `CUSTOMER_ORDER_HK`,\n    UPPER(TO_HEX(SHA256(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CREATEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CRUD_FLAG` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CUSTOMER_ID` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`LASTMODIFIEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`ORDER_ID` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`ORDER_NUMBER` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`ORDER_PRICE` AS STRING))), ''), '^^')\n    )))) AS `ORDER_HASHDIFF`\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    `ORDER_ID`,\n    `ORDER_NUMBER`,\n    `ORDER_PRICE`,\n    `CUSTOMER_ID`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `CRUD_FLAG`,\n    `CUSTOMER_NUMBER`,\n    `ORDER_KEY`,\n    `UK_CUSTOMER_KEY`,\n    `RECORD_SOURCE`,\n    `EFFECTIVE_FROM`,\n    `ORDER_HK`,\n    `CUSTOMER_HK`,\n    `CUSTOMER_ORDER_HK`,\n    `ORDER_HASHDIFF`\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select\n)\n\nSELECT *,\n       '2009-11-05 08.36.0000000' AS LOAD_DATE\nFROM staging", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_stg_UK_order`"}, "model.dbtvault_bigquery_demo.v_stg_US_customer": {"raw_sql": "{%- set yaml_metadata -%}\r\nsource_model: 'v_raw_US_customer'\r\nderived_columns:\r\n  US_CUSTOMER_KEY: 'CUSTOMER_NUMBER'\r\n  RECORD_SOURCE: '!101'\r\n  EFFECTIVE_FROM: 'LASTMODIFIEDDATE'\r\nhashed_columns:\r\n  CUSTOMER_HK: 'US_CUSTOMER_KEY'\r\n  CUSTOMER_HASHDIFF:\r\n    is_hashdiff: true\r\n    columns: \r\n    - CUSTOMER_ID\r\n    - CUSTOMER_NUMBER\r\n    - FIRST_NAME\r\n    - LAST_NAME\r\n    - LASTMODIFIEDDATE\r\n    - CREATEDDATE\r\n    - APPLIEDDATE\r\n    - CRUD_FLAG\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{% set source_model = metadata_dict['source_model'] %}\r\n\r\n{% set derived_columns = metadata_dict['derived_columns'] %}\r\n\r\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\r\n\r\nWITH staging AS (\r\n{{ dbtvault.stage(include_source_columns=true,\r\n                  source_model=source_model,\r\n                  derived_columns=derived_columns,\r\n                  hashed_columns=hashed_columns,\r\n                  ranked_columns=none) }}\r\n)\r\n\r\nSELECT *,\r\n       '{{ var('load_date') }}' AS LOAD_DATE\r\nFROM staging", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.dbtvault_bigquery_demo.v_raw_US_customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["stage"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "stage", "v_stg_US_customer"], "unique_id": "model.dbtvault_bigquery_demo.v_stg_US_customer", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "stage\\v_stg_US_customer.sql", "original_file_path": "models\\stage\\v_stg_US_customer.sql", "name": "v_stg_US_customer", "alias": "v_stg_US_customer", "checksum": {"name": "sha256", "checksum": "18925df25abd697dcc0049cb8df1e22c587a308d49e3d4658043027fc7dffaac"}, "tags": ["stage"], "refs": [["v_raw_US_customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dbtvault_bigquery_demo\\models\\stage\\v_stg_US_customer.sql", "build_path": "target\\run\\dbtvault_bigquery_demo\\models\\stage\\v_stg_US_customer.sql", "deferred": false, "unrendered_config": {"tags": ["stage"], "enabled": true, "materialized": "view"}, "created_at": 1667898986.0637152, "compiled_sql": "\n\n\n\n\n\n\n\nWITH staging AS (\n-- Generated by dbtvault.\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    `CUSTOMER_ID`,\n    `CUSTOMER_NUMBER`,\n    `FIRST_NAME`,\n    `LAST_NAME`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `APPLIEDDATE`,\n    `CRUD_FLAG`\n\n    FROM `steadfast-task-363413`.`data_vault`.`v_raw_US_customer`\n),\n\nderived_columns AS (\n\n    SELECT\n\n    `CUSTOMER_ID`,\n    `CUSTOMER_NUMBER`,\n    `FIRST_NAME`,\n    `LAST_NAME`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `APPLIEDDATE`,\n    `CRUD_FLAG`,\n    CUSTOMER_NUMBER AS `US_CUSTOMER_KEY`,\n    '101' AS `RECORD_SOURCE`,\n    LASTMODIFIEDDATE AS `EFFECTIVE_FROM`\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    `CUSTOMER_ID`,\n    `CUSTOMER_NUMBER`,\n    `FIRST_NAME`,\n    `LAST_NAME`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `APPLIEDDATE`,\n    `CRUD_FLAG`,\n    `US_CUSTOMER_KEY`,\n    `RECORD_SOURCE`,\n    `EFFECTIVE_FROM`,\n\n    CAST(UPPER(TO_HEX(SHA256(NULLIF(UPPER(TRIM(CAST(`US_CUSTOMER_KEY` AS STRING))), '')))) AS STRING) AS `CUSTOMER_HK`,\n    UPPER(TO_HEX(SHA256(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`APPLIEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CREATEDDATE` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CRUD_FLAG` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CUSTOMER_ID` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`CUSTOMER_NUMBER` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`FIRST_NAME` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`LAST_NAME` AS STRING))), ''), '^^'),'||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(`LASTMODIFIEDDATE` AS STRING))), ''), '^^')\n    )))) AS `CUSTOMER_HASHDIFF`\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    `CUSTOMER_ID`,\n    `CUSTOMER_NUMBER`,\n    `FIRST_NAME`,\n    `LAST_NAME`,\n    `LASTMODIFIEDDATE`,\n    `CREATEDDATE`,\n    `APPLIEDDATE`,\n    `CRUD_FLAG`,\n    `US_CUSTOMER_KEY`,\n    `RECORD_SOURCE`,\n    `EFFECTIVE_FROM`,\n    `CUSTOMER_HK`,\n    `CUSTOMER_HASHDIFF`\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select\n)\n\nSELECT *,\n       '2009-11-05 08.36.0000000' AS LOAD_DATE\nFROM staging", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`steadfast-task-363413`.`data_vault`.`v_stg_US_customer`"}, "seed.dbtvault_bigquery_demo.repl_customer_wealth_brackets": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "repl_customer_wealth_brackets"], "unique_id": "seed.dbtvault_bigquery_demo.repl_customer_wealth_brackets", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "repl_customer_wealth_brackets.csv", "original_file_path": "seeds\\repl_customer_wealth_brackets.csv", "name": "repl_customer_wealth_brackets", "alias": "repl_customer_wealth_brackets", "checksum": {"name": "sha256", "checksum": "6849168a1d7cb7a78791bb74ecc96004605ebeb8209e1d912bbeeb11c5a2895e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667898986.1418731}, "seed.dbtvault_bigquery_demo.repl_UK_customers": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "repl_UK_customers"], "unique_id": "seed.dbtvault_bigquery_demo.repl_UK_customers", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "repl_UK_customers.csv", "original_file_path": "seeds\\repl_UK_customers.csv", "name": "repl_UK_customers", "alias": "repl_UK_customers", "checksum": {"name": "sha256", "checksum": "9cdde0d57ffb94f484676930b60c77dd4b1676eaec73b60961537f87c04b5b70"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667898986.1418731}, "seed.dbtvault_bigquery_demo.repl_US_customers": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "steadfast-task-363413", "schema": "data_vault", "fqn": ["dbtvault_bigquery_demo", "repl_US_customers"], "unique_id": "seed.dbtvault_bigquery_demo.repl_US_customers", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "repl_US_customers.csv", "original_file_path": "seeds\\repl_US_customers.csv", "name": "repl_US_customers", "alias": "repl_US_customers", "checksum": {"name": "sha256", "checksum": "ea43a3401f42aa3008ae8b30ec4f6e90ccf80d5e840f2a4c7ad5cf19cf508e42"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667898986.1418731}}, "sources": {"source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_customers": {"fqn": ["dbtvault_bigquery_demo", "dbtvault_bigquery_demo", "repl_UK_customers"], "database": "steadfast-task-363413", "schema": "staging", "unique_id": "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_customers", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "repl_UK_customers", "source_name": "dbtvault_bigquery_demo", "source_description": "", "loader": "", "identifier": "repl_UK_customers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`steadfast-task-363413`.`staging`.`repl_UK_customers`", "created_at": 1667898986.2356641}, "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_US_customers": {"fqn": ["dbtvault_bigquery_demo", "dbtvault_bigquery_demo", "repl_US_customers"], "database": "steadfast-task-363413", "schema": "staging", "unique_id": "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_US_customers", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "repl_US_customers", "source_name": "dbtvault_bigquery_demo", "source_description": "", "loader": "", "identifier": "repl_US_customers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`steadfast-task-363413`.`staging`.`repl_US_customers`", "created_at": 1667898986.2356641}, "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_orders": {"fqn": ["dbtvault_bigquery_demo", "dbtvault_bigquery_demo", "repl_UK_orders"], "database": "steadfast-task-363413", "schema": "staging", "unique_id": "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_orders", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "repl_UK_orders", "source_name": "dbtvault_bigquery_demo", "source_description": "", "loader": "", "identifier": "repl_UK_orders", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`steadfast-task-363413`.`staging`.`repl_UK_orders`", "created_at": 1667898986.2356641}, "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_customer_wealth_brackets": {"fqn": ["dbtvault_bigquery_demo", "dbtvault_bigquery_demo", "repl_customer_wealth_brackets"], "database": "steadfast-task-363413", "schema": "staging", "unique_id": "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_customer_wealth_brackets", "package_name": "dbtvault_bigquery_demo", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "repl_customer_wealth_brackets", "source_name": "dbtvault_bigquery_demo", "source_description": "", "loader": "", "identifier": "repl_customer_wealth_brackets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`steadfast-task-363413`.`staging`.`repl_customer_wealth_brackets`", "created_at": 1667898986.2356641}}, "macros": {"macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9687266}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.9843538}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\copy.sql", "original_file_path": "macros\\materializations\\copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898981.999985}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0156147}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__bool_or": {"unique_id": "macro.dbt_bigquery.bigquery__bool_or", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__dateadd": {"unique_id": "macro.dbt_bigquery.bigquery__dateadd", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__datediff": {"unique_id": "macro.dbt_bigquery.bigquery__datediff", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__date_trunc": {"unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__except": {"unique_id": "macro.dbt_bigquery.bigquery__except", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__hash": {"unique_id": "macro.dbt_bigquery.bigquery__hash", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__intersect": {"unique_id": "macro.dbt_bigquery.bigquery__intersect", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__listagg": {"unique_id": "macro.dbt_bigquery.bigquery__listagg", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__position": {"unique_id": "macro.dbt_bigquery.bigquery__position", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0312464}, "macro.dbt_bigquery.bigquery__right": {"unique_id": "macro.dbt_bigquery.bigquery__right", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt_bigquery.bigquery__safe_cast": {"unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt_bigquery.bigquery__split_part": {"unique_id": "macro.dbt_bigquery.bigquery__split_part", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0468748}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbtvault.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0625007}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.078133}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.0937638}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1093922}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1093922}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1093922}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1093922}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1093922}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1093922}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1250403}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.1406693}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2031882}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2031882}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.218818}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.218818}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.218818}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2344296}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2344296}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2344296}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2500598}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2500598}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2500598}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2500598}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2500598}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2656868}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.281319}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.281319}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.281319}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.2969468}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3125763}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3282082}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3282082}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3282082}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3438382}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.359466}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3750956}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbtvault.is_list": {"unique_id": "macro.dbtvault.is_list", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "name": "is_list", "macro_sql": "{%- macro is_list(obj, empty_is_false=false) -%}\r\n\r\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\r\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.3907254}, "macro.dbtvault.is_nothing": {"unique_id": "macro.dbtvault.is_nothing", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "name": "is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\r\n\r\n    {%- if obj is none or obj is undefined or not obj or dbtvault.is_list(obj, empty_is_false=true) -%}\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4063547}, "macro.dbtvault.is_something": {"unique_id": "macro.dbtvault.is_something", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "name": "is_something", "macro_sql": "{%- macro is_something(obj) -%}\r\n\r\n    {%- if obj is not none and obj is defined and obj -%}\r\n        {#- if an empty list, do not consider the object something -#}\r\n        {% if dbtvault.is_list(empty_is_false=true) %}\r\n            {%- do return(true) -%}\r\n        {%- else -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4063547}, "macro.dbtvault.is_expression": {"unique_id": "macro.dbtvault.is_expression", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "name": "is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\r\n\r\n    {%- if obj is string -%}\r\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj -%}\r\n            {%- do return(true) -%}\r\n        {%- else -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4063547}, "macro.dbtvault.log_relation_sources": {"unique_id": "macro.dbtvault.log_relation_sources", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\logging.sql", "original_file_path": "macros\\internal\\helpers\\logging.sql", "name": "log_relation_sources", "macro_sql": "{% macro log_relation_sources(relation, source_count) %}\r\n    {{ return(adapter.dispatch('log_relation_sources', 'dbtvault')(relation=relation, source_count=source_count)) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__log_relation_sources"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4063547}, "macro.dbtvault.default__log_relation_sources": {"unique_id": "macro.dbtvault.default__log_relation_sources", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\logging.sql", "original_file_path": "macros\\internal\\helpers\\logging.sql", "name": "default__log_relation_sources", "macro_sql": "{% macro default__log_relation_sources(relation, source_count) %}\r\n\r\n    {%- if execute -%}\r\n\r\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}.{}\".format(relation.database, relation.schema, relation.identifier),\r\n                                                                        source_count)) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4063547}, "macro.dbtvault.databricks__log_relation_sources": {"unique_id": "macro.dbtvault.databricks__log_relation_sources", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\logging.sql", "original_file_path": "macros\\internal\\helpers\\logging.sql", "name": "databricks__log_relation_sources", "macro_sql": "{% macro databricks__log_relation_sources(relation, source_count) %}\r\n\r\n    {%- if execute -%}\r\n\r\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}\".format(relation.schema, relation.identifier),\r\n                                                                        source_count)) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4063547}, "macro.dbtvault.prepend_generated_by": {"unique_id": "macro.dbtvault.prepend_generated_by", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\prepend_generated_by.sql", "original_file_path": "macros\\internal\\helpers\\prepend_generated_by.sql", "name": "prepend_generated_by", "macro_sql": "{%- macro prepend_generated_by() -%}\r\n-- Generated by dbtvault.\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4063547}, "macro.dbtvault.process_columns_to_select": {"unique_id": "macro.dbtvault.process_columns_to_select", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "name": "process_columns_to_select", "macro_sql": "{%- macro process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}\r\n\r\n    {% set columns_list = columns_list | map('upper') | list %}\r\n    {% set exclude_columns_list = exclude_columns_list | map('upper') | list %}\r\n\r\n    {% set columns_to_select = [] %}\r\n\r\n    {% if not dbtvault.is_list(columns_list) or not dbtvault.is_list(exclude_columns_list)  %}\r\n\r\n        {{- exceptions.raise_compiler_error(\"One or both arguments are not of list type.\") -}}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- if dbtvault.is_something(columns_list) and dbtvault.is_something(exclude_columns_list) -%}\r\n\r\n        {%- for col in columns_list -%}\r\n\r\n            {%- if col not in exclude_columns_list -%}\r\n                {%- do columns_to_select.append(col) -%}\r\n            {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- do return(columns_to_select) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4063547}, "macro.dbtvault.extract_column_names": {"unique_id": "macro.dbtvault.extract_column_names", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "name": "extract_column_names", "macro_sql": "{%- macro extract_column_names(columns_dict=none) -%}\r\n\r\n    {%- set extracted_column_names = [] -%}\r\n\r\n    {%- if columns_dict is mapping -%}\r\n        {%- for key, value in columns_dict.items() -%}\r\n            {%- do extracted_column_names.append(key) -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(extracted_column_names) -%}\r\n    {%- else -%}\r\n        {%- do return([]) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.process_hash_column_excludes": {"unique_id": "macro.dbtvault.process_hash_column_excludes", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "name": "process_hash_column_excludes", "macro_sql": "{%- macro process_hash_column_excludes(hash_columns=none, source_columns=none) -%}\r\n\r\n    {%- set processed_hash_columns = {} -%}\r\n\r\n    {%- for col, col_mapping in hash_columns.items() -%}\r\n        \r\n        {%- if col_mapping is mapping -%}\r\n            {%- if col_mapping.exclude_columns -%}\r\n\r\n                {%- if col_mapping.columns -%}\r\n\r\n                    {%- set columns_to_hash = dbtvault.process_columns_to_select(source_columns, col_mapping.columns) -%}\r\n\r\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\r\n                    {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}\r\n\r\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\r\n                {%- else -%}\r\n\r\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\r\n                    {%- do hash_columns[col].update({'columns': source_columns}) -%}\r\n\r\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\r\n                {%- endif -%}\r\n            {%- else -%}\r\n                {%- do processed_hash_columns.update({col: col_mapping}) -%}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n            {%- do processed_hash_columns.update({col: col_mapping}) -%}\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n    {%- do return(processed_hash_columns) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.process_columns_to_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.print_list": {"unique_id": "macro.dbtvault.print_list", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "name": "print_list", "macro_sql": "{%- macro print_list(list_to_print=none, indent=4) -%}\r\n\r\n    {%- for col_name in list_to_print -%}\r\n        {{- col_name | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.extract_null_column_names": {"unique_id": "macro.dbtvault.extract_null_column_names", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "name": "extract_null_column_names", "macro_sql": "{%- macro extract_null_column_names(columns_dict=none) -%}\r\n\r\n    {%- set extracted_column_names = [] -%}\r\n\r\n    {%- if columns_dict is mapping -%}\r\n        {%- for key, value in columns_dict.items() -%}\r\n            {%- if dbtvault.is_something(value) -%}\r\n                {% if dbtvault.is_list(value) %}\r\n                    {% for col_name in value %}\r\n                        {%- do extracted_column_names.append(col_name) -%}\r\n                        {%- do extracted_column_names.append(col_name ~ \"_ORIGINAL\") -%}\r\n                    {% endfor %}\r\n                {%  else %}\r\n                    {%- do extracted_column_names.append(value) -%}\r\n                    {%- do extracted_column_names.append(value ~ \"_ORIGINAL\") -%}\r\n                {% endif %}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(extracted_column_names) -%}\r\n    {%- else -%}\r\n        {%- do return([]) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.alias": {"unique_id": "macro.dbtvault.alias", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\alias.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias.sql", "name": "alias", "macro_sql": "{%- macro alias(alias_config=none, prefix=none) -%}\r\n\r\n    {{- adapter.dispatch('alias', 'dbtvault')(alias_config=alias_config, prefix=prefix) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__alias"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.default__alias": {"unique_id": "macro.dbtvault.default__alias", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\alias.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias.sql", "name": "default__alias", "macro_sql": "\r\n\r\n{%- macro default__alias(alias_config=none, prefix=none) -%}\r\n\r\n{%- if alias_config is defined and alias_config is not none and alias_config -%}\r\n\r\n    {%- if alias_config is mapping -%}\r\n\r\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\r\n\r\n            {%- if prefix -%}\r\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\r\n            {%- else -%}\r\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\r\n            {%- endif -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- else -%}\r\n\r\n        {%- if prefix -%}\r\n\r\n        {{- dbtvault.prefix([alias_config], prefix) -}}\r\n\r\n        {%- else -%}\r\n\r\n        {{ alias_config }}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endif -%}\r\n\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n\r\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.alias_all": {"unique_id": "macro.dbtvault.alias_all", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\alias_all.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias_all.sql", "name": "alias_all", "macro_sql": "{%- macro alias_all(columns=none, prefix=none) -%}\r\n\r\n    {{- adapter.dispatch('alias_all', 'dbtvault')(columns=columns, prefix=prefix) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__alias_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.default__alias_all": {"unique_id": "macro.dbtvault.default__alias_all", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\alias_all.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias_all.sql", "name": "default__alias_all", "macro_sql": "\r\n\r\n{%- macro default__alias_all(columns, prefix) -%}\r\n\r\n{%- if dbtvault.is_list(columns) -%}\r\n\r\n    {%- for column in columns -%}\r\n        {{ dbtvault.alias(alias_config=column, prefix=prefix) }}\r\n        {%- if not loop.last -%} , {% endif -%}\r\n    {%- endfor -%}\r\n\r\n{%- elif columns is string -%}\r\n\r\n{{ dbtvault.alias(alias_config=columns, prefix=prefix) }}\r\n\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n        {{ exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list or a string.\") }}\r\n    {%- endif %}\r\n\r\n{%- endif %}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.alias"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.as_constant": {"unique_id": "macro.dbtvault.as_constant", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\as_constant.sql", "original_file_path": "macros\\internal\\metadata_processing\\as_constant.sql", "name": "as_constant", "macro_sql": "{%- macro as_constant(column_str=none) -%}\r\n\r\n    {{- adapter.dispatch('as_constant', 'dbtvault')(column_str=column_str) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__as_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.default__as_constant": {"unique_id": "macro.dbtvault.default__as_constant", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\as_constant.sql", "original_file_path": "macros\\internal\\metadata_processing\\as_constant.sql", "name": "default__as_constant", "macro_sql": "\r\n\r\n{%- macro default__as_constant(column_str) -%}\r\n\r\n    {%- if column_str is not none and column_str is string and column_str -%}\r\n\r\n        {%- if column_str | first == \"!\" -%}\r\n        \r\n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\r\n        \r\n        {%- else -%}\r\n        \r\n            {{- return(column_str) -}}\r\n\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid columns_str object provided. Must be a string and not null.\") }}\r\n        {%- endif %}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4219937}, "macro.dbtvault.check_required_parameters": {"unique_id": "macro.dbtvault.check_required_parameters", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\check_required_parameters.sql", "original_file_path": "macros\\internal\\metadata_processing\\check_required_parameters.sql", "name": "check_required_parameters", "macro_sql": "{%- macro check_required_parameters() -%}\r\n\r\n    {%- set ns = namespace(missing_parameters=[]) -%}\r\n\r\n    {%- if kwargs is not none -%}\r\n\r\n        {%- for k, v in kwargs.items() %}\r\n            {%- do ns.missing_parameters.append(k) if v is none -%}\r\n        {%- endfor -%}\r\n\r\n        {%- if ns.missing_parameters -%}\r\n            {{- exceptions.raise_compiler_error(\"Required parameter(s) missing or none in '{}': {}\".format(this, ns.missing_parameters | join(\", \"))) -}}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.437615}, "macro.dbtvault.concat_ws": {"unique_id": "macro.dbtvault.concat_ws", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "name": "concat_ws", "macro_sql": "{%- macro concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    {{- adapter.dispatch('concat_ws', 'dbtvault')(string_list=string_list, separator=separator) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.437615}, "macro.dbtvault.default__concat_ws": {"unique_id": "macro.dbtvault.default__concat_ws", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "name": "default__concat_ws", "macro_sql": "\r\n\r\n{%- macro default__concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    CONCAT_WS('{{ separator }}', {{ string_list | join(\", \") }})\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.437615}, "macro.dbtvault.bigquery__concat_ws": {"unique_id": "macro.dbtvault.bigquery__concat_ws", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "name": "bigquery__concat_ws", "macro_sql": "{%- macro bigquery__concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    {{- 'CONCAT(' -}}\r\n    {%- for str in string_list -%}\r\n        {{- \"{}\".format(str) -}}\r\n        {{- \",'{}',\".format(separator) if not loop.last -}}\r\n    {%- endfor -%}\r\n    {{- '\\n)' -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.437615}, "macro.dbtvault.sqlserver__concat_ws": {"unique_id": "macro.dbtvault.sqlserver__concat_ws", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "name": "sqlserver__concat_ws", "macro_sql": "{%- macro sqlserver__concat_ws(string_list, separator=\"||\") -%}\r\n\r\n{{ dbtvault.default__concat_ws(string_list=string_list, separator=separator) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.437615}, "macro.dbtvault.escape_column_names": {"unique_id": "macro.dbtvault.escape_column_names", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "escape_column_names", "macro_sql": "{%- macro escape_column_names(columns=none) -%}\r\n\r\n    {%- if dbtvault.is_list(columns) -%}\r\n        {%- set columns = dbtvault.expand_column_list(columns) -%}\r\n    {%- endif -%}\r\n\r\n    {%- if dbtvault.is_something(columns) -%}\r\n\r\n        {%- set col_string = '' -%}\r\n        {%- set col_list = [] -%}\r\n        {%- set col_mapping = {} -%}\r\n\r\n        {%- if columns is string -%}\r\n\r\n            {%- set col_string = dbtvault.escape_column_name(columns) -%}\r\n\r\n        {%- elif dbtvault.is_list(columns) -%}\r\n\r\n            {%- for col in columns -%}\r\n\r\n                {%- if col is string -%}\r\n\r\n                    {%- set escaped_col = dbtvault.escape_column_name(col) -%}\r\n\r\n                    {%- do col_list.append(escaped_col) -%}\r\n\r\n                {%- else -%}\r\n\r\n                    {%- if execute -%}\r\n                        {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string.\") -}}\r\n                    {%- endif -%}\r\n\r\n                {%- endif -%}\r\n\r\n            {%- endfor -%}\r\n\r\n        {%- elif columns is mapping -%}\r\n\r\n            {%- if columns['source_column'] and columns['alias'] -%}\r\n\r\n                {%- set escaped_source_col = dbtvault.escape_column_name(columns['source_column']) -%}\r\n                {%- set escaped_alias_col = dbtvault.escape_column_name(columns['alias']) -%}\r\n                {%- set col_mapping = {\"source_column\": escaped_source_col, \"alias\": escaped_alias_col} -%}\r\n\r\n            {%- else -%}\r\n\r\n                {%- if execute -%}\r\n                    {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\r\n                {%- endif %}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- else -%}\r\n\r\n            {%- if execute -%}\r\n                {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\r\n            {%- endif %}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- elif columns == '' -%}\r\n\r\n        {%- if execute -%}\r\n            {{- exceptions.raise_compiler_error(\"Expected a column name or a list of column names, got an empty string\") -}}\r\n        {%- endif -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- if columns is none -%}\r\n\r\n        {%- do return(none) -%}\r\n\r\n    {%- elif columns == [] -%}\r\n\r\n        {%- do return([]) -%}\r\n\r\n    {%- elif columns == {} -%}\r\n\r\n        {%- do return({}) -%}\r\n\r\n    {%- elif columns is string -%}\r\n\r\n        {%- do return(col_string) -%}\r\n\r\n    {%- elif dbtvault.is_list(columns) -%}\r\n\r\n        {%- do return(col_list) -%}\r\n\r\n    {%- elif columns is mapping -%}\r\n\r\n        {%- do return(col_mapping) -%}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.expand_column_list", "macro.dbtvault.is_something", "macro.dbtvault.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.437615}, "macro.dbtvault.escape_column_name": {"unique_id": "macro.dbtvault.escape_column_name", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "escape_column_name", "macro_sql": "{%- macro escape_column_name(column) -%}\r\n\r\n    {{- adapter.dispatch('escape_column_name', 'dbtvault')(column=column) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.default__escape_column_name": {"unique_id": "macro.dbtvault.default__escape_column_name", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "default__escape_column_name", "macro_sql": "\r\n\r\n{%- macro default__escape_column_name(column) -%}\r\n\r\n    {# Do not escape a constant (single quoted) value #}\r\n    {%- if column | first == \"'\" and column | last == \"'\" -%}\r\n        {%- set escaped_column_name = column -%}\r\n    {%- else -%}\r\n        {%- set escape_char_default_left, escape_char_default_right = dbtvault.get_escape_characters() -%}\r\n        {%- set escape_char_left  = var('escape_char_left',  escape_char_default_left) -%}\r\n        {%- set escape_char_right = var('escape_char_right', escape_char_default_right) -%}\r\n\r\n        {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\r\n    {%- endif -%}\r\n\r\n    {%- do return(escaped_column_name) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.get_escape_characters": {"unique_id": "macro.dbtvault.get_escape_characters", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "get_escape_characters", "macro_sql": "{% macro get_escape_characters() -%}\r\n\r\n    {% do return(adapter.dispatch('get_escape_characters', 'dbtvault')()) -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.snowflake__get_escape_characters": {"unique_id": "macro.dbtvault.snowflake__get_escape_characters", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "snowflake__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro snowflake__get_escape_characters() %}\r\n    {%- do return (('\"', '\"')) -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.bigquery__get_escape_characters": {"unique_id": "macro.dbtvault.bigquery__get_escape_characters", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "bigquery__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro bigquery__get_escape_characters() %}\r\n    {%- do return (('`', '`')) -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.sqlserver__get_escape_characters": {"unique_id": "macro.dbtvault.sqlserver__get_escape_characters", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "sqlserver__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro sqlserver__get_escape_characters() %}\r\n    {%- do return (('\"', '\"')) -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.databricks__get_escape_characters": {"unique_id": "macro.dbtvault.databricks__get_escape_characters", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "databricks__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro databricks__get_escape_characters() %}\r\n    {%- do return (('`', '`')) -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.postgres__get_escape_characters": {"unique_id": "macro.dbtvault.postgres__get_escape_characters", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "name": "postgres__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro postgres__get_escape_characters() %}\r\n    {#- DO NOT QUOTE FOR NOW. Postgres has a \"feature\" which froces explicit casing and breaks the SQL-92 standard -#}\r\n    {%- do return (('', '')) -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.expand_column_list": {"unique_id": "macro.dbtvault.expand_column_list", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\expand_column_list.sql", "original_file_path": "macros\\internal\\metadata_processing\\expand_column_list.sql", "name": "expand_column_list", "macro_sql": "{%- macro expand_column_list(columns=none) -%}\r\n\r\n{%- if not columns -%}\r\n    {%- do return([]) -%}\r\n{%- endif -%}\r\n\r\n{%- set col_list = [] -%}\r\n\r\n{%- if dbtvault.is_list(columns) -%}\r\n\r\n    {%- set columns = columns | reject(\"none\") %}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {%- if col is string -%}\r\n\r\n            {%- do col_list.append(col) -%}\r\n\r\n        {#- If list of lists -#}\r\n        {%- elif dbtvault.is_list(col) -%}\r\n\r\n            {%- for cols in col -%}\r\n\r\n                {%- do col_list.append(cols) -%}\r\n\r\n            {%- endfor -%}\r\n        {%- elif col is mapping -%}\r\n\r\n            {%- do col_list.append(col) -%}\r\n\r\n        {%- else -%}\r\n\r\n            {%- if execute -%}\r\n                {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list of lists, dictionaries or strings.\") -}}\r\n            {%- endif %}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n        {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list.\") -}}\r\n    {%- endif %}\r\n\r\n{%- endif -%}\r\n\r\n{%- do return(col_list) -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4532456}, "macro.dbtvault.multikey": {"unique_id": "macro.dbtvault.multikey", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\multikey.sql", "original_file_path": "macros\\internal\\metadata_processing\\multikey.sql", "name": "multikey", "macro_sql": "{%- macro multikey(columns, prefix=none, condition=none, operator='AND') -%}\r\n\r\n    {{- adapter.dispatch('multikey', 'dbtvault')(columns=columns, prefix=prefix, condition=condition, operator=operator) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4689054}, "macro.dbtvault.default__multikey": {"unique_id": "macro.dbtvault.default__multikey", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\multikey.sql", "original_file_path": "macros\\internal\\metadata_processing\\multikey.sql", "name": "default__multikey", "macro_sql": "\r\n\r\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND') -%}\r\n\r\n    {%- if prefix is string -%}\r\n        {%- set prefix = [prefix] -%}\r\n    {%- endif -%}\r\n\r\n    {%- if columns is string -%}\r\n        {%- set columns = [columns] -%}\r\n    {%- endif -%}\r\n\r\n    {%- if condition in ['<>', '!=', '='] -%}\r\n        {%- for col in columns -%}\r\n            {%- if prefix -%}\r\n                {{- dbtvault.prefix([col], prefix[0], alias_target='target') }} {{ condition }} {{ dbtvault.prefix([col], prefix[1]) -}}\r\n            {%- endif %}\r\n            {%- if not loop.last %} {{ operator }} {% endif -%}\r\n        {% endfor -%}\r\n    {%- else -%}\r\n        {%- if dbtvault.is_list(columns) -%}\r\n            {%- for col in columns -%}\r\n                {{ (prefix[0] ~ '.') if prefix }}{{ col }} {{ condition if condition else '' }}\r\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\r\n            {%- endfor -%}\r\n        {%- else -%}\r\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4689054}, "macro.dbtvault.process_payload_column_excludes": {"unique_id": "macro.dbtvault.process_payload_column_excludes", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\internal\\metadata_processing\\process_payload_column_excludes.sql", "original_file_path": "macros\\internal\\metadata_processing\\process_payload_column_excludes.sql", "name": "process_payload_column_excludes", "macro_sql": "{%- macro process_payload_column_excludes(src_pk, src_hashdiff, src_payload, src_extra_columns,\r\n                                          src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {%- if src_payload is not mapping -%}\r\n        {%- do return(src_payload) -%}\r\n    {%- endif -%}\r\n\r\n    {%- set source_model_cols = adapter.get_columns_in_relation(ref(source_model)) -%}\r\n    {%- set columns_in_metadata = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff,\r\n                                                                       src_payload, src_extra_columns,\r\n                                                                       src_eff, src_ldts, src_source]) | map('lower') | list -%}\r\n\r\n    {%- set payload_cols = [] -%}\r\n    {%- for col in source_model_cols -%}\r\n        {%- if col.column | lower not in columns_in_metadata -%}\r\n            {%- do payload_cols.append(col.column) -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n    {%- if 'exclude_columns' in src_payload.keys() -%}\r\n        {%- set table_excludes_columns = src_payload.exclude_columns -%}\r\n\r\n        {%- if table_excludes_columns -%}\r\n\r\n            {%- set excluded_payload = [] -%}\r\n            {%- set exclude_columns_list = src_payload.columns | map('lower') | list -%}\r\n\r\n            {%- for col in payload_cols -%}\r\n               {%- if col | lower not in exclude_columns_list -%}\r\n                   {%- do excluded_payload.append(col) -%}\r\n               {%- endif -%}\r\n            {%- endfor -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- do return(excluded_payload) -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.4689054}, "macro.dbtvault.drop_temporary_special": {"unique_id": "macro.dbtvault.drop_temporary_special", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\drop_temporary.sql", "original_file_path": "macros\\materialisations\\drop_temporary.sql", "name": "drop_temporary_special", "macro_sql": "{% macro drop_temporary_special(tmp_relation) %}\r\n    {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n    {# the connection or session that created it so drop it now before the commit below closes this session #}\r\n\r\n    {%- set drop_query_name = 'DROP_QUERY-' ~ i -%}\r\n    {% call statement(drop_query_name, fetch_result=True) -%}\r\n        {% if target.type == 'databricks' %}\r\n            DROP VIEW {{ tmp_relation }};\r\n        {% elif target.type == 'sqlserver' %}\r\n            DROP TABLE {{ tmp_relation }};\r\n        {% endif %}\r\n    {%- endcall %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.484534}, "macro.dbtvault.materialization_bridge_incremental_default": {"unique_id": "macro.dbtvault.materialization_bridge_incremental_default", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\incremental_bridge_materialization.sql", "original_file_path": "macros\\materialisations\\incremental_bridge_materialization.sql", "name": "materialization_bridge_incremental_default", "macro_sql": "{%- materialization bridge_incremental, default -%}\r\n\r\n  {%- set full_refresh_mode = should_full_refresh() -%}\r\n\r\n  {% if target.type == \"sqlserver\" %}\r\n      {%- set target_relation = this.incorporate(type='table') -%}\r\n  {%  else %}\r\n      {%- set target_relation = this -%}\r\n  {% endif %}\r\n  {%- set existing_relation = load_relation(this) -%}\r\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {%- set to_drop = [] -%}\r\n  {%- if existing_relation is none -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\r\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\r\n      {%- do adapter.drop_relation(backup_relation) -%}\r\n\r\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n      {%- do to_drop.append(backup_relation) -%}\r\n  {%- else -%}\r\n\r\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\r\n      {%- do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) -%}\r\n      {%- set build_sql = dbtvault.incremental_bridge_replace(tmp_relation, target_relation) -%}\r\n{%- endif -%}\r\n\r\n  {%- call statement(\"main\") -%}\r\n      {{ build_sql }}\r\n  {%- endcall -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {%- do adapter.commit() -%}\r\n\r\n  {%- for rel in to_drop -%}\r\n      {%- do adapter.drop_relation(rel) -%}\r\n  {%- endfor -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbtvault.incremental_bridge_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.484534}, "macro.dbtvault.incremental_pit_replace": {"unique_id": "macro.dbtvault.incremental_pit_replace", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "original_file_path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "name": "incremental_pit_replace", "macro_sql": "{% macro incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\r\n\r\n    TRUNCATE TABLE {{ target_relation }};\r\n\r\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       SELECT {{ dest_cols_csv }}\r\n       FROM {{ tmp_relation }}\r\n    );\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5001645}, "macro.dbtvault.incremental_bridge_replace": {"unique_id": "macro.dbtvault.incremental_bridge_replace", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "original_file_path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "name": "incremental_bridge_replace", "macro_sql": "{% macro incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\r\n\r\n    TRUNCATE TABLE {{ target_relation }};\r\n\r\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       SELECT {{ dest_cols_csv }}\r\n       FROM {{ tmp_relation }}\r\n    );\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5001645}, "macro.dbtvault.materialization_pit_incremental_default": {"unique_id": "macro.dbtvault.materialization_pit_incremental_default", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\incremental_pit_materialization.sql", "original_file_path": "macros\\materialisations\\incremental_pit_materialization.sql", "name": "materialization_pit_incremental_default", "macro_sql": "{%- materialization pit_incremental, default -%}\r\n\r\n  {%- set full_refresh_mode = should_full_refresh() -%}\r\n\r\n  {% if target.type == \"sqlserver\" %}\r\n      {%- set target_relation = this.incorporate(type='table') -%}\r\n  {%  else %}\r\n      {%- set target_relation = this -%}\r\n  {% endif %}\r\n  {%- set existing_relation = load_relation(this) -%}\r\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {%- set to_drop = [] -%}\r\n  {%- if existing_relation is none -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\r\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\r\n      {%- do adapter.drop_relation(backup_relation) -%}\r\n\r\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n      {%- do to_drop.append(backup_relation) -%}\r\n  {%- else -%}\r\n\r\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\r\n      {%- do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) -%}\r\n      {%- set build_sql = dbtvault.incremental_pit_replace(tmp_relation, target_relation) -%}\r\n{%- endif -%}\r\n\r\n  {%- call statement(\"main\") -%}\r\n      {{ build_sql }}\r\n  {%- endcall -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {%- do adapter.commit() -%}\r\n\r\n  {%- for rel in to_drop -%}\r\n      {%- do adapter.drop_relation(rel) -%}\r\n  {%- endfor -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbtvault.incremental_pit_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5001645}, "macro.dbtvault.is_any_incremental": {"unique_id": "macro.dbtvault.is_any_incremental", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "name": "is_any_incremental", "macro_sql": "{%- macro is_any_incremental() -%}\r\n    {%- if dbtvault.is_vault_insert_by_period() or dbtvault.is_vault_insert_by_rank() or dbtvault.is_pit_incremental() or dbtvault.is_bridge_incremental() or is_incremental() -%}\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_vault_insert_by_period", "macro.dbtvault.is_vault_insert_by_rank", "macro.dbtvault.is_pit_incremental", "macro.dbtvault.is_bridge_incremental", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5157871}, "macro.dbtvault.is_vault_insert_by_period": {"unique_id": "macro.dbtvault.is_vault_insert_by_period", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "name": "is_vault_insert_by_period", "macro_sql": "{% macro is_vault_insert_by_period() %}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'vault_insert_by_period'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5157871}, "macro.dbtvault.is_vault_insert_by_rank": {"unique_id": "macro.dbtvault.is_vault_insert_by_rank", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "name": "is_vault_insert_by_rank", "macro_sql": "{% macro is_vault_insert_by_rank() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'vault_insert_by_rank'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5157871}, "macro.dbtvault.is_bridge_incremental": {"unique_id": "macro.dbtvault.is_bridge_incremental", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "name": "is_bridge_incremental", "macro_sql": "{% macro is_bridge_incremental() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'bridge_incremental'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5157871}, "macro.dbtvault.is_pit_incremental": {"unique_id": "macro.dbtvault.is_pit_incremental", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "name": "is_pit_incremental", "macro_sql": "{% macro is_pit_incremental() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'pit_incremental'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5157871}, "macro.dbtvault.check_placeholder": {"unique_id": "macro.dbtvault.check_placeholder", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\shared_helpers.sql", "original_file_path": "macros\\materialisations\\shared_helpers.sql", "name": "check_placeholder", "macro_sql": "{%- macro check_placeholder(model_sql, placeholder='__PERIOD_FILTER__') -%}\r\n\r\n    {%- if model_sql.find(placeholder) == -1 -%}\r\n    {%- set error_message -%}\r\n    Model '{{ model.unique_id }}' does not include the required string '{{ placeholder }}' in its sql\r\n        {%- endset -%}\r\n        {{- exceptions.raise_compiler_error(error_message) -}}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.5314193}, "macro.dbtvault.materialization_vault_insert_by_period_default": {"unique_id": "macro.dbtvault.materialization_vault_insert_by_period_default", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\vault_insert_by_period_materialization.sql", "original_file_path": "macros\\materialisations\\vault_insert_by_period_materialization.sql", "name": "materialization_vault_insert_by_period_default", "macro_sql": "{% materialization vault_insert_by_period, default -%}\r\n\r\n    {% if target.type == \"postgres\" and execute %}\r\n        {{ exceptions.raise_compiler_error(\"The vault_insert_by_period materialisation is currently unavailable on Postgres.\") }}\r\n    {% endif %}\r\n\r\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\r\n\r\n    {% if target.type == \"sqlserver\" %}\r\n        {%- set target_relation = this.incorporate(type='table') -%}\r\n    {%  else %}\r\n        {%- set target_relation = this -%}\r\n    {% endif %}\r\n    {%- set existing_relation = load_relation(this) -%}\r\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n    {%- set timestamp_field = dbtvault.escape_column_names(config.require('timestamp_field')) -%}\r\n    {%- set date_source_models = config.get('date_source_models', default=none) -%}\r\n\r\n    {%- set start_stop_dates = dbtvault.get_start_stop_dates(timestamp_field, date_source_models) | as_native -%}\r\n\r\n    {%- set period = config.get('period', default='day') -%}\r\n    {%- set to_drop = [] -%}\r\n\r\n    {%- do dbtvault.check_placeholder(sql) -%}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% if existing_relation is none %}\r\n\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n        {% do to_drop.append(tmp_relation) %}\r\n\r\n    {% elif existing_relation.is_view %}\r\n\r\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_period).\") }}\r\n        {% do adapter.drop_relation(existing_relation) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n    {% elif full_refresh_mode %}\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n    {% else %}\r\n        {% set period_boundaries = dbtvault.get_period_boundaries(target_relation,\r\n                                                                  timestamp_field,\r\n                                                                  start_stop_dates.start_date,\r\n                                                                  start_stop_dates.stop_date,\r\n                                                                  period) %}\r\n\r\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n\r\n        {% for i in range(period_boundaries.num_periods) -%}\r\n\r\n            {%- set iteration_number = i + 1 -%}\r\n\r\n            {%- set period_of_load = dbtvault.get_period_of_load(period, i, period_boundaries.start_timestamp) -%}\r\n\r\n            {{ dbt_utils.log_info(\"Running for {} {} of {} ({}) [{}]\".format(period, iteration_number, period_boundaries.num_periods, period_of_load, model.unique_id)) }}\r\n\r\n            {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n            {% set tmp_table_sql = dbtvault.get_period_filter_sql(target_cols_csv, sql, timestamp_field, period,\r\n                                                                  period_boundaries.start_timestamp,\r\n                                                                  period_boundaries.stop_timestamp, i) %}\r\n\r\n\r\n\r\n            {# This call statement drops and then creates a temporary table #}\r\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\r\n            {# See MSSQL note and drop code below #}\r\n\r\n            {# [ ] TODO check dbt postgres implementation for a possible fix #}\r\n            {% call statement() -%}\r\n                {{ create_table_as(True, tmp_relation, tmp_table_sql) }}\r\n            {%- endcall %}\r\n\r\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                                  to_relation=target_relation) }}\r\n\r\n            {%- set insert_query_name = 'main-' ~ i -%}\r\n            {% call statement(insert_query_name, fetch_result=True) -%}\r\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\r\n                (\r\n                    SELECT {{ target_cols_csv }}\r\n                    FROM {{ tmp_relation.include(schema=True) }}\r\n                );\r\n            {%- endcall %}\r\n\r\n            {% set result = load_result(insert_query_name) %}\r\n\r\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n                {%- if not result['response']['rows_affected'] %}\r\n                    {% if target.type == \"databricks\" and result['data'] | length > 0 %}\r\n                        {% set rows_inserted = result['data'][0][1] | int %}\r\n                    {% else %}\r\n                        {% set rows_inserted = 0 %}\r\n                    {% endif %}\r\n                {%- else %}\r\n                    {% set rows_inserted = result['response']['rows_affected'] %}\r\n                {%- endif %}\r\n            {% else %} {# older versions #}\r\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n            {% endif %}\r\n\r\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\r\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\r\n\r\n            {{ dbt_utils.log_info(\"Ran for {} {} of {} ({}); {} records inserted [{}]\".format(period, iteration_number,\r\n                                                                                              period_boundaries.num_periods,\r\n                                                                                              period_of_load, rows_inserted,\r\n                                                                                              model.unique_id)) }}\r\n\r\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\r\n            {% if target.type in ['databricks', 'sqlserver'] %}\r\n                {{ dbtvault.drop_temporary_special(tmp_relation) }}\r\n            {% else %}\r\n                {% do to_drop.append(tmp_relation) %}\r\n            {% endif %}\r\n\r\n            {% do adapter.commit() %}\r\n\r\n        {% endfor %}\r\n\r\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\r\n            {{ tmp_table_sql }}\r\n        {%- endcall %}\r\n\r\n    {% endif %}\r\n\r\n    {% if build_sql is defined %}\r\n        {% call statement(\"main\", fetch_result=True) %}\r\n            {{ build_sql }}\r\n        {% endcall %}\r\n\r\n        {% set result = load_result('main') %}\r\n\r\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n            {%- if not result['response']['rows_affected'] %}\r\n                {% if target.type == \"databricks\" and result['data'] | length > 0 %}\r\n                    {% set rows_inserted = result['data'][0][1] | int %}\r\n                {% else %}\r\n                    {% set rows_inserted = 0 %}\r\n                {% endif %}\r\n            {%- else %}\r\n                {% set rows_inserted = result['response']['rows_affected'] %}\r\n            {%- endif %}\r\n        {% else %} {# older versions #}\r\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n        {% endif %}\r\n\r\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\r\n            {{ build_sql }}\r\n        {%- endcall %}\r\n\r\n        -- `COMMIT` happens here\r\n        {% do adapter.commit() %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {% for rel in to_drop %}\r\n        {% if rel.type is not none %}\r\n            {% do adapter.drop_relation(rel) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {% set target_relation = target_relation.incorporate(type='table') %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbtvault.escape_column_names", "macro.dbtvault.get_start_stop_dates", "macro.dbtvault.check_placeholder", "macro.dbt.run_hooks", "macro.dbtvault.replace_placeholder_with_period_filter", "macro.dbt.create_table_as", "macro.dbtvault.get_period_boundaries", "macro.dbtvault.get_period_of_load", "macro.dbt_utils.log_info", "macro.dbtvault.get_period_filter_sql", "macro.dbt.statement", "macro.dbtvault.drop_temporary_special", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.578308}, "macro.dbtvault.materialization_vault_insert_by_rank_default": {"unique_id": "macro.dbtvault.materialization_vault_insert_by_rank_default", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\vault_insert_by_rank_materialization.sql", "original_file_path": "macros\\materialisations\\vault_insert_by_rank_materialization.sql", "name": "materialization_vault_insert_by_rank_default", "macro_sql": "{% materialization vault_insert_by_rank, default -%}\r\n\r\n    {% if target.type == \"postgres\" and execute %}\r\n        {{ exceptions.raise_compiler_error(\"The vault_insert_by_rank materialisation is currently unavailable on Postgres.\") }}\r\n    {% endif %}\r\n\r\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\r\n\r\n    {% if target.type == \"sqlserver\" %}\r\n        {%- set target_relation = this.incorporate(type='table') -%}\r\n    {%  else %}\r\n        {%- set target_relation = this -%}\r\n    {% endif %}\r\n    {%- set existing_relation = load_relation(this) -%}\r\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n    {%- set rank_column = dbtvault.escape_column_names(config.require('rank_column')) -%}\r\n    {%- set rank_source_models = config.require('rank_source_models') -%}\r\n\r\n    {%- set min_max_ranks = dbtvault.get_min_max_ranks(rank_column, rank_source_models) | as_native -%}\r\n\r\n    {%- set to_drop = [] -%}\r\n\r\n    {%- do dbtvault.check_placeholder(sql, \"__RANK_FILTER__\") -%}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% if existing_relation is none %}\r\n\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n        {% do to_drop.append(tmp_relation) %}\r\n\r\n    {% elif existing_relation.is_view %}\r\n\r\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_rank).\") }}\r\n        {% do adapter.drop_relation(existing_relation) %}\r\n\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n    {% elif full_refresh_mode %}\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n    {% else %}\r\n\r\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n\r\n        {% for i in range(min_max_ranks.max_rank | int ) -%}\r\n\r\n            {%- set iteration_number = i + 1 -%}\r\n\r\n            {%- set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, iteration_number) -%}\r\n\r\n            {{ dbt_utils.log_info(\"Running for {} {} of {} on column '{}' [{}]\".format('rank', iteration_number, min_max_ranks.max_rank, rank_column, model.unique_id)) }}\r\n\r\n            {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n            {# This call statement drops and then creates a temporary table #}\r\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\r\n            {# See MSSQL note and drop code below #}\r\n            {% call statement() -%}\r\n                {{ create_table_as(True, tmp_relation, filtered_sql) }}\r\n            {%- endcall %}\r\n\r\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                                  to_relation=target_relation) }}\r\n\r\n            {%- set insert_query_name = 'main-' ~ i -%}\r\n            {% call statement(insert_query_name, fetch_result=True) -%}\r\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\r\n                (\r\n                    SELECT {{ target_cols_csv }}\r\n                    FROM {{ tmp_relation.include(schema=True) }}\r\n                );\r\n            {%- endcall %}\r\n\r\n            {% set result = load_result(insert_query_name) %}\r\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n                {# Investigate for Databricks #}\r\n                {%- if result['response']['rows_affected'] == None %}\r\n                    {% set rows_inserted = 0 %}\r\n                {%- else %}\r\n                    {% set rows_inserted = result['response']['rows_affected'] %}\r\n                {%- endif %}\r\n\r\n            {% else %} {# older versions #}\r\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n            {% endif %}\r\n\r\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\r\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\r\n\r\n            {{ dbt_utils.log_info(\"Ran for {} {} of {}; {} records inserted [{}]\".format('rank', iteration_number,\r\n                                                                                          min_max_ranks.max_rank,\r\n                                                                                          rows_inserted,\r\n                                                                                          model.unique_id)) }}\r\n\r\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\r\n            {% if target.type in ['databricks', 'sqlserver'] %}\r\n                {{ dbtvault.drop_temporary_special(tmp_relation) }}\r\n            {% else %}\r\n                {% do to_drop.append(tmp_relation) %}\r\n            {% endif %}\r\n\r\n            {% do adapter.commit() %}\r\n\r\n        {% endfor %}\r\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\r\n            {{ filtered_sql }}\r\n        {%- endcall %}\r\n\r\n    {% endif %}\r\n\r\n    {% if build_sql is defined %}\r\n        {% call statement(\"main\", fetch_result=True) %}\r\n            {{ build_sql }}\r\n        {% endcall %}\r\n\r\n        {% set result = load_result('main') %}\r\n\r\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n            {% set rows_inserted = result['response']['rows_affected'] %}\r\n        {% else %} {# older versions #}\r\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n        {% endif %}\r\n\r\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\r\n            {{ build_sql }}\r\n        {%- endcall %}\r\n\r\n        -- `COMMIT` happens here\r\n        {% do adapter.commit() %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {% for rel in to_drop %}\r\n        {% if rel.type is not none %}\r\n            {% do adapter.drop_relation(rel) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {% set target_relation = target_relation.incorporate(type='table') %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbtvault.escape_column_names", "macro.dbtvault.get_min_max_ranks", "macro.dbtvault.check_placeholder", "macro.dbt.run_hooks", "macro.dbtvault.replace_placeholder_with_rank_filter", "macro.dbt.create_table_as", "macro.dbt_utils.log_info", "macro.dbt.statement", "macro.dbtvault.drop_temporary_special", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6095605}, "macro.dbtvault.get_period_boundaries": {"unique_id": "macro.dbtvault.get_period_boundaries", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "name": "get_period_boundaries", "macro_sql": "{%- macro get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_boundaries',\r\n                                    'dbtvault')(target_relation=target_relation,\r\n                                                timestamp_field=timestamp_field,\r\n                                                start_date=start_date,\r\n                                                stop_date=stop_date,\r\n                                                period=period) %}\r\n\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6251898}, "macro.dbtvault.default__get_period_boundaries": {"unique_id": "macro.dbtvault.default__get_period_boundaries", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ dbtvault.current_timestamp() }} ) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ dbt_utils.datediff('start_timestamp',\r\n                                  'stop_timestamp',\r\n                                  period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbtvault.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6408188}, "macro.dbtvault.bigquery__get_period_boundaries": {"unique_id": "macro.dbtvault.bigquery__get_period_boundaries", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "name": "bigquery__get_period_boundaries", "macro_sql": "{% macro bigquery__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        with data as (\r\n            select\r\n                COALESCE(CAST(MAX({{ timestamp_field }}) AS DATETIME), CAST('{{ start_date }}' AS DATETIME)) as START_TIMESTAMP,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         CAST(CURRENT_TIMESTAMP() AS DATETIME)) as STOP_TIMESTAMP\r\n            from {{ target_relation }}\r\n        )\r\n        select\r\n            START_TIMESTAMP,\r\n            STOP_TIMESTAMP,\r\n            {{ dbt_utils.datediff('start_timestamp', 'stop_timestamp', period) }} + 1 as NUM_PERIODS\r\n        from data\r\n    {%- endset %}\r\n\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6408188}, "macro.dbtvault.sqlserver__get_period_boundaries": {"unique_id": "macro.dbtvault.sqlserver__get_period_boundaries", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "name": "sqlserver__get_period_boundaries", "macro_sql": "{% macro sqlserver__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_date = start_date[0:27] %}\r\n    {% set stop_date = stop_date[0:27] %}\r\n    {%- set from_date_or_timestamp = \"CAST(NULLIF('{}','none') AS DATETIME2)\".format(stop_date | lower) %}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                CAST(COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS DATETIME2)) AS DATETIME2) AS start_timestamp,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ dbtvault.current_timestamp() }} ) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ dbt_utils.datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbtvault.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6408188}, "macro.dbtvault.databricks__get_period_boundaries": {"unique_id": "macro.dbtvault.databricks__get_period_boundaries", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "name": "databricks__get_period_boundaries", "macro_sql": "{% macro databricks__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS TIMESTAMP)) AS start_timestamp,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ dbtvault.current_timestamp() }}) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            IF(stop_timestamp < start_timestamp, stop_timestamp, start_timestamp) AS start_timestamp,\r\n            stop_timestamp,\r\n            {{ dbt_utils.datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\r\n\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbtvault.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6408188}, "macro.dbtvault.postgres__get_period_boundaries": {"unique_id": "macro.dbtvault.postgres__get_period_boundaries", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "name": "postgres__get_period_boundaries", "macro_sql": "{% macro postgres__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, \"NULLIF('\" ~ stop_date | lower ~ \"','none')::TIMESTAMP\") }},\r\n                         {{ dbtvault.current_timestamp() }} ) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ dbt_utils.datediff('start_timestamp',\r\n                                  'stop_timestamp',\r\n                                  period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbtvault.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6408188}, "macro.dbtvault.get_period_filter_sql": {"unique_id": "macro.dbtvault.get_period_filter_sql", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "name": "get_period_filter_sql", "macro_sql": "{%- macro get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_filter_sql',\r\n                                    'dbtvault')(target_cols_csv=target_cols_csv,\r\n                                                base_sql=base_sql,\r\n                                                timestamp_field=timestamp_field,\r\n                                                period=period,\r\n                                                start_timestamp=start_timestamp,\r\n                                                stop_timestamp=stop_timestamp,\r\n                                                offset=offset) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__get_period_filter_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6564364}, "macro.dbtvault.default__get_period_filter_sql": {"unique_id": "macro.dbtvault.default__get_period_filter_sql", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "name": "default__get_period_filter_sql", "macro_sql": "{% macro default__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6564364}, "macro.dbtvault.sqlserver__get_period_filter_sql": {"unique_id": "macro.dbtvault.sqlserver__get_period_filter_sql", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "name": "sqlserver__get_period_filter_sql", "macro_sql": "{% macro sqlserver__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    {# MSSQL does not allow CTEs in a subquery #}\r\n    {{ filtered_sql.sql }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6564364}, "macro.dbtvault.postgres__get_period_filter_sql": {"unique_id": "macro.dbtvault.postgres__get_period_filter_sql", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "name": "postgres__get_period_filter_sql", "macro_sql": "{% macro postgres__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6564364}, "macro.dbtvault.get_period_of_load": {"unique_id": "macro.dbtvault.get_period_of_load", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "name": "get_period_of_load", "macro_sql": "{%- macro get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_of_load',\r\n                                    'dbtvault')(period=period,\r\n                                                offset=offset,\r\n                                                start_timestamp=start_timestamp) %}\r\n\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6720648}, "macro.dbtvault.default__get_period_of_load": {"unique_id": "macro.dbtvault.default__get_period_of_load", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "name": "default__get_period_of_load", "macro_sql": "\r\n\r\n\r\n{%- macro default__get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC('{{ period }}', DATEADD({{ period }}, {{ offset }}, TO_DATE('{{ start_timestamp }}'))) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6720648}, "macro.dbtvault.bigquery__get_period_of_load": {"unique_id": "macro.dbtvault.bigquery__get_period_of_load", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "name": "bigquery__get_period_of_load", "macro_sql": "{%- macro bigquery__get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6720648}, "macro.dbtvault.sqlserver__get_period_of_load": {"unique_id": "macro.dbtvault.sqlserver__get_period_of_load", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "name": "sqlserver__get_period_of_load", "macro_sql": "{%- macro sqlserver__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_timestamp_mssql = start_timestamp[0:23] %}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATEADD({{ period }}, DATEDIFF({{period}}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6720648}, "macro.dbtvault.databricks__get_period_of_load": {"unique_id": "macro.dbtvault.databricks__get_period_of_load", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "name": "databricks__get_period_of_load", "macro_sql": "{%- macro databricks__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {% do return(dbtvault.default__get_period_of_load(period=period, offset=offset, start_timestamp=start_timestamp)) %}\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6720648}, "macro.dbtvault.postgres__get_period_of_load": {"unique_id": "macro.dbtvault.postgres__get_period_of_load", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "name": "postgres__get_period_of_load", "macro_sql": "{%- macro postgres__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {# Postgres uses different DateTime arithmetic #}\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC('{{ period }}',\r\n               TO_TIMESTAMP('{{ start_timestamp }}', 'YYYY-MM-DD HH24:MI:SS') + interval '{{ offset }} {{ period }}'\r\n        ) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6720648}, "macro.dbtvault.get_start_stop_dates": {"unique_id": "macro.dbtvault.get_start_stop_dates", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_start_stop_dates.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_start_stop_dates.sql", "name": "get_start_stop_dates", "macro_sql": "{% macro get_start_stop_dates(timestamp_field, date_source_models) %}\r\n\r\n    {% if config.get('start_date', default=none) is not none %}\r\n\r\n        {%- set start_date = config.get('start_date') -%}\r\n        {%- set stop_date = config.get('stop_date', default=none) -%}\r\n\r\n        {% do return({'start_date': start_date,'stop_date': stop_date}) %}\r\n\r\n    {% elif date_source_models is not none %}\r\n\r\n        {% if date_source_models is string %}\r\n            {% set date_source_models = [date_source_models] %}\r\n        {% endif %}\r\n        {% set query_sql %}\r\n            WITH stage AS (\r\n            {% for source_model in date_source_models %}\r\n                SELECT {{ timestamp_field }} FROM {{ ref(source_model) }}\r\n                {% if not loop.last %} UNION ALL {% endif %}\r\n            {% endfor %})\r\n\r\n            SELECT MIN({{ timestamp_field }}) AS MIN, MAX({{ timestamp_field }}) AS MAX\r\n            FROM stage\r\n        {% endset %}\r\n\r\n        {% set min_max_dict = dbtvault.get_query_results_as_dict(query_sql) %}\r\n\r\n        {% set start_date = min_max_dict['MIN'][0] | string %}\r\n        {% set stop_date = min_max_dict['MAX'][0] | string %}\r\n        {% set min_max_dates = {\"start_date\": start_date, \"stop_date\": stop_date} %}\r\n\r\n        {% do return(min_max_dates) %}\r\n\r\n    {% else %}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_period' configuration. Must provide 'start_date' and 'stop_date', just 'stop_date', and/or 'date_source_models' options.\") }}\r\n        {%- endif -%}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6876934}, "macro.dbtvault.replace_placeholder_with_period_filter": {"unique_id": "macro.dbtvault.replace_placeholder_with_period_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "name": "replace_placeholder_with_period_filter", "macro_sql": "{%- macro replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) -%}\r\n\r\n    {% set macro = adapter.dispatch('replace_placeholder_with_period_filter',\r\n                                    'dbtvault')(core_sql=core_sql,\r\n                                                timestamp_field=timestamp_field,\r\n                                                start_timestamp=start_timestamp,\r\n                                                stop_timestamp=stop_timestamp,\r\n                                                offset=offset,\r\n                                                period=period) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6876934}, "macro.dbtvault.default__replace_placeholder_with_period_filter": {"unique_id": "macro.dbtvault.default__replace_placeholder_with_period_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "name": "default__replace_placeholder_with_period_filter", "macro_sql": "{% macro default__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n        (TO_DATE({{ timestamp_field }})\r\n        >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}') AND\r\n             TO_DATE({{ timestamp_field }}) < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}'))\r\n      AND (TO_DATE({{ timestamp_field }}) >= TO_DATE('{{ start_timestamp }}'))\r\n    {%- endset -%}\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6876934}, "macro.dbtvault.bigquery__replace_placeholder_with_period_filter": {"unique_id": "macro.dbtvault.bigquery__replace_placeholder_with_period_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "name": "bigquery__replace_placeholder_with_period_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n            (DATE({{ timestamp_field }}) >= DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }} ) AND\r\n             DATE({{ timestamp_field }}) < DATE_TRUNC(DATE_ADD(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), INTERVAL 1 {{ period }}), {{ period }} )\r\n      AND DATE({{ timestamp_field }}) >= DATE('{{ start_timestamp }}'))\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.6876934}, "macro.dbtvault.sqlserver__replace_placeholder_with_period_filter": {"unique_id": "macro.dbtvault.sqlserver__replace_placeholder_with_period_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "name": "sqlserver__replace_placeholder_with_period_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_timestamp_mssql = start_timestamp[0:27] %}\r\n\r\n    {%- set period_filter -%}\r\n            (CAST({{ timestamp_field }} AS DATE) >= DATEADD({{ period }}, DATEDIFF({{ period }}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AND\r\n             CAST({{ timestamp_field }} AS DATE) < DATEADD({{ period }}, 1, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2)))\r\n      AND (CAST({{ timestamp_field }} AS DATE) >= CAST('{{ start_timestamp_mssql }}' AS DATE)))\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.703347}, "macro.dbtvault.postgres__replace_placeholder_with_period_filter": {"unique_id": "macro.dbtvault.postgres__replace_placeholder_with_period_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "name": "postgres__replace_placeholder_with_period_filter", "macro_sql": "{% macro postgres__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n        {{ timestamp_field }}::DATE >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}', 'YYYY-MM-DD') + INTERVAL '{{ offset }} {{ period }}')\r\n        AND {{ timestamp_field }}::DATE < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}','YYYY-MM-DD') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}')\r\n        AND {{ timestamp_field }}::DATE >= TO_DATE('{{ start_timestamp }}','YYYY-MM-DD')\r\n    {%- endset -%}\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.703347}, "macro.dbtvault.get_min_max_ranks": {"unique_id": "macro.dbtvault.get_min_max_ranks", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\get_min_max_ranks.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\get_min_max_ranks.sql", "name": "get_min_max_ranks", "macro_sql": "{% macro get_min_max_ranks(rank_column, rank_source_models) %}\r\n\r\n    {% if rank_source_models is not none %}\r\n\r\n        {% if rank_source_models is string %}\r\n            {% set rank_source_models = [rank_source_models] %}\r\n        {% endif %}\r\n\r\n        {% set query_sql %}\r\n            WITH stage AS (\r\n            {% for source_model in rank_source_models %}\r\n                SELECT {{ rank_column }} FROM {{ ref(source_model) }}\r\n                {% if not loop.last %} UNION ALL {% endif %}\r\n            {% endfor %})\r\n\r\n            SELECT MIN({{ rank_column }}) AS MIN, MAX({{ rank_column }}) AS MAX\r\n            FROM stage\r\n        {% endset %}\r\n\r\n        {% set min_max_dict = dbtvault.get_query_results_as_dict(query_sql) %}\r\n\r\n        {% set min_rank = min_max_dict['MIN'][0] | string %}\r\n        {% set max_rank = min_max_dict['MAX'][0] | string %}\r\n        {% set min_max_ranks = {\"min_rank\": min_rank, \"max_rank\": max_rank} %}\r\n\r\n        {% do return(min_max_ranks) %}\r\n\r\n    {% else %}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_rank' configuration. Must provide 'rank_column', and 'rank_source_models' options.\") }}\r\n        {%- endif -%}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.703347}, "macro.dbtvault.replace_placeholder_with_rank_filter": {"unique_id": "macro.dbtvault.replace_placeholder_with_rank_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "name": "replace_placeholder_with_rank_filter", "macro_sql": "{%- macro replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) -%}\r\n\r\n    {% set macro = adapter.dispatch('replace_placeholder_with_rank_filter',\r\n                                    'dbtvault')(core_sql=core_sql,\r\n                                                rank_column=rank_column,\r\n                                                rank_iteration=rank_iteration) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__replace_placeholder_with_rank_filter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.703347}, "macro.dbtvault.default__replace_placeholder_with_rank_filter": {"unique_id": "macro.dbtvault.default__replace_placeholder_with_rank_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "name": "default__replace_placeholder_with_rank_filter", "macro_sql": "{% macro default__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n\r\n    {%- set rank_filter -%}\r\n    {{ rank_column }}:: INTEGER = {{ rank_iteration }}::INTEGER\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.703347}, "macro.dbtvault.sqlserver__replace_placeholder_with_rank_filter": {"unique_id": "macro.dbtvault.sqlserver__replace_placeholder_with_rank_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "name": "sqlserver__replace_placeholder_with_rank_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n\r\n    {%- set rank_filter -%}\r\n        CAST({{ rank_column }} AS INT) = CAST({{ rank_iteration }} AS INT)\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7189548}, "macro.dbtvault.bigquery__replace_placeholder_with_rank_filter": {"unique_id": "macro.dbtvault.bigquery__replace_placeholder_with_rank_filter", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "name": "bigquery__replace_placeholder_with_rank_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n    {%- set rank_filter -%}\r\n        CAST({{ rank_column }} AS INTEGER) = CAST({{ rank_iteration }} AS INTEGER)\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7189548}, "macro.dbtvault.derive_columns": {"unique_id": "macro.dbtvault.derive_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\derive_columns.sql", "original_file_path": "macros\\staging\\derive_columns.sql", "name": "derive_columns", "macro_sql": "{%- macro derive_columns(source_relation=none, columns=none) -%}\r\n\r\n    {{- adapter.dispatch('derive_columns', 'dbtvault')(source_relation=source_relation, columns=columns) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__derive_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7189548}, "macro.dbtvault.default__derive_columns": {"unique_id": "macro.dbtvault.default__derive_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\derive_columns.sql", "original_file_path": "macros\\staging\\derive_columns.sql", "name": "default__derive_columns", "macro_sql": "\r\n\r\n{%- macro default__derive_columns(source_relation=none, columns=none) -%}\r\n\r\n{%- set exclude_columns = [] -%}\r\n{%- set include_columns = [] -%}\r\n{%- set src_columns = [] -%}\r\n{%- set der_columns = [] -%}\r\n\r\n{%- set source_cols = dbtvault.source_columns(source_relation=source_relation) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {#- Add aliases of derived columns to excludes and full SQL to includes -#}\r\n    {%- for derived_column in columns -%}\r\n        {% set column_config = columns[derived_column] %}\r\n\r\n        {%- if dbtvault.is_list(column_config) -%}\r\n            {%- set column_list = [] -%}\r\n\r\n            {%- for concat_component in column_config -%}\r\n                {%- set column_str = dbtvault.as_constant(concat_component) -%}\r\n                {%- do column_list.append(column_str) -%}\r\n            {%- endfor -%}\r\n\r\n            {%- set concat = dbtvault.concat_ws(column_list, \"||\") -%}\r\n            {%- set concat_string = concat ~ \" AS \" ~ dbtvault.escape_column_names(derived_column) -%}\r\n\r\n            {%- do der_columns.append(concat_string) -%}\r\n        {%- else -%}\r\n            {%- if column_config is mapping and column_config -%}\r\n                {%- set column_escape = column_config['escape'] -%}\r\n\r\n                {%- if dbtvault.is_list(column_config['source_column']) -%}\r\n                    {%- set column_list = [] -%}\r\n\r\n                    {%- for concat_component in column_config['source_column'] -%}\r\n                        {%- set column_str = dbtvault.as_constant(concat_component) -%}\r\n                        {%- if column_escape is true %}\r\n                            {%- set column_str = dbtvault.escape_column_names(column_str) -%}\r\n                        {% endif %}\r\n                        {%- do column_list.append(column_str) -%}\r\n                    {%- endfor -%}\r\n\r\n                    {%- set concat = dbtvault.concat_ws(column_list, \"||\") -%}\r\n                    {%- set concat_string = concat ~ \" AS \" ~ dbtvault.escape_column_names(derived_column) -%}\r\n\r\n                    {%- do der_columns.append(concat_string) -%}\r\n                {%- else -%}\r\n                    {%- set column_str = dbtvault.as_constant(column_config['source_column']) -%}\r\n                    {%- if column_escape is true -%}\r\n                        {%- do der_columns.append(dbtvault.escape_column_names(column_str) ~ \" AS \" ~ dbtvault.escape_column_names(derived_column)) -%}\r\n                    {%- else -%}\r\n                        {%- do der_columns.append(column_str ~ \" AS \" ~ dbtvault.escape_column_names(derived_column)) -%}\r\n                    {%- endif -%}\r\n                {%- endif -%}\r\n            {%- else -%}\r\n                {%- set column_str = dbtvault.as_constant(column_config) -%}\r\n                {%- do der_columns.append(column_str ~ \" AS \" ~ dbtvault.escape_column_names(derived_column)) -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n\r\n        {%- do exclude_columns.append(derived_column) -%}\r\n\r\n    {%- endfor -%}\r\n\r\n    {#- Add all columns from source_model relation -#}\r\n    {%- if source_relation is defined and source_relation is not none -%}\r\n\r\n        {%- for col in source_cols -%}\r\n            {%- if col | lower not in exclude_columns | map('lower') | list -%}\r\n                {%- do src_columns.append(dbtvault.escape_column_names(col)) -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}\r\n    {%- set include_columns = src_columns + der_columns -%}\r\n\r\n    {#- Print out all columns in includes -#}\r\n    {%- for col in include_columns -%}\r\n        {{- col | indent(4) -}}{{ \",\\n\" if not loop.last }}\r\n    {%- endfor -%}\r\n\r\n{%- else -%}\r\n\r\n{%- if execute -%}\r\n{{ exceptions.raise_compiler_error(\"Invalid column configuration:\r\nexpected format, either: {'source_relation': Relation, 'columns': {column_name: column_value}}\r\nor: {'source_relation': Relation, 'columns': {column_name: {'source_column': column_value, 'escape': true / false}}}\r\ngot: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\r\n{%- endif %}\r\n\r\n{%- endif %}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.source_columns", "macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.concat_ws", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7345839}, "macro.dbtvault.hash_columns": {"unique_id": "macro.dbtvault.hash_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\hash_columns.sql", "original_file_path": "macros\\staging\\hash_columns.sql", "name": "hash_columns", "macro_sql": "{%- macro hash_columns(columns=none) -%}\r\n\r\n    {{- adapter.dispatch('hash_columns', 'dbtvault')(columns=columns) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__hash_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7345839}, "macro.dbtvault.default__hash_columns": {"unique_id": "macro.dbtvault.default__hash_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\hash_columns.sql", "original_file_path": "macros\\staging\\hash_columns.sql", "name": "default__hash_columns", "macro_sql": "\r\n\r\n{%- macro default__hash_columns(columns=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {% if columns[col] is mapping and columns[col].is_hashdiff -%}\r\n\r\n            {{- dbtvault.hash(columns=columns[col]['columns'], \r\n                              alias=col, \r\n                              is_hashdiff=columns[col]['is_hashdiff']) -}}\r\n\r\n        {%- elif columns[col] is not mapping -%}\r\n\r\n            {{- dbtvault.hash(columns=columns[col],\r\n                              alias=col,\r\n                              is_hashdiff=false) -}}\r\n        \r\n        {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\r\n\r\n            {%- if execute -%}\r\n                {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\r\n            {% endif %}\r\n\r\n            {{- dbtvault.hash(columns=columns[col]['columns'], alias=col) -}}\r\n\r\n        {%- endif -%}\r\n\r\n        {{- \",\\n\" if not loop.last -}}\r\n    {%- endfor -%}\r\n\r\n{%- endif %}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7345839}, "macro.dbtvault.null_columns": {"unique_id": "macro.dbtvault.null_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "name": "null_columns", "macro_sql": "{%- macro null_columns(source_relation=none, columns=none) -%}\r\n\r\n    {{- adapter.dispatch('null_columns', 'dbtvault')(source_relation=source_relation, columns=columns) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__null_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7502134}, "macro.dbtvault.default__null_columns": {"unique_id": "macro.dbtvault.default__null_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "name": "default__null_columns", "macro_sql": "\r\n\r\n{%- macro default__null_columns(source_relation=none, columns=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- set ns = namespace() -%}\r\n\r\n    {%- for col in columns -%}\r\n        {%- if col.lower() == 'required' -%}\r\n            {% if dbtvault.is_something(columns[col]) %}\r\n                {%- if columns[col] is string -%}\r\n                    {%- set ns.required = [columns[col]] -%}\r\n                {%- elif dbtvault.is_list(columns[col]) -%}\r\n                    {%- set ns.required = columns[col] -%}\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n        {%- if col.lower() == 'optional' -%}\r\n            {% if dbtvault.is_something(columns[col]) %}\r\n                {%- if columns[col] is string -%}\r\n                    {%- set ns.optional = [columns[col]] -%}\r\n                {%- elif dbtvault.is_list(columns[col]) -%}\r\n                    {%- set ns.optional = columns[col] -%}\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n    {%- set required_value = var('null_key_required', '-1') -%}\r\n    {%- set optional_value = var('null_key_optional', '-2') -%}\r\n\r\n    {%- if dbtvault.is_something(ns.required) -%}\r\n        {%- filter indent(width=0) -%}\r\n        {%- for col_name in ns.required -%}\r\n            {{ dbtvault.null_column_sql(col_name, required_value) }}{{ \",\\n\" if not loop.last }}{{ \",\\n\" if loop.last and dbtvault.is_something(ns.optional) else \"\" }}\r\n        {%- endfor -%}\r\n        {%- endfilter -%}\r\n    {%- endif -%}\r\n\r\n    {%- if dbtvault.is_something(ns.optional) -%}\r\n        {%- filter indent(width=0) -%}\r\n        {%- for col_name in ns.optional -%}\r\n            {{ dbtvault.null_column_sql(col_name, optional_value) }}{{ \",\\n\" if not loop.last else \"\\n\" }}\r\n        {%- endfor -%}\r\n        {%- endfilter -%}\r\n    {%- endif -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.is_list", "macro.dbtvault.null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7502134}, "macro.dbtvault.null_column_sql": {"unique_id": "macro.dbtvault.null_column_sql", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "name": "null_column_sql", "macro_sql": "{%- macro null_column_sql(col_name, default_value) -%}\r\n\r\n    {{- adapter.dispatch('null_column_sql', 'dbtvault')(col_name=col_name, default_value=default_value) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7502134}, "macro.dbtvault.default__null_column_sql": {"unique_id": "macro.dbtvault.default__null_column_sql", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "name": "default__null_column_sql", "macro_sql": "{%- macro default__null_column_sql(col_name, default_value) -%}\r\n\r\n    {%- set col_name_esc = dbtvault.escape_column_names(col_name) -%}\r\n    {%- set col_name_orig_esc = dbtvault.escape_column_names(col_name ~ \"_ORIGINAL\") -%}\r\n    {{ col_name_esc }} AS {{ col_name_orig_esc }},\r\n    IFNULL({{ col_name_esc }}, '{{ default_value }}') AS {{ col_name_esc }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7502134}, "macro.dbtvault.sqlserver__null_column_sql": {"unique_id": "macro.dbtvault.sqlserver__null_column_sql", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "name": "sqlserver__null_column_sql", "macro_sql": "{%- macro sqlserver__null_column_sql(col_name, default_value) -%}\r\n\r\n    {%- set col_name_esc = dbtvault.escape_column_names(col_name) -%}\r\n    {%- set col_name_orig_esc = dbtvault.escape_column_names(col_name ~ \"_ORIGINAL\") -%}\r\n    {{ col_name_esc }} AS {{ col_name_orig_esc }},\r\n    ISNULL({{ col_name_esc }}, '{{ default_value }}') AS {{ col_name_esc }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7658434}, "macro.dbtvault.postgres__null_column_sql": {"unique_id": "macro.dbtvault.postgres__null_column_sql", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "name": "postgres__null_column_sql", "macro_sql": "{%- macro postgres__null_column_sql(col_name, default_value) -%}\r\n\r\n    {%- set col_name_esc = dbtvault.escape_column_names(col_name) -%}\r\n    {%- set col_name_orig_esc = dbtvault.escape_column_names(col_name ~ \"_ORIGINAL\") -%}\r\n    {{ col_name_esc }} AS {{ col_name_orig_esc }},\r\n    COALESCE({{ col_name_esc }}, '{{ default_value }}') AS {{ col_name_esc }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7658434}, "macro.dbtvault.rank_columns": {"unique_id": "macro.dbtvault.rank_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\rank_columns.sql", "original_file_path": "macros\\staging\\rank_columns.sql", "name": "rank_columns", "macro_sql": "{%- macro rank_columns(columns=none) -%}\r\n\r\n    {{- adapter.dispatch('rank_columns', 'dbtvault')(columns=columns) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7658434}, "macro.dbtvault.default__rank_columns": {"unique_id": "macro.dbtvault.default__rank_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\rank_columns.sql", "original_file_path": "macros\\staging\\rank_columns.sql", "name": "default__rank_columns", "macro_sql": "\r\n\r\n{%- macro default__rank_columns(columns=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {%- if columns[col] is mapping and columns[col].partition_by and columns[col].order_by -%}\r\n\r\n            {%- set order_by = columns[col].order_by -%}\r\n            {%- set partition_by = columns[col].partition_by -%}\r\n            {%- set dense_rank = columns[col].dense_rank -%}\r\n\r\n            {%- if dbtvault.is_nothing(dense_rank) %}\r\n                {%- set rank_type = \"RANK()\" -%}\r\n            {%- elif dense_rank is true -%}\r\n                {%- set rank_type = \"DENSE_RANK()\" -%}\r\n            {%- else -%}\r\n                {%- if execute -%}\r\n                    {%- do exceptions.raise_compiler_error('If dense_rank is provided, it must be true or false, not {}'.format(dense_rank)) -%}\r\n                {% endif %}\r\n            {%- endif -%}\r\n\r\n            {%- if dbtvault.is_list(order_by) -%}\r\n\r\n                {%- set order_by_str_lst = [] -%}\r\n\r\n                {% for order_by_col in order_by %}\r\n\r\n                    {%- if order_by_col is mapping %}\r\n                        {%- set column_name, direction = order_by_col.items()|first -%}\r\n                        {%- set order_by_str = \"{} {}\".format(dbtvault.escape_column_names(column_name), direction) | trim -%}\r\n                    {%- else -%}\r\n                        {%- set order_by_str = dbtvault.escape_column_names(order_by_col) -%}\r\n                    {%- endif -%}\r\n\r\n                    {%- do order_by_str_lst.append(order_by_str) -%}\r\n                {%- endfor -%}\r\n\r\n                {%- set order_by_str = order_by_str_lst | join(\", \") -%}\r\n\r\n            {%- else -%}\r\n\r\n                {%- if order_by is mapping %}\r\n                    {%- set column_name, direction = order_by.items()|first -%}\r\n                {%- else -%}\r\n                    {%- set column_name = order_by -%}\r\n                    {%- set direction = '' -%}\r\n                {%- endif -%}\r\n\r\n                {%- set order_by_str = \"{} {}\".format(dbtvault.escape_column_names(column_name), direction) | trim -%}\r\n            {%- endif -%}\r\n\r\n            {%- if dbtvault.is_list(partition_by) -%}\r\n                {%- set partition_by_str = dbtvault.escape_column_names(partition_by) | join(\", \") -%}\r\n            {%- else -%}\r\n                {%- set partition_by_str = dbtvault.escape_column_names(partition_by) -%}\r\n            {%- endif -%}\r\n\r\n            {{- \"{} OVER (PARTITION BY {} ORDER BY {}) AS {}\".format(rank_type, partition_by_str, order_by_str, dbtvault.escape_column_names(col)) | indent(4) -}}\r\n\r\n        {%- endif -%}\r\n\r\n        {{- \",\\n\" if not loop.last -}}\r\n    {%- endfor -%}\r\n\r\n{%- endif %}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_nothing", "macro.dbtvault.is_list", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7814708}, "macro.dbtvault.source_columns": {"unique_id": "macro.dbtvault.source_columns", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\source_columns.sql", "original_file_path": "macros\\staging\\source_columns.sql", "name": "source_columns", "macro_sql": "{%- macro source_columns(source_relation=none) -%}\r\n\r\n    {%- if source_relation -%}\r\n        {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\r\n\r\n        {%- set column_list = [] -%}\r\n\r\n        {%- for source_col in source_model_cols -%}\r\n            {%- do column_list.append(source_col.column) -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(column_list) -%}\r\n    {%- endif %}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.7814708}, "macro.dbtvault.stage": {"unique_id": "macro.dbtvault.stage", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\stage.sql", "original_file_path": "macros\\staging\\stage.sql", "name": "stage", "macro_sql": "{%- macro stage(include_source_columns=none, source_model=none, hashed_columns=none, derived_columns=none, null_columns=none, ranked_columns=none) -%}\r\n\r\n    {%- if include_source_columns is none -%}\r\n        {%- set include_source_columns = true -%}\r\n    {%- endif -%}\r\n\r\n    {{- dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('stage', 'dbtvault')(include_source_columns=include_source_columns,\r\n                                              source_model=source_model,\r\n                                              hashed_columns=hashed_columns,\r\n                                              derived_columns=derived_columns,\r\n                                              null_columns=null_columns,\r\n                                              ranked_columns=ranked_columns\r\n                                              ) -}}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__stage"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.797103}, "macro.dbtvault.default__stage": {"unique_id": "macro.dbtvault.default__stage", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\staging\\stage.sql", "original_file_path": "macros\\staging\\stage.sql", "name": "default__stage", "macro_sql": "{%- macro default__stage(include_source_columns, source_model, hashed_columns, derived_columns, null_columns, ranked_columns) -%}\r\n\r\n{% if (source_model is none) and execute %}\r\n\r\n    {%- set error_message -%}\r\n    Staging error: Missing source_model configuration. A source model name must be provided.\r\n    e.g.\r\n    [REF STYLE]\r\n    source_model: model_name\r\n    OR\r\n    [SOURCES STYLE]\r\n    source_model:\r\n        source_name: source_table_name\r\n    {%- endset -%}\r\n\r\n    {{- exceptions.raise_compiler_error(error_message) -}}\r\n{%- endif -%}\r\n\r\n{#- Check for source format or ref format and create\r\nrelation object from source_model -#}\r\n{% if source_model is mapping and source_model is not none -%}\r\n\r\n    {%- set source_name = source_model | first -%}\r\n    {%- set source_table_name = source_model[source_name] -%}\r\n\r\n    {%- set source_relation = source(source_name, source_table_name) -%}\r\n    {%- set all_source_columns = dbtvault.source_columns(source_relation=source_relation) -%}\r\n{%- elif source_model is not mapping and source_model is not none -%}\r\n\r\n    {%- set source_relation = ref(source_model) -%}\r\n    {%- set all_source_columns = dbtvault.source_columns(source_relation=source_relation) -%}\r\n{%- else -%}\r\n\r\n    {%- set all_source_columns = [] -%}\r\n{%- endif -%}\r\n\r\n{%- set derived_column_names = dbtvault.extract_column_names(derived_columns) | map('upper') | list -%}\r\n{%- set null_column_names = dbtvault.extract_null_column_names(null_columns) | map('upper') | list -%}\r\n{%- set hashed_column_names = dbtvault.extract_column_names(hashed_columns) | map('upper') | list -%}\r\n{%- set ranked_column_names = dbtvault.extract_column_names(ranked_columns) | map('upper') | list -%}\r\n{%- set exclude_column_names = derived_column_names + null_column_names + hashed_column_names | map('upper') | list -%}\r\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | map('upper') | unique | list -%}\r\n\r\n{%- set source_columns_to_select = dbtvault.process_columns_to_select(all_source_columns, exclude_column_names) -%}\r\n{%- set derived_columns_to_select = dbtvault.process_columns_to_select(source_and_derived_column_names, null_column_names + hashed_column_names) | unique | list -%}\r\n{%- set derived_and_null_columns_to_select = dbtvault.process_columns_to_select(source_and_derived_column_names + null_column_names, hashed_column_names) | unique | list -%}\r\n{%- set final_columns_to_select = [] -%}\r\n\r\n{#- Include source columns in final column selection if true -#}\r\n{%- if include_source_columns -%}\r\n    {%- if dbtvault.is_nothing(derived_columns)\r\n           and dbtvault.is_nothing(null_columns)\r\n           and dbtvault.is_nothing(hashed_columns)\r\n           and dbtvault.is_nothing(ranked_columns) -%}\r\n        {%- set final_columns_to_select = final_columns_to_select + all_source_columns -%}\r\n    {%- else -%}\r\n        {#- Only include non-overriden columns if not just source columns -#}\r\n        {%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\r\n    {%- endif -%}\r\n{%- endif %}\r\n\r\nWITH source_data AS (\r\n\r\n    SELECT\r\n\r\n    {{- \"\\n\\n    \" ~ dbtvault.print_list(dbtvault.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\r\n\r\n    FROM {{ source_relation }}\r\n    {%- set last_cte = \"source_data\" %}\r\n)\r\n\r\n{%- if dbtvault.is_something(derived_columns) -%},\r\n\r\nderived_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ dbtvault.derive_columns(source_relation=source_relation, columns=derived_columns) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"derived_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n{% if dbtvault.is_something(null_columns) -%},\r\n\r\nnull_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ dbtvault.print_list(dbtvault.escape_column_names(derived_columns_to_select)) }}{{\",\" if dbtvault.is_something(derived_columns_to_select) else \"\"}}\r\n\r\n    {{ dbtvault.null_columns(source_relation=none, columns=null_columns) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"null_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + null_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n\r\n{% if dbtvault.is_something(hashed_columns) -%},\r\n\r\nhashed_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ dbtvault.print_list(dbtvault.escape_column_names(derived_and_null_columns_to_select)) }},\r\n\r\n    {% set processed_hash_columns = dbtvault.process_hash_column_excludes(hashed_columns, all_source_columns) -%}\r\n    {{- dbtvault.hash_columns(columns=processed_hash_columns) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"hashed_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n{% if dbtvault.is_something(ranked_columns) -%},\r\n\r\nranked_columns AS (\r\n\r\n    SELECT *,\r\n\r\n    {{ dbtvault.rank_columns(columns=ranked_columns) | indent(4) if dbtvault.is_something(ranked_columns) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"ranked_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + ranked_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n,\r\n\r\ncolumns_to_select AS (\r\n\r\n    SELECT\r\n\r\n    {{ dbtvault.print_list(dbtvault.escape_column_names(final_columns_to_select | unique | list)) }}\r\n\r\n    FROM {{ last_cte }}\r\n)\r\n\r\nSELECT * FROM columns_to_select\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.source_columns", "macro.dbtvault.extract_column_names", "macro.dbtvault.extract_null_column_names", "macro.dbtvault.process_columns_to_select", "macro.dbtvault.is_nothing", "macro.dbtvault.print_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.is_something", "macro.dbtvault.derive_columns", "macro.dbtvault.null_columns", "macro.dbtvault.process_hash_column_excludes", "macro.dbtvault.hash_columns", "macro.dbtvault.rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8283815}, "macro.dbtvault.as_of_date_window": {"unique_id": "macro.dbtvault.as_of_date_window", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\as_of_date_window.sql", "original_file_path": "macros\\supporting\\as_of_date_window.sql", "name": "as_of_date_window", "macro_sql": "{%- macro as_of_date_window(src_pk, src_ldts, stage_tables_ldts, source_model) -%}\r\n\r\nlast_safe_load_datetime AS (\r\n    SELECT MIN(LOAD_DATETIME) AS LAST_SAFE_LOAD_DATETIME\r\n    FROM (\r\n\r\n        {% for stg in stage_tables_ldts -%}\r\n            {%- set stage_ldts = stage_tables_ldts[stg] -%}\r\n            SELECT MIN({{ stage_ldts }}) AS LOAD_DATETIME FROM {{ ref(stg) }}\r\n            {% if not loop.last %} UNION ALL {% endif %}\r\n        {% endfor -%}\r\n\r\n    ) AS l\r\n),\r\n\r\nas_of_grain_old_entries AS (\r\n    SELECT DISTINCT AS_OF_DATE\r\n    FROM {{ this }}\r\n),\r\n\r\nas_of_grain_lost_entries AS (\r\n    SELECT a.AS_OF_DATE\r\n    FROM as_of_grain_old_entries AS a\r\n    LEFT OUTER JOIN as_of_dates AS b\r\n        ON a.AS_OF_DATE = b.AS_OF_DATE\r\n    WHERE b.AS_OF_DATE IS NULL\r\n),\r\n\r\nas_of_grain_new_entries AS (\r\n    SELECT a.AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n    LEFT OUTER JOIN as_of_grain_old_entries AS b\r\n        ON a.AS_OF_DATE = b.AS_OF_DATE\r\n    WHERE b.AS_OF_DATE IS NULL\r\n),\r\n\r\nmin_date AS (\r\n    SELECT MIN(AS_OF_DATE) AS MIN_DATE\r\n    FROM as_of_dates\r\n),\r\n\r\nbackfill_as_of AS (\r\n    SELECT AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON a.AS_OF_DATE < l.LAST_SAFE_LOAD_DATETIME\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    {%- endif %}\r\n),\r\n\r\nnew_rows_pks AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 'h') }}\r\n    FROM {{ source_model }} AS h\r\n\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON h.{{ src_ldts }} >= l.LAST_SAFE_LOAD_DATETIME\r\n    {% else %}\r\n    WHERE h.{{ src_ldts }} >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    {%- endif %}\r\n),\r\n\r\nnew_rows_as_of AS (\r\n    SELECT AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON a.AS_OF_DATE >= l.LAST_SAFE_LOAD_DATETIME\r\n    UNION DISTINCT\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    UNION\r\n    {%- endif %}\r\n    SELECT as_of_date\r\n    FROM as_of_grain_new_entries\r\n),\r\n\r\noverlap_pks AS (\r\n    SELECT a.*\r\n    FROM {{ this }} AS a\r\n    INNER JOIN {{ source_model }} as b\r\n        ON {{ dbtvault.multikey(src_pk, prefix=['a','b'], condition='=') }}\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN min_date\r\n    ON 1 = 1\r\n    INNER JOIN last_safe_load_datetime\r\n    ON 1 = 1\r\n\tLEFT OUTER JOIN as_of_grain_lost_entries\r\n\tON a.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\r\n    WHERE a.AS_OF_DATE >= min_date.MIN_DATE\r\n        AND a.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\r\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\r\n        AND a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n        AND a.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\r\n    {%- endif %}\r\n),\r\n\r\noverlap_as_of AS (\r\n    SELECT p.AS_OF_DATE\r\n    FROM as_of_dates AS p\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN min_date\r\n    ON 1 = 1\r\n    INNER JOIN last_safe_load_datetime\r\n    ON 1 = 1\r\n\tLEFT OUTER JOIN as_of_grain_lost_entries\r\n\tON p.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\r\n    WHERE p.AS_OF_DATE >= min_date.MIN_DATE\r\n        AND p.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\r\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\r\n    {% else %}\r\n    WHERE p.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\r\n        AND p.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n        AND p.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\r\n    {% endif %}\r\n)\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8283815}, "macro.dbtvault.bridge_overlap_and_new_rows": {"unique_id": "macro.dbtvault.bridge_overlap_and_new_rows", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\bridge_shared.sql", "original_file_path": "macros\\supporting\\bridge_shared.sql", "name": "bridge_overlap_and_new_rows", "macro_sql": "{%- macro bridge_overlap_and_new_rows(src_pk, bridge_walk, source_model, new_as_of_dates_cte) -%}\r\n\r\nSELECT\r\n    {{ dbtvault.prefix([src_pk], 'a') }},\r\n    b.AS_OF_DATE,\r\n    {%- for bridge_step in bridge_walk.keys() -%}\r\n        {%- set link_table = bridge_walk[bridge_step]['link_table'] -%}\r\n        {%- set eff_sat_table = bridge_walk[bridge_step]['eff_sat_table'] -%}\r\n\r\n        {%- set link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['link_pk']) -%}\r\n\r\n        {%- set bridge_link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_link_pk']) -%}\r\n        {%- set bridge_end_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_end_date']) -%}\r\n        {%- set bridge_load_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_load_date']) -%}\r\n\r\n        {%- set eff_sat_end_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['eff_sat_end_date']) -%}\r\n        {%- set eff_sat_load_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['eff_sat_load_date']) %}\r\n\r\n        {{- '\\n   ' }} {{ link_table | lower }}.{{ link_pk }} AS {{ bridge_link_pk }},\r\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_end_date }} AS {{ bridge_end_date }},\r\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_load_date }} AS {{ bridge_load_date }}\r\n\r\n        {%- if not loop.last %}, {%- endif -%}\r\n\r\n    {% endfor -%}\r\n\r\n    FROM {{ source_model }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n        ON (1=1)\r\n\r\n    {%- set loop_vars = namespace(last_link = '', last_link_fk = '') %}\r\n    {%- for bridge_step in bridge_walk.keys() -%}\r\n\r\n        {%- set current_link = bridge_walk[bridge_step]['link_table'] -%}\r\n        {%- set current_eff_sat = bridge_walk[bridge_step]['eff_sat_table'] -%}\r\n\r\n        {%- set link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['link_pk']) -%}\r\n        {%- set link_fk1 = dbtvault.escape_column_names(bridge_walk[bridge_step]['link_fk1']) -%}\r\n        {%- set link_fk2 = dbtvault.escape_column_names(bridge_walk[bridge_step]['link_fk2']) -%}\r\n\r\n        {%- set eff_sat_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['eff_sat_pk']) -%}\r\n        {%- set eff_sat_load_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['eff_sat_load_date']) -%}\r\n\r\n    {%- if loop.first %}\r\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\r\n        ON {{ dbtvault.multikey(src_pk, prefix=['a', current_link | lower], condition='=') }}\r\n    {%- else %}\r\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\r\n        ON {{ loop_vars.last_link }}.{{ loop_vars.last_link_fk2 }} = {{ current_link | lower }}.{{ link_fk1 }}\r\n    {%- endif %}\r\n    INNER JOIN {{ ref(current_eff_sat) }} AS {{ current_eff_sat | lower }}\r\n        ON {{ current_eff_sat | lower }}.{{ eff_sat_pk }} = {{ current_link | lower }}.{{ link_pk }}\r\n        AND {{ current_eff_sat | lower }}.{{ eff_sat_load_date }} <= b.AS_OF_DATE\r\n        {%- set loop_vars.last_link = current_link | lower -%}\r\n        {%- set loop_vars.last_link_fk2 = link_fk2 -%}\r\n    {% endfor %}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.escape_column_names", "macro.dbtvault.multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8596354}, "macro.dbtvault.cast_binary": {"unique_id": "macro.dbtvault.cast_binary", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_binary.sql", "original_file_path": "macros\\supporting\\cast_binary.sql", "name": "cast_binary", "macro_sql": "{%- macro cast_binary(column_str, alias=none) -%}\r\n    {{ return(adapter.dispatch('cast_binary', 'dbtvault')(column_str=column_str, alias=alias)) }}\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8596354}, "macro.dbtvault.default__cast_binary": {"unique_id": "macro.dbtvault.default__cast_binary", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_binary.sql", "original_file_path": "macros\\supporting\\cast_binary.sql", "name": "default__cast_binary", "macro_sql": "{%- macro default__cast_binary(column_str, alias=none) -%}\r\n\r\n    CAST('{{ column_str }}' AS {{ dbtvault.type_binary() }}) {% if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8596354}, "macro.dbtvault.sqlserver__cast_binary": {"unique_id": "macro.dbtvault.sqlserver__cast_binary", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_binary.sql", "original_file_path": "macros\\supporting\\cast_binary.sql", "name": "sqlserver__cast_binary", "macro_sql": "{%- macro sqlserver__cast_binary(column_str, alias=none) -%}\r\n\r\n    CONVERT({{ dbtvault.type_binary() }}, '{{ column_str }}', 2) {% if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8596354}, "macro.dbtvault.bigquery__cast_binary": {"unique_id": "macro.dbtvault.bigquery__cast_binary", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_binary.sql", "original_file_path": "macros\\supporting\\cast_binary.sql", "name": "bigquery__cast_binary", "macro_sql": "{%- macro bigquery__cast_binary(column_str, alias=none) -%}\r\n\r\n    {{ dbtvault.default__cast_binary(column_str=column_str, alias=alias) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8596354}, "macro.dbtvault.cast_date": {"unique_id": "macro.dbtvault.cast_date", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "name": "cast_date", "macro_sql": "{%- macro cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n    {{ return(adapter.dispatch('cast_date', 'dbtvault')(column_str=column_str, as_string=as_string, datetime=datetime, alias=alias)) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8596354}, "macro.dbtvault.snowflake__cast_date": {"unique_id": "macro.dbtvault.snowflake__cast_date", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "name": "snowflake__cast_date", "macro_sql": "{%- macro snowflake__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {%- if datetime -%}\r\n        {%- if not as_string -%}\r\n            TO_DATETIME({{ column_str }})\r\n        {%- else -%}\r\n            TO_DATETIME('{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if not as_string -%}\r\n            TO_DATE({{ column_str }})\r\n        {%- else -%}\r\n            TO_DATE('{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.sqlserver__cast_date": {"unique_id": "macro.dbtvault.sqlserver__cast_date", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "name": "sqlserver__cast_date", "macro_sql": "{%- macro sqlserver__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {%- if datetime -%}\r\n        {%- if not as_string -%}\r\n            CONVERT(DATETIME2, {{ column_str }})\r\n        {%- else -%}\r\n            CONVERT(DATETIME2, '{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if not as_string -%}\r\n            CONVERT(DATE, {{ column_str }})\r\n        {%- else -%}\r\n            CONVERT(DATE, '{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.bigquery__cast_date": {"unique_id": "macro.dbtvault.bigquery__cast_date", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "name": "bigquery__cast_date", "macro_sql": "{%- macro bigquery__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {%- if datetime -%}\r\n        {%- if not as_string -%}\r\n            CAST(PARSE_DATETIME('%F %H:%M:%E6S', {{ column_str }}))\r\n        {%- else -%}\r\n            CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ column_str }}'))\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if not as_string -%}\r\n            DATE({{ column_str }})\r\n        {%- else -%}\r\n            DATE('{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.databricks__cast_date": {"unique_id": "macro.dbtvault.databricks__cast_date", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "name": "databricks__cast_date", "macro_sql": "{%- macro databricks__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {{ dbtvault.snowflake__cast_date(column_str=column_str, as_string=as_string, datetime=datetime, alias=alias)}}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.postgres__cast_date": {"unique_id": "macro.dbtvault.postgres__cast_date", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "name": "postgres__cast_date", "macro_sql": "{%- macro postgres__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {{ dbtvault.snowflake__cast_date(column_str=column_str, as_string=as_string, datetime=datetime, alias=alias)}}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.current_timestamp": {"unique_id": "macro.dbtvault.current_timestamp", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\r\n  {{ return(adapter.dispatch('current_timestamp', 'dbtvault')()) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.default__current_timestamp": {"unique_id": "macro.dbtvault.default__current_timestamp", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\r\n    {{ dbt_utils.current_timestamp() }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.sqlserver__current_timestamp": {"unique_id": "macro.dbtvault.sqlserver__current_timestamp", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "name": "sqlserver__current_timestamp", "macro_sql": "{% macro sqlserver__current_timestamp() %}\r\n    sysdatetime()\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.current_timestamp_in_utc": {"unique_id": "macro.dbtvault.current_timestamp_in_utc", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\r\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbtvault')()) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.default__current_timestamp_in_utc": {"unique_id": "macro.dbtvault.default__current_timestamp_in_utc", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\r\n    {{ dbt_utils.current_timestamp_in_utc() }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.sqlserver__current_timestamp_in_utc": {"unique_id": "macro.dbtvault.sqlserver__current_timestamp_in_utc", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "name": "sqlserver__current_timestamp_in_utc", "macro_sql": "{% macro sqlserver__current_timestamp_in_utc() %}\r\n    sysutcdatetime()\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.type_timestamp": {"unique_id": "macro.dbtvault.type_timestamp", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "name": "type_timestamp", "macro_sql": "{%- macro type_timestamp() -%}\r\n  {{- return(adapter.dispatch('type_timestamp', 'dbtvault')()) -}}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.default__type_timestamp": {"unique_id": "macro.dbtvault.default__type_timestamp", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{%- macro default__type_timestamp() -%}\r\n    TIMESTAMP_NTZ\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.sqlserver__type_timestamp": {"unique_id": "macro.dbtvault.sqlserver__type_timestamp", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "name": "sqlserver__type_timestamp", "macro_sql": "{%- macro sqlserver__type_timestamp() -%}\r\n    DATETIME2\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.type_binary": {"unique_id": "macro.dbtvault.type_binary", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "name": "type_binary", "macro_sql": "{%- macro type_binary() -%}\r\n  {{- return(adapter.dispatch('type_binary', 'dbtvault')()) -}}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__type_binary"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.default__type_binary": {"unique_id": "macro.dbtvault.default__type_binary", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "name": "default__type_binary", "macro_sql": "{%- macro default__type_binary() -%}\r\n    {%- if var('hash') == 'MD5' -%}\r\n    BINARY(16)\r\n    {%- elif var('hash') == 'SHA' -%}\r\n    BINARY(32)\r\n    {%- endif -%}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8752546}, "macro.dbtvault.get_query_results_as_dict": {"unique_id": "macro.dbtvault.get_query_results_as_dict", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\get_query_results_as_dict.sql", "original_file_path": "macros\\supporting\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\r\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbtvault')(query)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8908846}, "macro.dbtvault.default__get_query_results_as_dict": {"unique_id": "macro.dbtvault.default__get_query_results_as_dict", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\get_query_results_as_dict.sql", "original_file_path": "macros\\supporting\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\r\n    {%- set query_results = dbt_utils.get_query_results_as_dict(query) -%}\r\n    {%- set query_results_processed = {} -%}\r\n\r\n    {% for k, v in query_results.items() %}\r\n        {% do query_results_processed.update({k.upper(): v}) %}\r\n    {% endfor %}\r\n\r\n    {{ return(query_results_processed) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.8908846}, "macro.dbtvault.hash": {"unique_id": "macro.dbtvault.hash", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "name": "hash", "macro_sql": "{%- macro hash(columns=none, alias=none, is_hashdiff=false) -%}\r\n\r\n    {%- if is_hashdiff is none -%}\r\n        {%- set is_hashdiff = false -%}\r\n    {%- endif -%}\r\n\r\n    {{- adapter.dispatch('hash', 'dbtvault')(columns=columns, alias=alias, is_hashdiff=is_hashdiff) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9065113}, "macro.dbtvault.default__hash": {"unique_id": "macro.dbtvault.default__hash", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "name": "default__hash", "macro_sql": "\r\n\r\n{%- macro default__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{#- Select hashing algorithm -#}\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5_BINARY' -%}\r\n    {%- set hash_size = 16 -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA2_BINARY' -%}\r\n    {%- set hash_size = 32 -%}\r\n{%- else -%}\r\n    {%- set hash_alg = 'MD5_BINARY' -%}\r\n    {%- set hash_size = 16 -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS VARCHAR))), '')\" %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {{- \"CAST(({}({})) AS BINARY({})) AS {}\".format(hash_alg, standardise | replace('[EXPRESSION]', escaped_column_str), hash_size, dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n    {%- set all_null = [] -%}\r\n\r\n    {%- if is_hashdiff -%}\r\n        {{- \"CAST({}(CONCAT_WS('{}',\".format(hash_alg, concat_string) | indent(4) -}}\r\n    {%- else -%}\r\n        {{- \"CAST({}(NULLIF(CONCAT_WS('{}',\".format(hash_alg, concat_string) | indent(4) -}}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {{- \"\\nIFNULL({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",\" if not loop.last -}}\r\n\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {{- \"\\n)) AS BINARY({})) AS {}\".format(hash_size, dbtvault.escape_column_names(alias)) -}}\r\n            {%- else -%}\r\n                {{- \"\\n), '{}')) AS BINARY({})) AS {}\".format(all_null | join(\"\"), hash_size, dbtvault.escape_column_names(alias)) -}}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9065113}, "macro.dbtvault.bigquery__hash": {"unique_id": "macro.dbtvault.bigquery__hash", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "name": "bigquery__hash", "macro_sql": "{%- macro bigquery__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{#- Select hashing algorithm -#}\r\n\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA256' -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS STRING))), '')\" %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {{- \"CAST(UPPER(TO_HEX({}({}))) AS STRING) AS {}\".format(hash_alg, standardise | replace('[EXPRESSION]', escaped_column_str), dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n {%- set all_null = [] -%}\r\n    {%- if is_hashdiff -%}\r\n        {{- \"UPPER(TO_HEX({}(CONCAT(\".format(hash_alg) | indent(4) -}}\r\n\r\n    {%- else -%}\r\n        {{- \"UPPER(TO_HEX({}(NULLIF(CONCAT(\".format(hash_alg) | indent(4) -}}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {{- \"\\nIFNULL({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",'{}',\".format(concat_string) if not loop.last -}}\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {{- \"\\n)))) AS {}\".format(dbtvault.escape_column_names(alias)) -}}\r\n            {%- else -%}\r\n                {{- \"\\n), '{}')))) AS {}\".format(all_null | join(\"\"), dbtvault.escape_column_names(alias)) -}}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9221492}, "macro.dbtvault.sqlserver__hash": {"unique_id": "macro.dbtvault.sqlserver__hash", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "name": "sqlserver__hash", "macro_sql": "{%- macro sqlserver__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{% if dbtvault.is_list(columns) and columns | length == 1 %}\r\n    {%- set columns = columns[0] -%}\r\n{% endif %}\r\n\r\n\r\n{#- Select hashing algorithm -#}\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n    {%- set hash_size = 16 -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA2_256' -%}\r\n    {%- set hash_size = 32 -%}\r\n{%- else -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n    {%- set hash_size = 16 -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS VARCHAR(max)))), '')\" %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {{- \"CAST(HASHBYTES('{}', {}) AS BINARY({})) AS {}\".format(hash_alg, standardise | replace('[EXPRESSION]', escaped_column_str), hash_size, dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n    {%- set all_null = [] -%}\r\n\r\n    {%- if is_hashdiff -%}\r\n        {{- \"CAST(HASHBYTES('{}', (CONCAT_WS('{}',\".format(hash_alg, concat_string) | indent(4) -}}\r\n    {%- else -%}\r\n        {{- \"CAST(HASHBYTES('{}', (NULLIF(CONCAT_WS('{}',\".format(hash_alg, concat_string) | indent(4) -}}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {{- \"\\nISNULL({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",\" if not loop.last -}}\r\n\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {{- \"\\n))) AS BINARY({})) AS {}\".format(hash_size, dbtvault.escape_column_names(alias)) -}}\r\n            {%- else -%}\r\n                {{- \"\\n), '{}'))) AS BINARY({})) AS {}\".format(all_null | join(\"\"), hash_size, dbtvault.escape_column_names(alias)) -}}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.937773}, "macro.dbtvault.postgres__hash": {"unique_id": "macro.dbtvault.postgres__hash", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "name": "postgres__hash", "macro_sql": "{%- macro postgres__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{#- Select hashing algorithm -#}\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA256' -%}\r\n{%- else -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- endif -%}\r\n\r\n{#- Select hashing expression (left and right sides) -#}\r\n{#- * MD5 is simple function call to md5(val) -#}\r\n{#- * SHA256 needs input cast to BYTEA and then its BYTEA result encoded as hex text output -#}\r\n{#-   e.g. ENCODE(SHA256(CAST(val AS BYTEA)), 'hex') -#}\r\n{#- Ref: https://www.postgresql.org/docs/11/functions-binarystring.html  -#}\r\n{%- if hash_alg == 'MD5' -%}\r\n    {%- set hash_expr_left = 'MD5(' -%}\r\n    {%- set hash_expr_right = ')' -%}\r\n{%- elif hash_alg == 'SHA256' -%}\r\n    {%- set hash_expr_left = 'ENCODE(SHA256(CAST(' -%}\r\n    {%- set hash_expr_right = \" AS BYTEA)), 'hex')\" -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS VARCHAR))), '')\" -%}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- if dbtvault.is_expression(column_str) -%}\r\n        {%- set escaped_column_str = column_str -%}\r\n    {%- else -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {%- endif -%}\r\n\r\n    {{- \"CAST(UPPER({}{}{}) AS BYTEA) AS {}\".format(hash_expr_left, standardise | replace('[EXPRESSION]', escaped_column_str), hash_expr_right, dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n    {%- set all_null = [] -%}\r\n\r\n    {%- if is_hashdiff -%}\r\n        {{- \"CAST(UPPER({}CONCAT_WS('{}',\".format(hash_expr_left, concat_string) | indent(4) -}}\r\n    {%- else -%}\r\n        {{- \"CAST(UPPER({}NULLIF(CONCAT_WS('{}',\".format(hash_expr_left, concat_string) | indent(4) -}}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- if dbtvault.is_expression(column_str) -%}\r\n            {%- set escaped_column_str = column_str -%}\r\n        {%- else -%}\r\n            {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {%- endif -%}\r\n\r\n        {{- \"\\nCOALESCE({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",\" if not loop.last -}}\r\n\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {{- \"\\n){}) AS BYTEA) AS {}\".format(hash_expr_right, dbtvault.escape_column_names(alias)) -}}\r\n            {%- else -%}\r\n                {{- \"\\n), '{}'){}) AS BYTEA) AS {}\".format(all_null | join(\"\"), hash_expr_right, dbtvault.escape_column_names(alias)) -}}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.is_expression", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.937773}, "macro.dbtvault.databricks__hash": {"unique_id": "macro.dbtvault.databricks__hash", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "name": "databricks__hash", "macro_sql": "{%- macro databricks__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{#- Select hashing algorithm -#}\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA2' -%}\r\n    {%- set bit_length = 256 -%}\r\n{%- else -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS STRING))), '')\" %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- if dbtvault.is_expression(column_str) -%}\r\n        {%- set escaped_column_str = column_str -%}\r\n    {%- else -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {%- endif -%}\r\n\r\n    {%- if hash_alg == \"MD5\" %}\r\n        {{- \"UPPER(MD5({})) AS {}\".format(standardise | replace('[EXPRESSION]', escaped_column_str), dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n    {%- else %}\r\n        {{- \"UPPER(SHA2({}, {})) AS {}\".format(standardise | replace('[EXPRESSION]', escaped_column_str), bit_length, dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n    {%- endif %}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n    {%- set all_null = [] -%}\r\n\r\n    {%- if is_hashdiff -%}\r\n        {%- if hash_alg == \"MD5\" %}\r\n            {{- \"UPPER(MD5(CONCAT_WS('{}',\".format(concat_string) | indent(4) -}}\r\n        {%- else %}\r\n            {{- \"UPPER(SHA2(CONCAT_WS('{}',\".format(concat_string) | indent(4) -}}\r\n        {%- endif %}\r\n\r\n    {%- else -%}\r\n        {%- if hash_alg == \"MD5\" %}\r\n            {{- \"UPPER(MD5(NULLIF(CONCAT_WS('{}',\".format(concat_string) | indent(4) -}}\r\n        {%- else %}\r\n            {{- \"UPPER(SHA2(NULLIF(CONCAT_WS('{}',\".format(concat_string) | indent(4) -}}\r\n        {%- endif %}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- if dbtvault.is_expression(column_str) -%}\r\n            {%- set escaped_column_str = column_str -%}\r\n        {%- else -%}\r\n            {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {%- endif -%}\r\n        {{- \"\\nIFNULL({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",\" if not loop.last -}}\r\n\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {%- if hash_alg == \"MD5\" %}\r\n                    {{- \"\\n))) AS {}\".format(dbtvault.escape_column_names(alias)) -}}\r\n                {%- else %}\r\n                    {{- \"\\n), {})) AS {}\".format(bit_length, dbtvault.escape_column_names(alias)) -}}\r\n                {%- endif %}\r\n            {%- else -%}\r\n                {%- if hash_alg == \"MD5\" %}\r\n                    {{- \"\\n), '{}'))) AS {}\".format(all_null | join(\"\"), dbtvault.escape_column_names(alias)) -}}\r\n                {%- else %}\r\n                    {{- \"\\n), '{}'), {})) AS {}\".format(all_null | join(\"\"), bit_length, dbtvault.escape_column_names(alias)) -}}\r\n                {%- endif %}\r\n\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.is_expression", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9534013}, "macro.dbtvault.max_datetime": {"unique_id": "macro.dbtvault.max_datetime", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "name": "max_datetime", "macro_sql": "{%- macro max_datetime() -%}\r\n\r\n    {%- do return(adapter.dispatch('max_datetime', 'dbtvault')()) -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.bigquery__max_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9534013}, "macro.dbtvault.default__max_datetime": {"unique_id": "macro.dbtvault.default__max_datetime", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "name": "default__max_datetime", "macro_sql": "\r\n\r\n{%- macro default__max_datetime() %}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9534013}, "macro.dbtvault.sqlserver__max_datetime": {"unique_id": "macro.dbtvault.sqlserver__max_datetime", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "name": "sqlserver__max_datetime", "macro_sql": "{%- macro sqlserver__max_datetime() -%}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.9999999')) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9534013}, "macro.dbtvault.bigquery__max_datetime": {"unique_id": "macro.dbtvault.bigquery__max_datetime", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "name": "bigquery__max_datetime", "macro_sql": "{%- macro bigquery__max_datetime() -%}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9534013}, "macro.dbtvault.prefix": {"unique_id": "macro.dbtvault.prefix", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\prefix.sql", "original_file_path": "macros\\supporting\\prefix.sql", "name": "prefix", "macro_sql": "{%- macro prefix(columns, prefix_str, alias_target) -%}\r\n\r\n    {{- adapter.dispatch('prefix', 'dbtvault')(columns=columns,\r\n                                               prefix_str=prefix_str,\r\n                                               alias_target=alias_target) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9534013}, "macro.dbtvault.default__prefix": {"unique_id": "macro.dbtvault.default__prefix", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\supporting\\prefix.sql", "original_file_path": "macros\\supporting\\prefix.sql", "name": "default__prefix", "macro_sql": "{%- macro default__prefix(columns=none, prefix_str=none, alias_target='source') -%}\r\n\r\n    {%- if columns and prefix_str -%}\r\n\r\n        {%- for col in columns -%}\r\n\r\n            {%- if col is mapping -%}\r\n\r\n                {%- if alias_target == 'source' -%}\r\n\r\n                    {{- dbtvault.prefix([col['source_column']], prefix_str) -}}\r\n\r\n                {%- elif alias_target == 'target' -%}\r\n\r\n                    {{- dbtvault.prefix([col['alias']], prefix_str) -}}\r\n\r\n                {%- else -%}\r\n\r\n                    {{- dbtvault.prefix([col['source_column']], prefix_str) -}}\r\n\r\n                {%- endif -%}\r\n\r\n                {%- if not loop.last -%} , {% endif %}\r\n\r\n            {%- else -%}\r\n\r\n                {%- if col is iterable and col is not string -%}\r\n\r\n                    {{- dbtvault.prefix(col, prefix_str) -}}\r\n\r\n                {%- elif col is not none -%}\r\n\r\n                    {{- prefix_str}}.{{col.strip() -}}\r\n                {% else %}\r\n\r\n                    {%- if execute -%}\r\n                        {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\r\n                    {%- endif -%}\r\n                {%- endif -%}\r\n\r\n                {{- ', ' if not loop.last -}}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n\r\n    {%- else -%}\r\n\r\n        {%- if execute -%}\r\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9690382}, "macro.dbtvault.bigquery__bridge": {"unique_id": "macro.dbtvault.bigquery__bridge", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\bridge.sql", "original_file_path": "macros\\tables\\bigquery\\bridge.sql", "name": "bigquery__bridge", "macro_sql": "{%- macro bigquery__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\r\n\r\n{{ dbtvault.default__bridge(src_pk=src_pk,\r\n                            as_of_dates_table=as_of_dates_table,\r\n                            bridge_walk=bridge_walk,\r\n                            stage_tables_ldts=stage_tables_ldts,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_ldts=src_ldts,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898982.9690382}, "macro.dbtvault.bigquery__eff_sat": {"unique_id": "macro.dbtvault.bigquery__eff_sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\eff_sat.sql", "original_file_path": "macros\\tables\\bigquery\\eff_sat.sql", "name": "bigquery__eff_sat", "macro_sql": "{%- macro bigquery__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = dbtvault.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records_unranked AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\r\n           ROW_NUMBER() OVER (\r\n                PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\r\n                ORDER BY b.{{ src_ldts }} DESC\r\n           ) AS row_num\r\n    FROM {{ this }} AS b\r\n),\r\n\r\nlatest_records AS (\r\n    SELECT *\r\n    FROM latest_records_unranked\r\n    WHERE row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE DATE(c.{{ src_end_date }}) = CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE DATE(d.{{ src_end_date }}) != CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'f') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'f') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lc') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'g') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE CAST((g.{{ src_end_date }}) AS DATE) = CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN Latest_open AS lo\r\n    ON lo.{{ src_pk }} = h.{{ src_pk }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON lc.{{ src_pk }} = h.{{ src_pk }}\r\n    WHERE CAST((h.{{ src_end_date }}) AS DATE) != CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n    AND lo.{{ src_pk }} IS NOT NULL\r\n    AND lc.{{ src_pk }} IS NULL\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION DISTINCT\r\n    SELECT * FROM new_reopened_records\r\n    UNION DISTINCT\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not dbtvault.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not dbtvault.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT *\r\nFROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0003123}, "macro.dbtvault.bigquery__hub": {"unique_id": "macro.dbtvault.bigquery__hub", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\hub.sql", "original_file_path": "macros\\tables\\bigquery\\hub.sql", "name": "bigquery__hub", "macro_sql": "{%- macro bigquery__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\n    row_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),\r\n\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n{%- if stage_count > 1 %}\r\n\r\n    row_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0159428}, "macro.dbtvault.bigquery__link": {"unique_id": "macro.dbtvault.bigquery__link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\link.sql", "original_file_path": "macros\\tables\\bigquery\\link.sql", "name": "bigquery__link", "macro_sql": "{%- macro bigquery__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n        ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n        ) AS row_number\r\n    FROM {{ ref (src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition ='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition ='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- endif %}\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n    ),\r\n\r\n{% endfor -%}\r\n\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0315719}, "macro.dbtvault.bigquery__ma_sat": {"unique_id": "macro.dbtvault.bigquery__ma_sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\ma_sat.sql", "original_file_path": "macros\\tables\\bigquery\\ma_sat.sql", "name": "bigquery__ma_sat", "macro_sql": "{%- macro bigquery__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) %}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{# Select unique source records -#}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in src_cdk %}\r\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n\r\nsource_data_with_count AS (\r\n    SELECT a.*,\r\n           b.source_count\r\n    FROM source_data a\r\n    INNER JOIN (\r\n        SELECT {{ dbtvault.prefix([src_pk], 't') }},\r\n            COUNT(*) AS source_count\r\n        FROM (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}, {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\r\n        GROUP BY {{ dbtvault.prefix([src_pk], 't') }}\r\n    ) AS b\r\n    ON {{ dbtvault.multikey([src_pk], prefix=['a','b'], condition='=') }}\r\n),\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }},\r\n           mas.latest_rank,\r\n           DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\r\n                              ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }},\r\n                                       {{ dbtvault.prefix([src_cdk], 'mas') }} ASC\r\n           ) AS check_rank\r\n    FROM (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\r\n           RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\r\n                        ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC\r\n           ) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n    INNER JOIN (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\r\n        ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n    ) AS mas\r\n    WHERE latest_rank = 1\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }},\r\n           {{ dbtvault.prefix([src_ldts], 'lr') }},\r\n           MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n{% if not dbtvault.is_any_incremental() %}\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n{%- endif %}\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data_with_count') }}\r\n    FROM source_data_with_count\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data_with_count AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }},\r\n                       lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\r\n{#        AND {{ dbtvault.prefix([src_ldts], 'stage') }} = {{ dbtvault.prefix([src_ldts], 'active_records') }} #}\r\n                AND {{ dbtvault.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data_with_count', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0472016}, "macro.dbtvault.bigquery__pit": {"unique_id": "macro.dbtvault.bigquery__pit", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\pit.sql", "original_file_path": "macros\\tables\\bigquery\\pit.sql", "name": "bigquery__pit", "macro_sql": "{%- macro bigquery__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) %}\r\n\r\n{#- Acquiring the source relation for the AS_OF table -#}\r\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n    {%- set source_name = as_of_dates_table | first -%}\r\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\r\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\r\n{%- endif -%}\r\n\r\n{#- Setting ghost values to replace NULLS -#}\r\n{%- set ghost_pk = '0x0000000000000000' -%}\r\n{%- set ghost_date = '1900-01-01 00:00:00.000000' %}\r\n\r\n{%- if dbtvault.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT * FROM {{ as_of_table_relation }}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\nbackfill_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM new_rows_pks AS a\r\n    INNER JOIN backfill_as_of AS b\r\n        ON (1=1 )\r\n),\r\n\r\nbackfill AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_key_name = (satellites[sat_name]['pk'].keys() | list )[0] | upper -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] | upper -%}\r\n        {%- set sat_name = sat_name | upper %}\r\n        '{{ ghost_pk }}' AS {{ dbtvault.escape_column_names( sat_name ~ '_' ~ sat_key_name ) }},\r\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}') AS {{ dbtvault.escape_column_names( sat_name ~ '_' ~ sat_ldts_name ) }}\r\n        {{- ',' if not loop.last -}}\r\n    {%- endfor %}\r\n    FROM backfill_rows_as_of_dates AS a\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}\r\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_pk }}\r\n        {{ \"AND\" | indent(4) }} {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n    ORDER BY (1)\r\n),\r\n{%- endif %}\r\n\r\nnew_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM {{ ref(source_model) }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n    ON (1=1)\r\n),\r\n\r\nnew_rows AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) %}\r\n        COALESCE(MAX({{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_pk }}),\r\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\r\n        COALESCE(MAX({{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_ldts }}),\r\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\r\n        {{- \",\" if not loop.last }}\r\n    {%- endfor %}\r\n    FROM new_rows_as_of_dates AS a\r\n\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}\r\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_pk }}\r\n        {{ \"AND\" | indent(4) }} {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n    ORDER BY (1)\r\n),\r\n\r\npit AS (\r\n    SELECT * FROM new_rows\r\n{%- if dbtvault.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap_pks\r\n    UNION ALL\r\n    SELECT * FROM backfill\r\n{%- endif %}\r\n)\r\n\r\nSELECT DISTINCT * FROM pit\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.prefix", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.078461}, "macro.dbtvault.bigquery__sat": {"unique_id": "macro.dbtvault.bigquery__sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\sat.sql", "original_file_path": "macros\\tables\\bigquery\\sat.sql", "name": "bigquery__sat", "macro_sql": "{%- macro bigquery__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{ dbtvault.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                             src_payload=src_payload,\r\n                             src_extra_columns=src_extra_columns,\r\n                             src_eff=src_eff, src_ldts=src_ldts,\r\n                             src_source=src_source, source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.078461}, "macro.dbtvault.bigquery__t_link": {"unique_id": "macro.dbtvault.bigquery__t_link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\t_link.sql", "original_file_path": "macros\\tables\\bigquery\\t_link.sql", "name": "bigquery__t_link", "macro_sql": "{%- macro bigquery__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0940936}, "macro.dbtvault.bigquery__xts": {"unique_id": "macro.dbtvault.bigquery__xts", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\bigquery\\xts.sql", "original_file_path": "macros\\tables\\bigquery\\xts.sql", "name": "bigquery__xts", "macro_sql": "{%- macro bigquery__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__xts(src_pk=src_pk,\r\n                         src_satellite=src_satellite,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0940936}, "macro.dbtvault.databricks__hub": {"unique_id": "macro.dbtvault.databricks__hub", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\databricks\\hub.sql", "original_file_path": "macros\\tables\\databricks\\hub.sql", "name": "databricks__hub", "macro_sql": "{%- macro databricks__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__hub(src_pk=src_pk,\r\n                         src_nk=src_nk,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0940936}, "macro.dbtvault.databricks__link": {"unique_id": "macro.dbtvault.databricks__link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\databricks\\link.sql", "original_file_path": "macros\\tables\\databricks\\link.sql", "name": "databricks__link", "macro_sql": "{%- macro databricks__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__link(src_pk=src_pk,\r\n                          src_fk=src_fk,\r\n                          src_extra_columns=src_extra_columns,\r\n                          src_ldts=src_ldts,\r\n                          src_source=src_source,\r\n                          source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__link"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0940936}, "macro.dbtvault.databricks__sat": {"unique_id": "macro.dbtvault.databricks__sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\databricks\\sat.sql", "original_file_path": "macros\\tables\\databricks\\sat.sql", "name": "databricks__sat", "macro_sql": "{%- macro databricks__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__sat(src_pk=src_pk,\r\n                         src_hashdiff=src_hashdiff,\r\n                         src_payload=src_payload,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_eff=src_eff,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.0940936}, "macro.dbtvault.postgres__hub": {"unique_id": "macro.dbtvault.postgres__hub", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\postgres\\hub.sql", "original_file_path": "macros\\tables\\postgres\\hub.sql", "name": "postgres__hub", "macro_sql": "{%- macro postgres__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif -%}\r\n\r\n{{ dbtvault.prepend_generated_by() }}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- if not (source_model is iterable and source_model is not string) -%}\r\n    {%- set source_model = [source_model] -%}\r\n{%- endif -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\r\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\r\n-#}\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'rr') }}) {{ dbtvault.prefix(source_cols_with_rank, 'rr') }}\r\n    {%- else %}\r\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'rr') }}) {{ dbtvault.prefix(source_cols, 'rr') }}\r\n    {%- endif %}\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    ORDER BY {{ dbtvault.prefix([src_pk], 'rr') }}, {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if source_model | length > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n{%- if source_model | length > 1 %}\r\n\r\nrow_rank_union AS (\r\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\r\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\r\n-#}\r\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'ru') }}) ru.*\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    ORDER BY {{ dbtvault.prefix([src_pk], 'ru') }}, {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.1097198}, "macro.dbtvault.postgres__link": {"unique_id": "macro.dbtvault.postgres__link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\postgres\\link.sql", "original_file_path": "macros\\tables\\postgres\\link.sql", "name": "postgres__link", "macro_sql": "{%- macro postgres__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif -%}\r\n\r\n{{ dbtvault.prepend_generated_by() }}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- if not (source_model is iterable and source_model is not string) -%}\r\n    {%- set source_model = [source_model] -%}\r\n{%- endif -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n  SELECT * FROM (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if source_model | length == 1 %}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n  ) as l\r\n  WHERE row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if source_model | length > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if source_model | length > 1 %}\r\n\r\nrow_rank_union AS (\r\n  SELECT * FROM (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n  ) AS a\r\n  WHERE row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.1253424}, "macro.dbtvault.postgres__sat": {"unique_id": "macro.dbtvault.postgres__sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\postgres\\sat.sql", "original_file_path": "macros\\tables\\postgres\\sat.sql", "name": "postgres__sat", "macro_sql": "{%- macro postgres__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set pk_cols = dbtvault.expand_column_list(columns=[src_pk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif -%}\r\n\r\n{{ dbtvault.prepend_generated_by() }}\r\n\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'a', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {% endif %}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(rank_cols, 'a', alias_target='target') }}\r\n    FROM (\r\n        SELECT {{ dbtvault.prefix(rank_cols, 'current_records', alias_target='target') }},\r\n            RANK() OVER (\r\n                PARTITION BY {{ dbtvault.prefix([src_pk], 'current_records') }}\r\n                ORDER BY {{ dbtvault.prefix([src_ldts], 'current_records') }} DESC\r\n            ) AS rank\r\n        FROM {{ this }} AS current_records\r\n            JOIN (\r\n                SELECT DISTINCT {{ dbtvault.prefix([src_pk], 'source_data') }}\r\n                FROM source_data\r\n            ) AS source_records\r\n                ON {{ dbtvault.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\r\n    ) AS a\r\n    WHERE a.rank = 1\r\n),\r\n\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT {{ dbtvault.alias_all(source_cols, 'stage') }}\r\n    FROM source_data AS stage\r\n    {%- if dbtvault.is_any_incremental() %}\r\n        LEFT JOIN latest_records\r\n            ON {{ dbtvault.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\r\n            WHERE {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} != {{ dbtvault.prefix([src_hashdiff], 'stage') }}\r\n                OR {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.1409726}, "macro.dbtvault.bridge": {"unique_id": "macro.dbtvault.bridge", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\bridge.sql", "original_file_path": "macros\\tables\\snowflake\\bridge.sql", "name": "bridge", "macro_sql": "{%- macro bridge(src_pk, src_extra_columns, as_of_dates_table, bridge_walk, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n    {%- if dbtvault.is_something(src_extra_columns) and execute -%}\r\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\r\n    {%- endif -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           bridge_walk=bridge_walk,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n\r\n    {{- dbtvault.prepend_generated_by() }}\r\n\r\n    {% for stg in stage_tables_ldts %}\r\n    {{- \"-- depends_on: \" ~ ref(stg) }}\r\n    {% endfor %}\r\n\r\n    {#- Acquiring the source relation for the AS_OF table -#}\r\n    {%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n        {%- set source_name = as_of_dates_table | first -%}\r\n        {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n        {%- set as_of_dates_table = source(source_name, source_table_name) -%}\r\n    {%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n        {%- set as_of_dates_table = ref(as_of_dates_table) -%}\r\n    {%- endif %}\r\n\r\n    {{ adapter.dispatch('bridge', 'dbtvault')(src_pk=src_pk,\r\n                                              src_extra_columns=src_extra_columns,\r\n                                              src_ldts=src_ldts,\r\n                                              as_of_dates_table=as_of_dates_table,\r\n                                              bridge_walk=bridge_walk,\r\n                                              stage_tables_ldts=stage_tables_ldts,\r\n                                              source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__bridge"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.1565878}, "macro.dbtvault.default__bridge": {"unique_id": "macro.dbtvault.default__bridge", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\bridge.sql", "original_file_path": "macros\\tables\\snowflake\\bridge.sql", "name": "default__bridge", "macro_sql": "{%- macro default__bridge(src_pk, src_extra_columns, src_ldts, as_of_dates_table, bridge_walk, stage_tables_ldts, source_model) -%}\r\n\r\n{%- set max_datetime = dbtvault.max_datetime() -%}\r\n\r\n{#- Setting the new AS_OF dates CTE name -#}\r\n{%- if dbtvault.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of'  -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT *\r\n    FROM {{ as_of_dates_table }}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\noverlap AS (\r\n    {{ dbtvault.bridge_overlap_and_new_rows(src_pk, bridge_walk, 'overlap_pks', 'overlap_as_of') }}\r\n),\r\n{%- endif %}\r\n\r\nnew_rows AS (\r\n    {{ dbtvault.bridge_overlap_and_new_rows(src_pk, bridge_walk, ref(source_model), new_as_of_dates_cte) }}\r\n),\r\n\r\n{# Full data from bridge walk(s) -#}\r\nall_rows AS (\r\n    SELECT * FROM new_rows\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap\r\n    {%- endif %}\r\n),\r\n\r\n{# Select most recent set of relationship key(s) for each as of date -#}\r\ncandidate_rows AS (\r\n    SELECT *\r\n    FROM (\r\n        SELECT *,\r\n               ROW_NUMBER() OVER (\r\n               PARTITION BY\r\n                   AS_OF_DATE,\r\n                   {% for bridge_step in bridge_walk.keys() -%}\r\n\r\n                       {%- set bridge_link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_link_pk']) -%}\r\n\r\n                       {{ bridge_link_pk }} {%- if not loop.last %}, {% endif -%}\r\n\r\n                   {%- endfor %}\r\n               ORDER BY\r\n                   {% for bridge_step in bridge_walk.keys() -%}\r\n\r\n                       {%- set bridge_load_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_load_date']) -%}\r\n\r\n                       {{ bridge_load_date }} DESC {%- if not loop.last %}, {% endif -%}\r\n\r\n                   {%- endfor %}\r\n               ) AS ROW_NUM\r\n        FROM all_rows\r\n    ) AS a\r\n    WHERE a.ROW_NUM = 1\r\n),\r\n\r\nbridge AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'c') }},\r\n        c.AS_OF_DATE,\r\n\r\n        {% for bridge_step in bridge_walk.keys() %}\r\n\r\n        {% set bridge_link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_link_pk']) %}\r\n        c.{{ bridge_link_pk }}\r\n        {%- if not loop.last %}, {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n    FROM candidate_rows AS c\r\n\r\n{%- for bridge_step in bridge_walk.keys() -%}\r\n    {%- set bridge_end_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_end_date']) %}\r\n\r\n    {% if loop.first -%} WHERE {%- else -%} AND {%- endif %} {{ dbtvault.cast_date(dbtvault.prefix([bridge_end_date], 'c')) }} = {{ dbtvault.cast_date(max_datetime, true, false) }}\r\n\r\n{% endfor -%}\r\n)\r\n\r\nSELECT * FROM bridge\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.max_datetime", "macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.bridge_overlap_and_new_rows", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.1565878}, "macro.dbtvault.eff_sat": {"unique_id": "macro.dbtvault.eff_sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\eff_sat.sql", "original_file_path": "macros\\tables\\snowflake\\eff_sat.sql", "name": "eff_sat", "macro_sql": "{%- macro eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\r\n                                           src_start_date=src_start_date, src_end_date=src_end_date,\r\n                                           src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_dfk = dbtvault.escape_column_names(src_dfk) -%}\r\n    {%- set src_sfk = dbtvault.escape_column_names(src_sfk) -%}\r\n\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n\r\n    {%- set src_start_date = dbtvault.escape_column_names(src_start_date) -%}\r\n    {%- set src_end_date = dbtvault.escape_column_names(src_end_date) -%}\r\n    {%- set src_eff = dbtvault.escape_column_names(src_eff) -%}\r\n\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('eff_sat', 'dbtvault')(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\r\n                                               src_extra_columns=src_extra_columns,\r\n                                               src_start_date=src_start_date, src_end_date=src_end_date,\r\n                                               src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                               source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.1722186}, "macro.dbtvault.default__eff_sat": {"unique_id": "macro.dbtvault.default__eff_sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\eff_sat.sql", "original_file_path": "macros\\tables\\snowflake\\eff_sat.sql", "name": "default__eff_sat", "macro_sql": "{%- macro default__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = dbtvault.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records AS (\r\n    SELECT * FROM (\r\n        SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\r\n               ROW_NUMBER() OVER (\r\n                    PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\r\n                    ORDER BY b.{{ src_ldts }} DESC\r\n               ) AS row_num\r\n        FROM {{ this }} AS b\r\n    ) AS inner\r\n    WHERE row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE TO_DATE(c.{{ src_end_date }}) = TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE TO_DATE(d.{{ src_end_date }}) != TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'f') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'f') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lc') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'g') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE TO_DATE(g.{{ src_end_date }}) = TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'h') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN latest_open AS lo\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['lo', 'h'], condition='=') }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['lc', 'h'], condition='=') }}\r\n    WHERE TO_DATE(h.{{ src_end_date }}) != TO_DATE('{{ max_datetime }}')\r\n    AND {{ dbtvault.multikey(src_pk, prefix='lo', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(src_pk, prefix='lc', condition='IS NULL') }}\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION\r\n    SELECT * FROM new_reopened_records\r\n    UNION\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not dbtvault.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not dbtvault.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT * FROM records_to_insert\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.2034738}, "macro.dbtvault.hub": {"unique_id": "macro.dbtvault.hub", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\hub.sql", "original_file_path": "macros\\tables\\snowflake\\hub.sql", "name": "hub", "macro_sql": "{%- macro hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_nk=src_nk,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_nk = dbtvault.escape_column_names(src_nk) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {%- if not dbtvault.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ dbtvault.log_relation_sources(this, source_model | length) }}\r\n\r\n    {{- dbtvault.prepend_generated_by() -}}\r\n\r\n    {{- adapter.dispatch('hub', 'dbtvault')(src_pk=src_pk, src_nk=src_nk,\r\n                                            src_extra_columns=src_extra_columns,\r\n                                            src_ldts=src_ldts, src_source=src_source,\r\n                                            source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.is_list", "macro.dbtvault.log_relation_sources", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__hub"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.2034738}, "macro.dbtvault.default__hub": {"unique_id": "macro.dbtvault.default__hub", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\hub.sql", "original_file_path": "macros\\tables\\snowflake\\hub.sql", "name": "default__hub", "macro_sql": "{%- macro default__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.2191281}, "macro.dbtvault.link": {"unique_id": "macro.dbtvault.link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\link.sql", "original_file_path": "macros\\tables\\snowflake\\link.sql", "name": "link", "macro_sql": "{%- macro link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_fk=src_fk,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_fk = dbtvault.escape_column_names(src_fk) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {%- if not dbtvault.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ dbtvault.log_relation_sources(this, source_model | length) }}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('link', 'dbtvault')(src_pk=src_pk, src_fk=src_fk,\r\n                                             src_extra_columns=src_extra_columns,\r\n                                             src_ldts=src_ldts, src_source=src_source,\r\n                                             source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.is_list", "macro.dbtvault.log_relation_sources", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__link"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.2347572}, "macro.dbtvault.default__link": {"unique_id": "macro.dbtvault.default__link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\link.sql", "original_file_path": "macros\\tables\\snowflake\\link.sql", "name": "default__link", "macro_sql": "{%- macro default__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.2503855}, "macro.dbtvault.ma_sat": {"unique_id": "macro.dbtvault.ma_sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\ma_sat.sql", "original_file_path": "macros\\tables\\snowflake\\ma_sat.sql", "name": "ma_sat", "macro_sql": "{%- macro ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\r\n                                           src_payload=src_payload, src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_cdk = dbtvault.escape_column_names(src_cdk) -%}\r\n\r\n    {%- set src_hashdiff = dbtvault.escape_column_names(src_hashdiff) -%}\r\n    {%- set src_payload = dbtvault.escape_column_names(src_payload) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n\r\n    {%- set src_eff = dbtvault.escape_column_names(src_eff) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('ma_sat', 'dbtvault')(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\r\n                                               src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                                               src_eff=src_eff, src_ldts=src_ldts,\r\n                                               src_source=src_source, source_model=source_model) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.2660172}, "macro.dbtvault.default__ma_sat": {"unique_id": "macro.dbtvault.default__ma_sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\ma_sat.sql", "original_file_path": "macros\\tables\\snowflake\\ma_sat.sql", "name": "default__ma_sat", "macro_sql": "\r\n\r\n{%- macro default__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{# Select unique source records #}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    {% if dbtvault.is_any_incremental() %}\r\n        ,COUNT(DISTINCT {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's', alias_target='source') }})\r\n            OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 's') }}) AS source_count\r\n    {% endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in cdk_cols %}\r\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }},\r\n           mas.latest_rank,\r\n           DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\r\n                              ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ dbtvault.prefix(cdk_cols, 'mas') }} ASC\r\n           ) AS check_rank\r\n    FROM (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\r\n           RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\r\n                        ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC\r\n           ) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n        INNER JOIN (\r\n            SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}\r\n            FROM source_data as s\r\n        ) AS spk\r\n            ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n            QUALIFY latest_rank = 1\r\n    ) AS mas\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }},\r\n           {{ dbtvault.prefix([src_ldts], 'lr') }},\r\n           MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }},\r\n                lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n                AND {{ dbtvault.multikey(cdk_cols, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.is_any_incremental", "macro.dbtvault.multikey", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.2816274}, "macro.dbtvault.pit": {"unique_id": "macro.dbtvault.pit", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\pit.sql", "original_file_path": "macros\\tables\\snowflake\\pit.sql", "name": "pit", "macro_sql": "{%- macro pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n    {%- if dbtvault.is_something(src_extra_columns) and execute -%}\r\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\r\n    {%- endif -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           satellites=satellites,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n\r\n    {{- dbtvault.prepend_generated_by() }}\r\n\r\n    {%- for stg in stage_tables_ldts %}\r\n        {{ \"-- depends_on: \" ~ ref(stg) -}}\r\n    {%- endfor -%}\r\n\r\n    {{ adapter.dispatch('pit', 'dbtvault')(src_pk=src_pk,\r\n                                           src_extra_columns=src_extra_columns,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           satellites=satellites,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__pit"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.3128867}, "macro.dbtvault.default__pit": {"unique_id": "macro.dbtvault.default__pit", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\pit.sql", "original_file_path": "macros\\tables\\snowflake\\pit.sql", "name": "default__pit", "macro_sql": "{%- macro default__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n{#- Acquiring the source relation for the AS_OF table -#}\r\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n    {%- set source_name = as_of_dates_table | first -%}\r\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\r\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\r\n{%- endif -%}\r\n\r\n{#- Setting ghost values to replace NULLS -#}\r\n{%- set ghost_pk = '0000000000000000' -%}\r\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\r\n\r\n{%- if dbtvault.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT * FROM {{ as_of_table_relation }}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\nbackfill_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM new_rows_pks AS a\r\n    INNER JOIN backfill_as_of AS b\r\n        ON (1=1)\r\n),\r\n\r\nbackfill AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_name = sat_name %}\r\n\r\n        {% if target.type == \"sqlserver\" %}\r\n        CONVERT({{ dbtvault.type_binary() }}, '{{ ghost_pk }}', 2) AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_pk_name)) }},\r\n        CAST('{{ ghost_date }}' AS {{ dbtvault.type_timestamp() }}) AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_ldts_name)) }}\r\n        {% else %}\r\n        CAST('{{ ghost_pk }}' AS {{ dbtvault.type_binary() }}) AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_pk_name)) }},\r\n        CAST('{{ ghost_date }}' AS {{ dbtvault.type_timestamp() }}) AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_ldts_name)) }}\r\n        {% endif -%}\r\n\r\n\r\n        {{- ',' if not loop.last -}}\r\n\r\n    {%- endfor %}\r\n    FROM backfill_rows_as_of_dates AS a\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\r\n        ON a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\r\n        AND {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n),\r\n{%- endif %}\r\n\r\nnew_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM {{ ref(source_model) }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n    ON (1=1)\r\n),\r\n\r\nnew_rows AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n    {%- for sat_name in satellites %}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n\r\n        {%- if target.type == \"sqlserver\" -%}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n                 CONVERT({{ dbtvault.type_binary() }}, '{{ ghost_pk }}', 2))\r\n        AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_pk_name)) }},\r\n\r\n        {%- else %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n                 CAST('{{ ghost_pk }}' AS {{ dbtvault.type_binary() }}))\r\n        AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_pk_name)) }},\r\n\r\n        {%- endif %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n                 CAST('{{ ghost_date }}' AS {{ dbtvault.type_timestamp() }}))\r\n        AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_ldts_name)) }}\r\n\r\n        {{- \",\" if not loop.last }}\r\n    {%- endfor %}\r\n\r\n    FROM new_rows_as_of_dates AS a\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src'}}\r\n        ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\r\n        AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE\r\n),\r\n\r\npit AS (\r\n    SELECT * FROM new_rows\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap_pks\r\n    UNION ALL\r\n    SELECT * FROM backfill\r\n    {% endif %}\r\n)\r\n\r\nSELECT DISTINCT * FROM pit\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.prefix", "macro.dbtvault.type_binary", "macro.dbtvault.escape_column_names", "macro.dbtvault.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.3285172}, "macro.dbtvault.sat": {"unique_id": "macro.dbtvault.sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\sat.sql", "original_file_path": "macros\\tables\\snowflake\\sat.sql", "name": "sat", "macro_sql": "{%- macro sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_hashdiff=src_hashdiff, src_payload=src_payload,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_payload = dbtvault.process_payload_column_excludes(\r\n                      src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                      src_payload=src_payload, src_extra_columns=src_extra_columns, src_eff=src_eff,\r\n                      src_ldts=src_ldts, src_source=src_source, source_model=source_model) -%}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_hashdiff = dbtvault.escape_column_names(src_hashdiff) -%}\r\n\r\n    {%- set src_payload = dbtvault.escape_column_names(src_payload) -%}\r\n\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_eff = dbtvault.escape_column_names(src_eff) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('sat', 'dbtvault')(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                                           src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                                           src_eff=src_eff, src_ldts=src_ldts,\r\n                                           src_source=src_source, source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.process_payload_column_excludes", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.3441472}, "macro.dbtvault.default__sat": {"unique_id": "macro.dbtvault.default__sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\sat.sql", "original_file_path": "macros\\tables\\snowflake\\sat.sql", "name": "default__sat", "macro_sql": "{%- macro default__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set window_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set pk_cols = dbtvault.expand_column_list(columns=[src_pk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'a', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {% endif %}\r\n),\r\n\r\n{% if dbtvault.is_any_incremental() %}\r\n\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(window_cols, 'a', alias_target='target') }}\r\n    FROM (\r\n        SELECT {{ dbtvault.prefix(window_cols, 'current_records', alias_target='target') }},\r\n            RANK() OVER (\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'current_records') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'current_records') }} DESC\r\n            ) AS rank\r\n        FROM {{ this }} AS current_records\r\n            JOIN (\r\n                SELECT DISTINCT {{ dbtvault.prefix([src_pk], 'source_data') }}\r\n                FROM source_data\r\n            ) AS source_records\r\n                ON {{ dbtvault.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\r\n    ) AS a\r\n    WHERE a.rank = 1\r\n),\r\n\r\n{%- endif -%}\r\n\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT {{ dbtvault.alias_all(source_cols, 'stage') }}\r\n    FROM source_data AS stage\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN latest_records\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\r\n        AND {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} = {{ dbtvault.prefix([src_hashdiff], 'stage') }}\r\n    WHERE {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.3441472}, "macro.dbtvault.t_link": {"unique_id": "macro.dbtvault.t_link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\t_link.sql", "original_file_path": "macros\\tables\\snowflake\\t_link.sql", "name": "t_link", "macro_sql": "{%- macro t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_fk=src_fk, src_eff=src_eff,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_fk = dbtvault.escape_column_names(src_fk) -%}\r\n    {%- set src_payload = dbtvault.escape_column_names(src_payload) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_eff = dbtvault.escape_column_names(src_eff) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('t_link', 'dbtvault')(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                                               src_extra_columns=src_extra_columns,\r\n                                               src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                               source_model=source_model) -}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__t_link"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.3597767}, "macro.dbtvault.default__t_link": {"unique_id": "macro.dbtvault.default__t_link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\t_link.sql", "original_file_path": "macros\\tables\\snowflake\\t_link.sql", "name": "default__t_link", "macro_sql": "\r\n\r\n{%- macro default__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) %}\r\n\r\nWITH stage AS (\r\n    SELECT {{ source_cols | join(', ') }}\r\n    FROM {{ ref(source_model) }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    WHERE __PERIOD_FILTER__\r\n    AND {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    WHERE __RANK_FILTER__\r\n    AND {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- else %}\r\n    WHERE {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n),\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 'stg') }}\r\n    FROM stage AS stg\r\n    {% if dbtvault.is_any_incremental() -%}\r\n    LEFT JOIN {{ this }} AS tgt\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['stg','tgt'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='tgt', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.multikey", "macro.dbtvault.prefix", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.3597767}, "macro.dbtvault.xts": {"unique_id": "macro.dbtvault.xts", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\xts.sql", "original_file_path": "macros\\tables\\snowflake\\xts.sql", "name": "xts", "macro_sql": "{%- macro xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_satellite=src_satellite,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {%- if not dbtvault.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('xts', 'dbtvault')(src_pk=src_pk,\r\n                                            src_satellite=src_satellite,\r\n                                            src_extra_columns=src_extra_columns,\r\n                                            src_ldts=src_ldts,\r\n                                            src_source=src_source,\r\n                                            source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.is_list", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.bigquery__xts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.3754187}, "macro.dbtvault.default__xts": {"unique_id": "macro.dbtvault.default__xts", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\snowflake\\xts.sql", "original_file_path": "macros\\tables\\snowflake\\xts.sql", "name": "default__xts", "macro_sql": "{%- macro default__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set hashdiff_escaped = dbtvault.escape_column_names('HASHDIFF') -%}\r\n{%- set satellite_name_escaped = dbtvault.escape_column_names('SATELLITE_NAME') %}\r\n{%- set satellite_count = src_satellite.keys() | list | length %}\r\n{%- set stage_count = source_model | length %}\r\n\r\n{%- if execute -%}\r\n    {%- do dbt_utils.log_info('Loading {} from {} source(s) and {} satellite(s)'.format(\"{}.{}.{}\".format(this.database, this.schema, this.identifier),\r\n                                                                                       stage_count, satellite_count)) -%}\r\n{%- endif %}\r\n\r\n{%- set ns = namespace(last_cte= \"\") %}\r\n\r\n{{ 'WITH ' }}\r\n{%- for src in source_model -%}\r\n    {%- for satellite in src_satellite.items() -%}\r\n        {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0] -%}\r\n        {%- set hashdiff = (satellite[1]['hashdiff'].values() | list)[0] %}\r\n        {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\r\n\r\n{{ cte_name }} AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 's') }},\r\n           s.{{ dbtvault.escape_column_names(hashdiff) }} AS {{ hashdiff_escaped }},\r\n           s.{{ dbtvault.escape_column_names(satellite_name) }} AS {{ satellite_name_escaped }},\r\n           {%- if dbtvault.is_something(src_extra_columns) -%}\r\n               {{ dbtvault.prefix([src_extra_columns], 's') }},\r\n           {%- endif %}\r\n           s.{{ src_ldts }},\r\n           s.{{ src_source }}\r\n    FROM {{ ref(src) }} AS s\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\r\n),\r\n\r\n    {%- set ns.last_cte = cte_name %}\r\n    {%- endfor %}\r\n{%- endfor %}\r\n\r\n{%- if stage_count > 1 or satellite_count > 1 %}\r\n\r\nunion_satellites AS (\r\n    {%- for src in source_model %}\r\n        {%- for satellite in src_satellite.items() %}\r\n            {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0]  %}\r\n            {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\r\n    SELECT * FROM {{ cte_name }}\r\n            {%- if not loop.last %}\r\n    UNION ALL\r\n            {%- endif %}\r\n        {%- endfor %}\r\n        {%- if not loop.last %}\r\n    UNION ALL\r\n        {%- endif %}\r\n    {%- endfor %}\r\n),\r\n{%- set ns.last_cte = \"union_satellites\" -%}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.{{ hashdiff_escaped }},\r\n        a.{{ satellite_name_escaped }} ,\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n            {{ dbtvault.prefix([src_extra_columns], 'a') }},\r\n        {%- endif %}\r\n        a.{{ src_ldts }},\r\n        a.{{ src_source }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n        ON (\r\n            a.{{ hashdiff_escaped }} = d.{{ hashdiff_escaped }}\r\n            AND a.{{ src_ldts }} = d.{{ src_ldts }}\r\n            AND a.{{ satellite_name_escaped }} = d.{{ satellite_name_escaped }}\r\n        )\r\n    WHERE d.{{ hashdiff_escaped }} IS NULL\r\n    AND d.{{ src_ldts }} IS NULL\r\n    AND d.{{ satellite_name_escaped }} IS NULL\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.escape_column_names", "macro.dbt_utils.log_info", "macro.dbtvault.prefix", "macro.dbtvault.is_something", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.391048}, "macro.dbtvault.sqlserver__bridge": {"unique_id": "macro.dbtvault.sqlserver__bridge", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\bridge.sql", "original_file_path": "macros\\tables\\sqlserver\\bridge.sql", "name": "sqlserver__bridge", "macro_sql": "{%- macro sqlserver__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\r\n\r\n{{ dbtvault.default__bridge(src_pk=src_pk,\r\n                            as_of_dates_table=as_of_dates_table,\r\n                            bridge_walk=bridge_walk,\r\n                            stage_tables_ldts=stage_tables_ldts,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_ldts=src_ldts,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.391048}, "macro.dbtvault.sqlserver__eff_sat": {"unique_id": "macro.dbtvault.sqlserver__eff_sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\eff_sat.sql", "original_file_path": "macros\\tables\\sqlserver\\eff_sat.sql", "name": "sqlserver__eff_sat", "macro_sql": "{%- macro sqlserver__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = dbtvault.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n        SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\r\n               ROW_NUMBER() OVER (\r\n                    PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\r\n                    ORDER BY b.{{ src_ldts }} DESC\r\n               ) AS row_num\r\n        FROM {{ this }} AS b\r\n    ) l\r\n    WHERE l.row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE CONVERT(DATE, c.{{ src_end_date }}) = CONVERT(DATE, '{{ max_datetime }}')\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE CONVERT(DATE, d.{{ src_end_date }}) != CONVERT(DATE, '{{ max_datetime }}')\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'f') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n        {{ dbtvault.prefix([src_extra_columns], 'f') }},\r\n        {%- endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lc') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n        {{ dbtvault.prefix([src_extra_columns], 'g') }},\r\n        {%- endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE CAST((g.{{ src_end_date }}) AS DATE) = CAST(('{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n        {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {%- endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n        {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {%- endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN Latest_open AS lo\r\n    ON lo.{{ src_pk }} = h.{{ src_pk }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON lc.{{ src_pk }} = h.{{ src_pk }}\r\n    WHERE CAST((h.{{ src_end_date }}) AS DATE) != CAST(('{{ max_datetime }}') AS DATE)\r\n    AND lo.{{ src_pk }} IS NOT NULL\r\n    AND lc.{{ src_pk }} IS NULL\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION\r\n    SELECT * FROM new_reopened_records\r\n    UNION\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not dbtvault.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not dbtvault.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT * FROM records_to_insert\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.422292}, "macro.dbtvault.sqlserver__hub": {"unique_id": "macro.dbtvault.sqlserver__hub", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\hub.sql", "original_file_path": "macros\\tables\\sqlserver\\hub.sql", "name": "sqlserver__hub", "macro_sql": "{%- macro sqlserver__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ source_cols_with_rank | join(', ') }}\r\n    {%- else %}\r\n    SELECT {{ source_cols | join(', ') }}\r\n    {%- endif %}\r\n    FROM (\r\n        {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n        SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n        {%- else %}\r\n        SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n        {%- endif %}\r\n               ROW_NUMBER() OVER(\r\n                   PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n                   ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n               ) AS row_number\r\n        FROM {{ ref(src) }} AS rr\r\n        WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    ) h\r\n    WHERE h.row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT *\r\n    FROM (\r\n        SELECT ru.*,\r\n               ROW_NUMBER() OVER(\r\n                   PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n                   ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n               ) AS row_rank_number\r\n        FROM {{ ns.last_cte }} AS ru\r\n        WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    ) h\r\n    WHERE h.row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.4379485}, "macro.dbtvault.sqlserver__link": {"unique_id": "macro.dbtvault.sqlserver__link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\link.sql", "original_file_path": "macros\\tables\\sqlserver\\link.sql", "name": "sqlserver__link", "macro_sql": "{%- macro sqlserver__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif -%}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n    ) l\r\n    WHERE l.row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    ) r\r\n    WHERE r.row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.4535773}, "macro.dbtvault.sqlserver__ma_sat": {"unique_id": "macro.dbtvault.sqlserver__ma_sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\ma_sat.sql", "original_file_path": "macros\\tables\\sqlserver\\ma_sat.sql", "name": "sqlserver__ma_sat", "macro_sql": "{%- macro sqlserver__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{# Select unique source records -#}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in src_cdk %}\r\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n\r\nsource_data_with_count AS (\r\n    SELECT a.*\r\n        ,b.source_count\r\n    FROM source_data a\r\n    INNER JOIN\r\n    (\r\n        SELECT {{ dbtvault.prefix([src_pk], 't') }}\r\n            ,COUNT(*) AS source_count\r\n        FROM (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}, {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\r\n        GROUP BY {{ dbtvault.prefix([src_pk], 't') }}\r\n    ) AS b\r\n    ON {{ dbtvault.multikey([src_pk], prefix=['a','b'], condition='=') }}\r\n),\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }}\r\n        ,mas.latest_rank\r\n        ,DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\r\n            ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ dbtvault.prefix([src_cdk], 'mas') }} ASC) AS check_rank\r\n    FROM\r\n    (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }}\r\n        ,RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\r\n            ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n    INNER JOIN (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\r\n        ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n    ) AS mas\r\n    WHERE latest_rank = 1\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }}\r\n        ,{{ dbtvault.prefix([src_ldts], 'lr') }}\r\n        ,MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n{% if not dbtvault.is_any_incremental() %}\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n{%- endif %}\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data_with_count') }}\r\n    FROM source_data_with_count\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data_with_count AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }}\r\n                ,lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\r\n{#        AND {{ dbtvault.prefix([src_ldts], 'stage') }} = {{ dbtvault.prefix([src_ldts], 'active_records') }} #}\r\n                AND {{ dbtvault.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data_with_count', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.4848406}, "macro.dbtvault.sqlserver__pit": {"unique_id": "macro.dbtvault.sqlserver__pit", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\pit.sql", "original_file_path": "macros\\tables\\sqlserver\\pit.sql", "name": "sqlserver__pit", "macro_sql": "{%- macro sqlserver__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n{{ dbtvault.default__pit(src_pk=src_pk,\r\n                         src_extra_columns=src_extra_columns,\r\n                         as_of_dates_table=as_of_dates_table,\r\n                         satellites=satellites,\r\n                         stage_tables_ldts=stage_tables_ldts,\r\n                         src_ldts=src_ldts,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.4848406}, "macro.dbtvault.sqlserver__sat": {"unique_id": "macro.dbtvault.sqlserver__sat", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\sat.sql", "original_file_path": "macros\\tables\\sqlserver\\sat.sql", "name": "sqlserver__sat", "macro_sql": "{%- macro sqlserver__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{ dbtvault.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                             src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                             src_eff=src_eff, src_ldts=src_ldts,\r\n                             src_source=src_source, source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.4848406}, "macro.dbtvault.sqlserver__t_link": {"unique_id": "macro.dbtvault.sqlserver__t_link", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\t_link.sql", "original_file_path": "macros\\tables\\sqlserver\\t_link.sql", "name": "sqlserver__t_link", "macro_sql": "{%- macro sqlserver__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.500473}, "macro.dbtvault.biquery__xts": {"unique_id": "macro.dbtvault.biquery__xts", "package_name": "dbtvault", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbtvault", "path": "macros\\tables\\sqlserver\\xts.sql", "original_file_path": "macros\\tables\\sqlserver\\xts.sql", "name": "biquery__xts", "macro_sql": "{%- macro biquery__xts(src_pk, src_satellite, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__xts(src_pk=src_pk,\r\n                         src_satellite=src_satellite,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbtvault.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.500473}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\r\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\r\n    {%- do exceptions.warn(error_message) -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.500473}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\r\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.500473}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\r\n\r\nwith meet_condition as(\r\n  select *\r\n  from {{ model }}\r\n),\r\n\r\nvalidation_errors as (\r\n  select *\r\n  from meet_condition\r\n  where\r\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\r\n    1 = 2\r\n\r\n  {%- if min_value is not none %}\r\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\r\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\r\n  {%- endif %}\r\n\r\n  {%- if max_value is not none %}\r\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\r\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\r\n  {%- endif %}\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.500473}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.500473}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\nselect *\r\nfrom (\r\n    select\r\n        {# In TSQL, subquery aggregate columns need aliases #}\r\n        {# thus: a filler col name, 'filler_column' #}\r\n      {{select_gb_cols}}\r\n      count({{ column_name }}) as filler_column\r\n\r\n    from {{ model }}\r\n\r\n    {{groupby_gb_cols}}\r\n\r\n    having count({{ column_name }}) = 0\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5161033}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\r\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5161033}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\r\n\r\n{# T-SQL does not let you use numbers as aliases for columns #}\r\n{# Thus, no \"GROUP BY 1\" #}\r\n\r\nwith table_a as (\r\nselect\r\n  {{ column_name }},\r\n  count(*) as num_rows\r\nfrom {{ model }}\r\ngroup by {{ column_name }}\r\n),\r\n\r\ntable_b as (\r\nselect\r\n  {{ field }},\r\n  count(*) as num_rows\r\nfrom {{ to }}\r\ngroup by {{ field }}\r\n),\r\n\r\nexcept_a as (\r\n  select *\r\n  from table_a\r\n  {{ except() }}\r\n  select *\r\n  from table_b\r\n),\r\n\r\nexcept_b as (\r\n  select *\r\n  from table_b\r\n  {{ except() }}\r\n  select *\r\n  from table_a\r\n),\r\n\r\nunioned as (\r\n  select *\r\n  from except_a\r\n  union all\r\n  select *\r\n  from except_b\r\n)\r\n\r\nselect *\r\nfrom unioned\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5161033}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\r\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5161033}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\r\n\r\n{% set set_diff %}\r\n    count(*) + coalesce(abs(\r\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\r\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\r\n    ), 0)\r\n{% endset %}\r\n\r\n{#-- Needs to be set at parse time, before we return '' below --#}\r\n{{ config(fail_calc = set_diff) }}\r\n\r\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n{%- if not execute -%}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\n-- setup\r\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\r\n\r\n{#-\r\nIf the compare_cols arg is provided, we can run this test without querying the\r\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\r\n-#}\r\n\r\n{%- if not compare_columns -%}\r\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\r\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\r\n{%- endif -%}\r\n\r\n{% set compare_cols_csv = compare_columns | join(', ') %}\r\n\r\nwith a as (\r\n\r\n    select * from {{ model }}\r\n\r\n),\r\n\r\nb as (\r\n\r\n    select * from {{ compare_model }}\r\n\r\n),\r\n\r\na_minus_b as (\r\n\r\n    select {{compare_cols_csv}} from a\r\n    {{ except() }}\r\n    select {{compare_cols_csv}} from b\r\n\r\n),\r\n\r\nb_minus_a as (\r\n\r\n    select {{compare_cols_csv}} from b\r\n    {{ except() }}\r\n    select {{compare_cols_csv}} from a\r\n\r\n),\r\n\r\nunioned as (\r\n\r\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\r\n    union all\r\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\r\n\r\n)\r\n\r\nselect * from unioned\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5161033}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5161033}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\r\n\r\n{#-- Needs to be set at parse time, before we return '' below --#}\r\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\r\n\r\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n{%- if not execute -%}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\r\n  {% set join_gb_cols %}\r\n    {% for c in group_by_columns %}\r\n      and a.{{c}} = b.{{c}}\r\n    {% endfor %}\r\n  {% endset %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\r\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\r\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\r\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\r\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n\r\nwith a as (\r\n\r\n    select \r\n      {{select_gb_cols}}\r\n      1 as id_dbtutils_test_equal_rowcount,\r\n      count(*) as count_a \r\n    from {{ model }}\r\n    {{groupby_gb_cols}}\r\n\r\n\r\n),\r\nb as (\r\n\r\n    select \r\n      {{select_gb_cols}}\r\n      1 as id_dbtutils_test_equal_rowcount,\r\n      count(*) as count_b \r\n    from {{ compare_model }}\r\n    {{groupby_gb_cols}}\r\n\r\n),\r\nfinal as (\r\n\r\n    select\r\n    \r\n        {% for c in group_by_columns -%}\r\n          a.{{c}} as {{c}}_a,\r\n          b.{{c}} as {{c}}_b,\r\n        {% endfor %}\r\n\r\n        count_a,\r\n        count_b,\r\n        abs(count_a - count_b) as diff_count\r\n\r\n    from a\r\n    full join b\r\n    on\r\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\r\n    {{join_gb_cols}}\r\n\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5317254}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\r\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\r\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\r\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5317254}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\r\n\r\n{% set column_list = '*' if should_store_failures() else \"1\" %}\r\n\r\nwith meet_condition as (\r\n    select * from {{ model }} where {{ condition }}\r\n)\r\n\r\nselect\r\n    {{ column_list }}\r\nfrom meet_condition\r\n{% if column_name is none %}\r\nwhere not({{ expression }})\r\n{%- else %}\r\nwhere not({{ column_name }} {{ expression }})\r\n{%- endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5317254}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5317254}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\r\n\r\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set join_gb_cols %}\r\n    {% for c in group_by_columns %}\r\n      and a.{{c}} = b.{{c}}\r\n    {% endfor %}\r\n  {% endset %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\r\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\r\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\r\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\r\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n\r\n\r\nwith a as (\r\n\r\n    select \r\n      {{select_gb_cols}}\r\n      1 as id_dbtutils_test_fewer_rows_than,\r\n      count(*) as count_our_model \r\n    from {{ model }}\r\n    {{ groupby_gb_cols }}\r\n\r\n),\r\nb as (\r\n\r\n    select \r\n      {{select_gb_cols}}\r\n      1 as id_dbtutils_test_fewer_rows_than,\r\n      count(*) as count_comparison_model \r\n    from {{ compare_model }}\r\n    {{ groupby_gb_cols }}\r\n\r\n),\r\ncounts as (\r\n\r\n    select\r\n\r\n        {% for c in group_by_columns -%}\r\n          a.{{c}} as {{c}}_a,\r\n          b.{{c}} as {{c}}_b,\r\n        {% endfor %}\r\n\r\n        count_our_model,\r\n        count_comparison_model\r\n    from a\r\n    full join b on \r\n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\r\n    {{ join_gb_cols }}\r\n\r\n),\r\nfinal as (\r\n\r\n    select *,\r\n        case\r\n            -- fail the test if we have more rows than the reference model and return the row count delta\r\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\r\n            -- fail the test if they are the same number\r\n            when count_our_model = count_comparison_model then 1\r\n            -- pass the test if the delta is positive (i.e. return the number 0)\r\n            else 0\r\n    end as row_count_delta\r\n    from counts\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5317254}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\r\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5473542}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\r\n{% if gaps == 'not_allowed' %}\r\n    {% set allow_gaps_operator='=' %}\r\n    {% set allow_gaps_operator_in_words='equal_to' %}\r\n{% elif gaps == 'allowed' %}\r\n    {% set allow_gaps_operator='<=' %}\r\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\r\n{% elif gaps == 'required' %}\r\n    {% set allow_gaps_operator='<' %}\r\n    {% set allow_gaps_operator_in_words='less_than' %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n{% if not zero_length_range_allowed %}\r\n    {% set allow_zero_length_operator='<' %}\r\n    {% set allow_zero_length_operator_in_words='less_than' %}\r\n{% elif zero_length_range_allowed %}\r\n    {% set allow_zero_length_operator='<=' %}\r\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\r\n\r\nwith window_functions as (\r\n\r\n    select\r\n        {% if partition_by %}\r\n        {{ partition_by }} as partition_by_col,\r\n        {% endif %}\r\n        {{ lower_bound_column }} as lower_bound,\r\n        {{ upper_bound_column }} as upper_bound,\r\n\r\n        lead({{ lower_bound_column }}) over (\r\n            {{ partition_clause }}\r\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\r\n        ) as next_lower_bound,\r\n\r\n        row_number() over (\r\n            {{ partition_clause }}\r\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\r\n        ) = 1 as is_last_record\r\n\r\n    from {{ model }}\r\n\r\n),\r\n\r\ncalc as (\r\n    -- We want to return records where one of our assumptions fails, so we'll use\r\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\r\n    select\r\n        *,\r\n\r\n        -- For each record: lower_bound should be < upper_bound.\r\n        -- Coalesce it to return an error on the null case (implicit assumption\r\n        -- these columns are not_null)\r\n        coalesce(\r\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\r\n            false\r\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\r\n\r\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\r\n        -- Coalesce it to handle null cases for the last record.\r\n        coalesce(\r\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\r\n            is_last_record,\r\n            false\r\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\r\n\r\n    from window_functions\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from calc\r\n\r\n    where not(\r\n        -- THE FOLLOWING SHOULD BE TRUE --\r\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\r\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\r\n    )\r\n)\r\n\r\nselect * from validation_errors\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5473542}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\r\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5629833}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        value_field\r\n\r\n    from all_values\r\n    where value_field in (\r\n        {% for value in values -%}\r\n            {% if quote -%}\r\n            '{{ value }}'\r\n            {%- else -%}\r\n            {{ value }}\r\n            {%- endif -%}\r\n            {%- if not loop.last -%},{%- endif %}\r\n        {%- endfor %}\r\n        )\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5629833}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5629833}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\n\r\nselect\r\n    {# In TSQL, subquery aggregate columns need aliases #}\r\n    {# thus: a filler col name, 'filler_column' #}\r\n    {{select_gb_cols}}\r\n    count(distinct {{ column_name }}) as filler_column\r\n\r\nfrom {{ model }}\r\n\r\n  {{groupby_gb_cols}}\r\n\r\nhaving count(distinct {{ column_name }}) = 1\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5629833}, "macro.dbt_utils.test_not_empty_string": {"unique_id": "macro.dbt_utils.test_not_empty_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "name": "test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\r\n\r\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5785906}, "macro.dbt_utils.default__test_not_empty_string": {"unique_id": "macro.dbt_utils.default__test_not_empty_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "name": "default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\r\n\r\n    with\r\n    \r\n    all_values as (\r\n\r\n        select \r\n\r\n\r\n            {% if trim_whitespace == true -%}\r\n\r\n                trim({{ column_name }}) as {{ column_name }}\r\n\r\n            {%- else -%}\r\n\r\n                {{ column_name }}\r\n\r\n            {%- endif %}\r\n            \r\n        from {{ model }}\r\n\r\n    ),\r\n\r\n    errors as (\r\n\r\n        select * from all_values\r\n        where {{ column_name }} = ''\r\n\r\n    )\r\n\r\n    select * from errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5785906}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5785906}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\r\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\nwith validation as (\r\n  select\r\n    {{select_gb_cols}}\r\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\r\n  from {{ model }}\r\n  {{groupby_gb_cols}}\r\n),\r\nvalidation_errors as (\r\n  select\r\n    {{select_gb_cols}}\r\n    not_null_proportion\r\n  from validation\r\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\r\n)\r\nselect\r\n  *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5785906}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, group_by_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5785906}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, group_by_columns) %}\r\n\r\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\n\r\nwith recency as (\r\n\r\n    select \r\n\r\n      {{ select_gb_cols }}\r\n      max({{field}}) as most_recent\r\n\r\n    from {{ model }}\r\n\r\n    {{ groupby_gb_cols }}\r\n\r\n)\r\n\r\nselect\r\n\r\n    {{ select_gb_cols }}\r\n    most_recent,\r\n    {{ threshold }} as threshold\r\n\r\nfrom recency\r\nwhere most_recent < {{ threshold }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbtvault.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5785906}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\r\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.5785906}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\r\n\r\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\r\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\r\n\r\nwith left_table as (\r\n\r\n  select\r\n    {{column_name}} as id\r\n\r\n  from {{model}}\r\n\r\n  where {{column_name}} is not null\r\n    and {{from_condition}}\r\n\r\n),\r\n\r\nright_table as (\r\n\r\n  select\r\n    {{field}} as id\r\n\r\n  from {{to}}\r\n\r\n  where {{field}} is not null\r\n    and {{to_condition}}\r\n\r\n),\r\n\r\nexceptions as (\r\n\r\n  select\r\n    left_table.id,\r\n    right_table.id as right_id\r\n\r\n  from left_table\r\n\r\n  left join right_table\r\n         on left_table.id = right_table.id\r\n\r\n  where right_table.id is null\r\n\r\n)\r\n\r\nselect * from exceptions\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.594245}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\r\n\r\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.594245}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\r\n\r\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\r\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\nwith windowed as (\r\n\r\n    select\r\n        {{ select_gb_cols }}\r\n        {{ column_name }},\r\n        lag({{ column_name }}) over (\r\n            {{partition_gb_cols}}\r\n            order by {{ column_name }}\r\n        ) as {{ previous_column_name }}\r\n    from {{ model }}\r\n),\r\n\r\nvalidation_errors as (\r\n    select\r\n        *\r\n    from windowed\r\n    {% if datepart %}\r\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\r\n    {% else %}\r\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\r\n    {% endif %}\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbtvault.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.594245}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\r\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.594245}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set column_list=combination_of_columns %}\r\n{% elif quote_columns %}\r\n    {%- set column_list=[] %}\r\n        {% for column in combination_of_columns -%}\r\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{%- set columns_csv=column_list | join(', ') %}\r\n\r\n\r\nwith validation_errors as (\r\n\r\n    select\r\n        {{ columns_csv }}\r\n    from {{ model }}\r\n    group by {{ columns_csv }}\r\n    having count(*) > 1\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.594245}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\r\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.594245}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\r\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.594245}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\r\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\r\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\r\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\r\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\r\n\r\n{#- Lower case the string -#}\r\n{% set string = string | lower %}\r\n{#- Replace spaces and dashes with underscores -#}\r\n{% set string = modules.re.sub('[ -]+', '_', string) %}\r\n{#- Only take letters, numbers, and underscores -#}\r\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\r\n\r\n{{ return(string) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\r\n    {%- if obj.is_cte -%}\r\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\r\n        {% if obj.name.startswith(ephemeral_prefix) %}\r\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\r\n        {% else %}\r\n            {% set model_name = obj.name %}\r\n        {%- endif -%}\r\n        {% set error_message %}\r\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\r\n\r\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\r\n        {% endset %}\r\n        {%- do exceptions.raise_compiler_error(error_message) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\r\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\r\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\r\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\r\n    {%- call statement('get_intervals_between', fetch_result=True) %}\r\n\r\n        select {{ datediff(start_date, end_date, datepart) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_intervals_between') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values[0]) }}\r\n    {%- else -%}\r\n        {{ return(1) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6098733}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\r\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\r\n\r\n\r\n{# call as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n) #}\r\n\r\n\r\nwith rawdata as (\r\n\r\n    {{dbt_utils.generate_series(\r\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\r\n    )}}\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        {{\r\n            dateadd(\r\n                datepart,\r\n                \"row_number() over (order by 1) - 1\",\r\n                start_date\r\n            )\r\n        }}\r\n    ) as date_{{datepart}}\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_{{datepart}} <= {{ end_date }}\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\r\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\r\n\r\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    with row_numbered as (\r\n        select\r\n            _inner.*,\r\n            row_number() over (\r\n                partition by {{ partition_by }}\r\n                order by {{ order_by }}\r\n            ) as rn\r\n        from {{ relation }} as _inner\r\n    )\r\n\r\n    select\r\n        distinct data.*\r\n    from {{ relation }} as data\r\n    {#\r\n    -- Not all DBs will support natural joins but the ones that do include:\r\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\r\n    -- Apache Spark, SingleStore, Vertica\r\n    -- Those that do not appear to support natural joins include:\r\n    -- SQLServer, Trino, Presto, Rockset, Athena\r\n    #}\r\n    natural join row_numbered\r\n    where row_numbered.rn = 1\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\r\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select\r\n        distinct on ({{ partition_by }}) *\r\n    from {{ relation }}\r\n    order by {{ partition_by }}{{ ',' ~ order_by }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\r\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select *\r\n    from {{ relation }}\r\n    qualify\r\n        row_number() over (\r\n            partition by {{ partition_by }}\r\n            order by {{ order_by }}\r\n        ) = 1\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\r\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select unique.*\r\n    from (\r\n        select\r\n            array_agg (\r\n                original\r\n                order by {{ order_by }}\r\n                limit 1\r\n            )[offset(0)] unique\r\n        from {{ relation }} original\r\n        group by {{ partition_by }}\r\n    )\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\r\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\r\n\r\n    {% if upper_bound <= 0 %}\r\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\r\n    {% endif %}\r\n\r\n    {% for _ in range(1, 100) %}\r\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\r\n    {% endfor %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\r\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\r\n\r\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    {% for i in range(n) %}\r\n    p{{i}}.generated_number * power(2, {{i}})\r\n    {% if not loop.last %} + {% endif %}\r\n    {% endfor %}\r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    {% for i in range(n) %}\r\n    p as p{{i}}\r\n    {% if not loop.last %} cross join {% endif %}\r\n    {% endfor %}\r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= {{upper_bound}}\r\n    order by generated_number\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6254935}, "macro.dbt_utils.generate_surrogate_key": {"unique_id": "macro.dbt_utils.generate_surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "name": "generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\r\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6411238}, "macro.dbt_utils.default__generate_surrogate_key": {"unique_id": "macro.dbt_utils.default__generate_surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "name": "default__generate_surrogate_key", "macro_sql": "\r\n\r\n{%- macro default__generate_surrogate_key(field_list) -%}\r\n\r\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\r\n    {% set default_null_value = \"\" %}\r\n{% else %}\r\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\r\n{% endif %}\r\n\r\n{%- set fields = [] -%}\r\n\r\n{%- for field in field_list -%}\r\n\r\n    {%- do fields.append(\r\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\r\n    ) -%}\r\n\r\n    {%- if not loop.last %}\r\n        {%- do fields.append(\"'-'\") -%}\r\n    {%- endif -%}\r\n\r\n{%- endfor -%}\r\n\r\n{{ hash(concat(fields)) }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbtvault.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6411238}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\r\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6411238}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% set default = [] if not default %}\r\n        {{ return(default) }}\r\n    {% endif %}\r\n\r\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\r\n\r\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\r\n    {# TODO: Change the method signature in a future 0.x.0 release #}\r\n    {%- set target_relation = table -%}\r\n\r\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\r\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\r\n\r\n    {%- call statement('get_column_values', fetch_result=true) %}\r\n\r\n        {%- if not relation_exists and default is none -%}\r\n\r\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\r\n\r\n        {%- elif not relation_exists and default is not none -%}\r\n\r\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\r\n\r\n          {{ return(default) }}\r\n\r\n        {%- else -%}\r\n\r\n\r\n            select\r\n                {{ column }} as value\r\n\r\n            from {{ target_relation }}\r\n\r\n            {% if where is not none %}\r\n            where {{ where }}\r\n            {% endif %}\r\n\r\n            group by {{ column }}\r\n            order by {{ order_by }}\r\n\r\n            {% if max_records is not none %}\r\n            limit {{ max_records }}\r\n            {% endif %}\r\n\r\n        {% endif %}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_column_values') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values) }}\r\n    {%- else -%}\r\n        {{ return(default) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6411238}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\r\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6567402}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\r\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\r\n\r\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {{ return('') }}\r\n    {% endif %}\r\n\r\n    {%- set include_cols = [] %}\r\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\r\n    {%- set except = except | map(\"lower\") | list %}\r\n    {%- for col in cols -%}\r\n        {%- if col.column|lower not in except -%}\r\n            {% do include_cols.append(col.column) %}\r\n        {%- endif %}\r\n    {%- endfor %}\r\n\r\n    {{ return(include_cols) }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6567402}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\r\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6567402}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\r\n\r\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\r\n\r\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\r\n\r\n        {{ query }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {% set sql_results={} %}\r\n\r\n    {%- if execute -%}\r\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\r\n        {% for column_name, column in sql_results_table.items() %}\r\n            {% do sql_results.update({column_name: column.values()}) %}\r\n        {% endfor %}\r\n    {%- endif -%}\r\n\r\n    {{ return(sql_results) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6567402}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6567402}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=database,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return([]) }}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6567402}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6723704}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=database,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return([]) }}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6723704}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\r\n        (schema_pattern, table_pattern, exclude, database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6723704}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n        select distinct\r\n            table_schema as {{ adapter.quote('table_schema') }},\r\n            table_name as {{ adapter.quote('table_name') }},\r\n            {{ dbt_utils.get_table_types_sql() }}\r\n        from {{ database }}.information_schema.tables\r\n        where table_schema ilike '{{ schema_pattern }}'\r\n        and table_name ilike '{{ table_pattern }}'\r\n        and table_name not ilike '{{ exclude }}'\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6723704}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {% if '%' in schema_pattern %}\r\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\r\n    {% else %}\r\n        {% set schemata=[schema_pattern] %}\r\n    {% endif %}\r\n\r\n    {% set sql %}\r\n        {% for schema in schemata %}\r\n            select distinct\r\n                table_schema,\r\n                table_name,\r\n                {{ dbt_utils.get_table_types_sql() }}\r\n\r\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\r\n            where lower(table_name) like lower ('{{ table_pattern }}')\r\n                and lower(table_name) not like lower ('{{ exclude }}')\r\n\r\n            {% if not loop.last %} union all {% endif %}\r\n\r\n        {% endfor %}\r\n    {% endset %}\r\n\r\n    {{ return(sql) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6723704}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\r\n    {% if execute %}\r\n\r\n        {% set sql %}\r\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\r\n        where lower(schema_name) like lower('{{ schema_pattern }}')\r\n        {% endset %}\r\n\r\n        {% set results=run_query(sql) %}\r\n\r\n        {% set schemata=results.columns['schema_name'].values() %}\r\n\r\n        {{ return(schemata) }}\r\n\r\n    {% else %}\r\n\r\n        {{ return([]) }}\r\n\r\n    {% endif %}\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\r\n\r\n    {{ dbt_utils.get_tables_by_pattern_sql(\r\n        schema_pattern = schema,\r\n        table_pattern = prefix ~ '%',\r\n        exclude = exclude,\r\n        database = database\r\n    ) }}\r\n    \r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\r\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\r\n            case table_type\r\n                when 'BASE TABLE' then 'table'\r\n                when 'EXTERNAL TABLE' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(table_type)\r\n            end as {{ adapter.quote('table_type') }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\r\n            case table_type\r\n                when 'BASE TABLE' then 'table'\r\n                when 'FOREIGN' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(table_type)\r\n            end as {{ adapter.quote('table_type') }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\r\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\r\n\r\n{%- macro default__group_by(n) -%}\r\n\r\n  group by {% for i in range(1, n + 1) -%}\r\n      {{ i }}{{ ',' if not loop.last }}   \r\n   {%- endfor -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\r\n    acos(-1) * {{degrees}} / 180\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.6879969}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n{%- if unit == 'mi' %}\r\n    {% set conversion_rate = 1 %}\r\n{% elif unit == 'km' %}\r\n    {% set conversion_rate = 1.60934 %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\r\n{% endif %}\r\n\r\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\r\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\r\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7036257}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\r\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\r\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\r\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\r\n{%- if unit == 'mi' %}\r\n    {% set conversion_rate = 1 %}\r\n{% elif unit == 'km' %}\r\n    {% set conversion_rate = 1.60934 %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\r\n{% endif %}\r\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\r\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\r\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7036257}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\r\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7036257}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\r\n{%- for col in cols %}\r\n\r\n    {% if col.is_string() -%}\r\n\r\n    nullif({{col.name}},'') as {{col.name}}\r\n\r\n    {%- else -%}\r\n\r\n    {{col.name}}\r\n\r\n    {%- endif -%}\r\n\r\n{%- if not loop.last -%} , {%- endif -%}\r\n\r\n{%- endfor -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7036257}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\r\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7036257}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\r\n\r\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\r\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\r\n  {% set cols = adapter.get_columns_in_relation(relation) %}\r\n\r\n  select {{ dbt_utils.nullcheck(cols) }}\r\n  from {{relation}}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7036257}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\r\n               values,\r\n               alias=True,\r\n               agg='sum',\r\n               cmp='=',\r\n               prefix='',\r\n               suffix='',\r\n               then_value=1,\r\n               else_value=0,\r\n               quote_identifiers=True,\r\n               distinct=False) %}\r\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7036257}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\r\n               values,\r\n               alias=True,\r\n               agg='sum',\r\n               cmp='=',\r\n               prefix='',\r\n               suffix='',\r\n               then_value=1,\r\n               else_value=0,\r\n               quote_identifiers=True,\r\n               distinct=False) %}\r\n  {% for value in values %}\r\n    {{ agg }}(\r\n      {% if distinct %} distinct {% endif %}\r\n      case\r\n      when {{ column }} {{ cmp }} '{{ escape_single_quotes(value) }}'\r\n        then {{ then_value }}\r\n      else {{ else_value }}\r\n      end\r\n    )\r\n    {% if alias %}\r\n      {% if quote_identifiers %}\r\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\r\n      {% else %}\r\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\r\n      {% endif %}\r\n    {% endif %}\r\n    {% if not loop.last %},{% endif %}\r\n  {% endfor %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7192588}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\r\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7192588}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\r\n\r\n{%- macro default__safe_add(field_list) -%}\r\n\r\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\r\n\r\n{%- set error_message = '\r\nWarning: the `safe_add` macro now takes a single list argument instead of \\\r\nstring arguments. The {}.{} model triggered this warning. \\\r\n'.format(model.package_name, model.name) -%}\r\n\r\n{%- do exceptions.warn(error_message) -%}\r\n\r\n{%- endif -%}\r\n\r\n{% set fields = [] %}\r\n\r\n{%- for field in field_list -%}\r\n\r\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\r\n\r\n{%- endfor -%}\r\n\r\n{{ fields|join(' +\\n  ') }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7192588}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7192588}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {{ return('*') }}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n      {{- return('*') -}}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7192588}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\r\n    {% set frustrating_jinja_feature = varargs %}\r\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7192588}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\r\n\r\n{%- macro default__surrogate_key(field_list) -%}\r\n\r\n{%- set error_message = '\r\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\r\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\r\ndifferently to empty strings. To restore the behaviour of the original \\\r\nmacro, add a variable scoped to the dbt_utils package called \\\r\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\r\ndbt_project.yml file with a value of True. \\\r\nThe {}.{} model triggered this warning. \\\r\n'.format(model.package_name, model.name) -%}\r\n\r\n{%- do exceptions.raise_compiler_error(error_message) -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7192588}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\r\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7348905}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\r\n\r\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\r\n\r\n    {%- if exclude and include -%}\r\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\r\n    {%- endif -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\r\n    {%- if not execute %}\r\n        {{ return('') }}\r\n    {% endif -%}\r\n\r\n    {%- set column_override = column_override if column_override is not none else {} -%}\r\n\r\n    {%- set relation_columns = {} -%}\r\n    {%- set column_superset = {} -%}\r\n    {%- set all_excludes = [] -%}\r\n    {%- set all_includes = [] -%}\r\n\r\n    {%- if exclude -%}\r\n        {%- for exc in exclude -%}\r\n            {%- do all_excludes.append(exc | lower) -%}\r\n        {%- endfor -%}\r\n    {%- endif -%}\r\n\r\n    {%- if include -%}\r\n        {%- for inc in include -%}\r\n            {%- do all_includes.append(inc | lower) -%}\r\n        {%- endfor -%}\r\n    {%- endif -%}\r\n\r\n    {%- for relation in relations -%}\r\n\r\n        {%- do relation_columns.update({relation: []}) -%}\r\n\r\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\r\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\r\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\r\n        {%- for col in cols -%}\r\n\r\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\r\n        {%- if exclude and col.column | lower in all_excludes -%}\r\n\r\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\r\n        {%- elif include and col.column | lower not in all_includes -%}\r\n\r\n        {#- Otherwise add the column to the column superset -#}\r\n        {%- else -%}\r\n\r\n            {#- update the list of columns in this relation -#}\r\n            {%- do relation_columns[relation].append(col.column) -%}\r\n\r\n            {%- if col.column in column_superset -%}\r\n\r\n                {%- set stored = column_superset[col.column] -%}\r\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\r\n\r\n                    {%- do column_superset.update({col.column: col}) -%}\r\n\r\n                {%- endif %}\r\n\r\n            {%- else -%}\r\n\r\n                {%- do column_superset.update({col.column: col}) -%}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n    {%- endfor -%}\r\n\r\n    {%- set ordered_column_names = column_superset.keys() -%}\r\n    {%- set dbt_command = flags.WHICH -%}\r\n\r\n\r\n    {% if dbt_command in ['run', 'build'] %}\r\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\r\n        {%- set relations_string -%}\r\n            {%- for relation in relations -%}\r\n                {{ relation.name }}\r\n            {%- if not loop.last %}, {% endif -%}\r\n            {%- endfor -%}\r\n        {%- endset -%}\r\n\r\n        {%- set error_message -%}\r\n            There were no columns found to union for relations {{ relations_string }}\r\n        {%- endset -%}\r\n\r\n        {{ exceptions.raise_compiler_error(error_message) }}\r\n    {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- for relation in relations %}\r\n\r\n        (\r\n            select\r\n\r\n                {%- if source_column_name is not none %}\r\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\r\n                {%- endif %}\r\n\r\n                {% for col_name in ordered_column_names -%}\r\n\r\n                    {%- set col = column_superset[col_name] %}\r\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\r\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\r\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\r\n\r\n                {%- endfor %}\r\n\r\n            from {{ relation }}\r\n\r\n            {% if where -%}\r\n            where {{ where }}\r\n            {%- endif %}\r\n        )\r\n\r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7505183}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\r\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7505183}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\r\n\r\n    {% if not relation %}\r\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\r\n    {% endif %}\r\n\r\n  {%- set exclude = exclude if exclude is not none else [] %}\r\n  {%- set remove = remove if remove is not none else [] %}\r\n\r\n  {%- set include_cols = [] %}\r\n\r\n  {%- set table_columns = {} %}\r\n\r\n  {%- do table_columns.update({relation: []}) %}\r\n\r\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\r\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\r\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\r\n\r\n  {%- for col in cols -%}\r\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\r\n      {% do include_cols.append(col) %}\r\n    {%- endif %}\r\n  {%- endfor %}\r\n\r\n\r\n  {%- for col in include_cols -%}\r\n    select\r\n      {%- for exclude_col in exclude %}\r\n        {{ exclude_col }},\r\n      {%- endfor %}\r\n\r\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\r\n      cast(  {% if col.data_type == 'boolean' %}\r\n           {{ cast_bool_to_text(col.column) }}\r\n             {% else %}\r\n           {{ col.column }}\r\n             {% endif %}\r\n           as {{ cast_to }}) as {{ value_name }}\r\n\r\n    from {{ relation }}\r\n\r\n    {% if not loop.last -%}\r\n      union all\r\n    {% endif -%}\r\n  {%- endfor -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7661471}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\r\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7661471}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is eaxtly at the bucket egde\r\n        case\r\n            when\r\n                mod(\r\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\r\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\r\n                ) = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    least(\r\n        ceil(\r\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\r\n        ),\r\n        {{ num_buckets }} + 1\r\n    )\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7661471}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is exactly at the bucket edge\r\n        case\r\n            when\r\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\r\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\r\n                 = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    least(\r\n        ceil(\r\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\r\n        ),\r\n        {{ num_buckets }} + 1\r\n    )\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7661471}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\r\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7817733}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\r\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7817733}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\r\n\r\n{%- set parsed =\r\n    split_part(\r\n        split_part(\r\n            replace(\r\n                replace(\r\n                    replace(field, \"'android-app://'\", \"''\"\r\n                    ), \"'http://'\", \"''\"\r\n                ), \"'https://'\", \"''\"\r\n            ), \"'/'\", 1\r\n        ), \"'?'\", 1\r\n    )\r\n\r\n-%}\r\n\r\n\r\n    {{ dbt.safe_cast(\r\n        parsed,\r\n        type_string()\r\n        )}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7817733}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\r\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7817733}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\r\n\r\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\r\n\r\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\r\n\r\nnullif({{ split }},'')\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7817733}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\r\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7817733}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\r\n\r\n    {%- set stripped_url =\r\n        replace(\r\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\r\n    -%}\r\n\r\n    {%- set first_slash_pos -%}\r\n        coalesce(\r\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\r\n            {{ position(\"'?'\", stripped_url) }} - 1\r\n            )\r\n    {%- endset -%}\r\n\r\n    {%- set parsed_path =\r\n        split_part(\r\n            right(\r\n                stripped_url,\r\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\r\n                ),\r\n            \"'?'\", 1\r\n            )\r\n    -%}\r\n\r\n    {{ safe_cast(\r\n        parsed_path,\r\n        type_string()\r\n    )}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667898983.7817733}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Users\\james\\PycharmProjects\\Data_Vault_Code-Advanced_Topics\\venv\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbtvault_bigquery_demo.v_comp_customers_as_is": ["model.dbtvault_bigquery_demo.hub_customer", "model.dbtvault_bigquery_demo.sat_UK_customer", "model.dbtvault_bigquery_demo.sat_US_customer"], "model.dbtvault_bigquery_demo.v_comp_customer_history": ["model.dbtvault_bigquery_demo.hub_customer", "model.dbtvault_bigquery_demo.sat_UK_customer", "model.dbtvault_bigquery_demo.sat_US_customer"], "model.dbtvault_bigquery_demo.v_comp_customer_orders_as_is": ["model.dbtvault_bigquery_demo.v_comp_customers_as_is", "model.dbtvault_bigquery_demo.v_comp_orders_as_is"], "model.dbtvault_bigquery_demo.v_comp_orders_as_is": ["model.dbtvault_bigquery_demo.hub_order", "model.dbtvault_bigquery_demo.link_customer_order", "model.dbtvault_bigquery_demo.sat_UK_order"], "model.dbtvault_bigquery_demo.v_raw_customer_wealth_bracket": ["source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_customer_wealth_brackets"], "model.dbtvault_bigquery_demo.v_raw_UK_customer": ["source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_customers", "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_customer_wealth_brackets"], "model.dbtvault_bigquery_demo.v_raw_UK_order": ["source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_customers", "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_orders"], "model.dbtvault_bigquery_demo.v_raw_US_customer": ["source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_US_customers"], "model.dbtvault_bigquery_demo.hub_customer": ["model.dbtvault_bigquery_demo.v_stg_UK_customer", "model.dbtvault_bigquery_demo.v_stg_US_customer"], "model.dbtvault_bigquery_demo.hub_customer_wealth_bracket": ["model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket"], "model.dbtvault_bigquery_demo.hub_order": ["model.dbtvault_bigquery_demo.v_stg_UK_order"], "model.dbtvault_bigquery_demo.link_customer_order": ["model.dbtvault_bigquery_demo.v_stg_UK_order"], "model.dbtvault_bigquery_demo.link_customer_wealth_bracket_customer": ["model.dbtvault_bigquery_demo.v_stg_UK_customer"], "model.dbtvault_bigquery_demo.sat_customer_wealth_bracket": ["model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket"], "model.dbtvault_bigquery_demo.sat_UK_customer": ["model.dbtvault_bigquery_demo.v_stg_UK_customer"], "model.dbtvault_bigquery_demo.sat_UK_order": ["model.dbtvault_bigquery_demo.v_stg_UK_order"], "model.dbtvault_bigquery_demo.sat_US_customer": ["model.dbtvault_bigquery_demo.v_stg_US_customer"], "model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket": ["model.dbtvault_bigquery_demo.v_raw_customer_wealth_bracket"], "model.dbtvault_bigquery_demo.v_stg_UK_customer": ["model.dbtvault_bigquery_demo.v_raw_UK_customer"], "model.dbtvault_bigquery_demo.v_stg_UK_order": ["model.dbtvault_bigquery_demo.v_raw_UK_order"], "model.dbtvault_bigquery_demo.v_stg_US_customer": ["model.dbtvault_bigquery_demo.v_raw_US_customer"], "seed.dbtvault_bigquery_demo.repl_customer_wealth_brackets": [], "seed.dbtvault_bigquery_demo.repl_UK_customers": [], "seed.dbtvault_bigquery_demo.repl_US_customers": [], "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_customers": [], "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_US_customers": [], "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_orders": [], "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_customer_wealth_brackets": []}, "child_map": {"model.dbtvault_bigquery_demo.v_comp_customers_as_is": ["model.dbtvault_bigquery_demo.v_comp_customer_orders_as_is"], "model.dbtvault_bigquery_demo.v_comp_customer_history": [], "model.dbtvault_bigquery_demo.v_comp_customer_orders_as_is": [], "model.dbtvault_bigquery_demo.v_comp_orders_as_is": ["model.dbtvault_bigquery_demo.v_comp_customer_orders_as_is"], "model.dbtvault_bigquery_demo.v_raw_customer_wealth_bracket": ["model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket"], "model.dbtvault_bigquery_demo.v_raw_UK_customer": ["model.dbtvault_bigquery_demo.v_stg_UK_customer"], "model.dbtvault_bigquery_demo.v_raw_UK_order": ["model.dbtvault_bigquery_demo.v_stg_UK_order"], "model.dbtvault_bigquery_demo.v_raw_US_customer": ["model.dbtvault_bigquery_demo.v_stg_US_customer"], "model.dbtvault_bigquery_demo.hub_customer": ["model.dbtvault_bigquery_demo.v_comp_customer_history", "model.dbtvault_bigquery_demo.v_comp_customers_as_is"], "model.dbtvault_bigquery_demo.hub_customer_wealth_bracket": [], "model.dbtvault_bigquery_demo.hub_order": ["model.dbtvault_bigquery_demo.v_comp_orders_as_is"], "model.dbtvault_bigquery_demo.link_customer_order": ["model.dbtvault_bigquery_demo.v_comp_orders_as_is"], "model.dbtvault_bigquery_demo.link_customer_wealth_bracket_customer": [], "model.dbtvault_bigquery_demo.sat_customer_wealth_bracket": [], "model.dbtvault_bigquery_demo.sat_UK_customer": ["model.dbtvault_bigquery_demo.v_comp_customer_history", "model.dbtvault_bigquery_demo.v_comp_customers_as_is"], "model.dbtvault_bigquery_demo.sat_UK_order": ["model.dbtvault_bigquery_demo.v_comp_orders_as_is"], "model.dbtvault_bigquery_demo.sat_US_customer": ["model.dbtvault_bigquery_demo.v_comp_customer_history", "model.dbtvault_bigquery_demo.v_comp_customers_as_is"], "model.dbtvault_bigquery_demo.v_stg_customer_wealth_bracket": ["model.dbtvault_bigquery_demo.hub_customer_wealth_bracket", "model.dbtvault_bigquery_demo.sat_customer_wealth_bracket"], "model.dbtvault_bigquery_demo.v_stg_UK_customer": ["model.dbtvault_bigquery_demo.hub_customer", "model.dbtvault_bigquery_demo.link_customer_wealth_bracket_customer", "model.dbtvault_bigquery_demo.sat_UK_customer"], "model.dbtvault_bigquery_demo.v_stg_UK_order": ["model.dbtvault_bigquery_demo.hub_order", "model.dbtvault_bigquery_demo.link_customer_order", "model.dbtvault_bigquery_demo.sat_UK_order"], "model.dbtvault_bigquery_demo.v_stg_US_customer": ["model.dbtvault_bigquery_demo.hub_customer", "model.dbtvault_bigquery_demo.sat_US_customer"], "seed.dbtvault_bigquery_demo.repl_customer_wealth_brackets": [], "seed.dbtvault_bigquery_demo.repl_UK_customers": [], "seed.dbtvault_bigquery_demo.repl_US_customers": [], "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_customers": ["model.dbtvault_bigquery_demo.v_raw_UK_customer", "model.dbtvault_bigquery_demo.v_raw_UK_order"], "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_US_customers": ["model.dbtvault_bigquery_demo.v_raw_US_customer"], "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_UK_orders": ["model.dbtvault_bigquery_demo.v_raw_UK_order"], "source.dbtvault_bigquery_demo.dbtvault_bigquery_demo.repl_customer_wealth_brackets": ["model.dbtvault_bigquery_demo.v_raw_UK_customer", "model.dbtvault_bigquery_demo.v_raw_customer_wealth_bracket"]}}